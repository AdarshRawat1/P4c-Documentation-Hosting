<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.10.0" doxygen_gitid="ebc57c6dd303a980bd19dd74b8b61c8f3f5180ca">
  <compound kind="class">
    <name>AbstractSolver</name>
    <filename>class_abstract_solver.html</filename>
    <base>ICastable</base>
    <member kind="function" virtualness="pure">
      <type>virtual std::optional&lt; bool &gt;</type>
      <name>checkSat</name>
      <anchorfile>class_abstract_solver.html</anchorfile>
      <anchor>aa2b7bf28ca31ee5db915d9bb005a783a</anchor>
      <arglist>(const std::vector&lt; const Constraint * &gt; &amp;asserts)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>comment</name>
      <anchorfile>class_abstract_solver.html</anchorfile>
      <anchor>a034582fdc6850b85afb976a24df3be7e</anchor>
      <arglist>(cstring comment)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const SymbolicMapping &amp;</type>
      <name>getSymbolicMapping</name>
      <anchorfile>class_abstract_solver.html</anchorfile>
      <anchor>ab6ddf58be50152aef20a6c6ab48e689b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isInIncrementalMode</name>
      <anchorfile>class_abstract_solver.html</anchorfile>
      <anchor>a3c7c89959e32c671351b6bfb49433386</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>seed</name>
      <anchorfile>class_abstract_solver.html</anchorfile>
      <anchor>a59e9f213832786b8cf89b85c5f8df207</anchor>
      <arglist>(unsigned seed)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>timeout</name>
      <anchorfile>class_abstract_solver.html</anchorfile>
      <anchor>af822474be1f133d4a13077999d993e46</anchor>
      <arglist>(unsigned tm)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>toJSON</name>
      <anchorfile>class_abstract_solver.html</anchorfile>
      <anchor>af62bf0c29650c8d8fdc7945cdb13abb9</anchor>
      <arglist>(JSONGenerator &amp;) const =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>alloc_trace_cb_t</name>
    <filename>structalloc__trace__cb__t.html</filename>
  </compound>
  <compound kind="class">
    <name>AllocTrace</name>
    <filename>class_alloc_trace.html</filename>
  </compound>
  <compound kind="struct">
    <name>AutoCompileContext</name>
    <filename>struct_auto_compile_context.html</filename>
  </compound>
  <compound kind="struct">
    <name>AutoStdioInputStream</name>
    <filename>struct_auto_stdio_input_stream.html</filename>
  </compound>
  <compound kind="class">
    <name>backtrace_exception</name>
    <filename>classbacktrace__exception.html</filename>
    <templarg>class E</templarg>
  </compound>
  <compound kind="class">
    <name>Backtrack</name>
    <filename>class_backtrack.html</filename>
    <base virtualness="virtual">Visitor</base>
    <class kind="struct">Backtrack::trigger</class>
  </compound>
  <compound kind="struct">
    <name>Backtrack::trigger</name>
    <filename>struct_backtrack_1_1trigger.html</filename>
    <base>ICastable</base>
  </compound>
  <compound kind="class">
    <name>BaseCompileContext</name>
    <filename>class_base_compile_context.html</filename>
    <base>ICompileContext</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ErrorReporter &amp;</type>
      <name>errorReporter</name>
      <anchorfile>class_base_compile_context.html</anchorfile>
      <anchor>ae3f7c678b61d213422b17bce8f0ed57e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DiagnosticAction</type>
      <name>getDefaultErrorDiagnosticAction</name>
      <anchorfile>class_base_compile_context.html</anchorfile>
      <anchor>aeff98820b9b63c8581c21337730de1f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DiagnosticAction</type>
      <name>getDefaultInfoDiagnosticAction</name>
      <anchorfile>class_base_compile_context.html</anchorfile>
      <anchor>a0df29b5b18450d4563f40bb75ac23d5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DiagnosticAction</type>
      <name>getDefaultWarningDiagnosticAction</name>
      <anchorfile>class_base_compile_context.html</anchorfile>
      <anchor>a15ff8b079340eb68566f026ec74b8df0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DiagnosticAction</type>
      <name>getDiagnosticAction</name>
      <anchorfile>class_base_compile_context.html</anchorfile>
      <anchor>af5231dedce1c1fc8110b1e8655519d52</anchor>
      <arglist>(cstring diagnostic, DiagnosticAction defaultAction)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BaseCompileContext &amp;</type>
      <name>get</name>
      <anchorfile>class_base_compile_context.html</anchorfile>
      <anchor>a509f42fd27b2deac994b07d49f5df60c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>basic_nullbuf</name>
    <filename>classbasic__nullbuf.html</filename>
    <templarg>class cT</templarg>
    <templarg>class traits</templarg>
  </compound>
  <compound kind="struct">
    <name>BitRange::FromTo</name>
    <filename>struct_bit_range_1_1_from_to.html</filename>
  </compound>
  <compound kind="struct">
    <name>BitRange::MinToMax</name>
    <filename>struct_bit_range_1_1_min_to_max.html</filename>
  </compound>
  <compound kind="struct">
    <name>BitRange::StartLen</name>
    <filename>struct_bit_range_1_1_start_len.html</filename>
  </compound>
  <compound kind="struct">
    <name>BitRange::ZeroToMax</name>
    <filename>struct_bit_range_1_1_zero_to_max.html</filename>
  </compound>
  <compound kind="class">
    <name>bitranges</name>
    <filename>classbitranges.html</filename>
  </compound>
  <compound kind="class">
    <name>bitvec</name>
    <filename>classbitvec.html</filename>
    <class kind="class">bitvec::const_bitref</class>
    <class kind="class">bitvec::copy_bitref</class>
    <class kind="class">bitvec::nonconst_bitref</class>
    <member kind="function">
      <type>void</type>
      <name>rotate_right</name>
      <anchorfile>classbitvec.html</anchorfile>
      <anchor>a2aa9e0fe8b10d42b2560c753a5544641</anchor>
      <arglist>(size_t start_bit, size_t rotation_idx, size_t end_bit)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>bitvec::const_bitref</name>
    <filename>classbitvec_1_1const__bitref.html</filename>
  </compound>
  <compound kind="class">
    <name>bitvec::copy_bitref</name>
    <filename>classbitvec_1_1copy__bitref.html</filename>
  </compound>
  <compound kind="class">
    <name>bitvec::nonconst_bitref</name>
    <filename>classbitvec_1_1nonconst__bitref.html</filename>
  </compound>
  <compound kind="class">
    <name>BMV2::ActionConverter</name>
    <filename>class_b_m_v2_1_1_action_converter.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>BMV2::ArithmeticFixup</name>
    <filename>class_b_m_v2_1_1_arithmetic_fixup.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>BMV2::Backend</name>
    <filename>class_b_m_v2_1_1_backend.html</filename>
  </compound>
  <compound kind="class">
    <name>BMV2::BMV2Options</name>
    <filename>class_b_m_v2_1_1_b_m_v2_options.html</filename>
    <base>CompilerOptions</base>
  </compound>
  <compound kind="class">
    <name>BMV2::BuildResourceMap</name>
    <filename>class_b_m_v2_1_1_build_resource_map.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>BMV2::CFG</name>
    <filename>class_b_m_v2_1_1_c_f_g.html</filename>
    <base>IHasDbPrint</base>
    <class kind="class">BMV2::CFG::DummyNode</class>
    <class kind="class">BMV2::CFG::Edge</class>
    <class kind="class">BMV2::CFG::EdgeSet</class>
    <class kind="class">BMV2::CFG::IfNode</class>
    <class kind="class">BMV2::CFG::Node</class>
    <class kind="class">BMV2::CFG::TableNode</class>
    <member kind="function">
      <type>bool</type>
      <name>checkImplementable</name>
      <anchorfile>class_b_m_v2_1_1_c_f_g.html</anchorfile>
      <anchor>a61ec50be8017862e781a6c5fcb916877</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BMV2::CFG::DummyNode</name>
    <filename>class_b_m_v2_1_1_c_f_g_1_1_dummy_node.html</filename>
    <base>BMV2::CFG::Node</base>
  </compound>
  <compound kind="class">
    <name>BMV2::CFG::Edge</name>
    <filename>class_b_m_v2_1_1_c_f_g_1_1_edge.html</filename>
    <member kind="variable">
      <type>Node *</type>
      <name>endpoint</name>
      <anchorfile>class_b_m_v2_1_1_c_f_g_1_1_edge.html</anchorfile>
      <anchor>a4e6d926d17c80f719c43a216bf190e6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BMV2::CFG::EdgeSet</name>
    <filename>class_b_m_v2_1_1_c_f_g_1_1_edge_set.html</filename>
    <base>IHasDbPrint</base>
    <member kind="function">
      <type>bool</type>
      <name>checkSame</name>
      <anchorfile>class_b_m_v2_1_1_c_f_g_1_1_edge_set.html</anchorfile>
      <anchor>ab694366025b6658b85080e3cc30ae628</anchor>
      <arglist>(const EdgeSet &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDestination</name>
      <anchorfile>class_b_m_v2_1_1_c_f_g_1_1_edge_set.html</anchorfile>
      <anchor>a53f58bc758773667dc04714d0a86ea14</anchor>
      <arglist>(const CFG::Node *destination) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BMV2::CFG::IfNode</name>
    <filename>class_b_m_v2_1_1_c_f_g_1_1_if_node.html</filename>
    <base>BMV2::CFG::Node</base>
  </compound>
  <compound kind="class">
    <name>BMV2::CFG::Node</name>
    <filename>class_b_m_v2_1_1_c_f_g_1_1_node.html</filename>
    <base>IHasDbPrint</base>
    <base>ICastable</base>
  </compound>
  <compound kind="class">
    <name>BMV2::CFG::TableNode</name>
    <filename>class_b_m_v2_1_1_c_f_g_1_1_table_node.html</filename>
    <base>BMV2::CFG::Node</base>
  </compound>
  <compound kind="class">
    <name>BMV2::ControlConverter</name>
    <filename>class_b_m_v2_1_1_control_converter.html</filename>
    <templarg>Standard::Arch arch</templarg>
    <base>Inspector</base>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>handleTableImplementation</name>
      <anchorfile>class_b_m_v2_1_1_control_converter.html</anchorfile>
      <anchor>a781ffbcc9dc4dec7bfeb517a45644ad1</anchor>
      <arglist>(const IR::Property *implementation, const IR::Key *key, Util::JsonObject *table, Util::JsonArray *action_profiles, BMV2::SharedActionSelectorCheck&lt; arch &gt; *)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BMV2::ConversionContext</name>
    <filename>struct_b_m_v2_1_1_conversion_context.html</filename>
  </compound>
  <compound kind="class">
    <name>BMV2::ConvertGlobals</name>
    <filename>class_b_m_v2_1_1_convert_globals.html</filename>
    <base>Inspector</base>
    <member kind="function">
      <type>bool</type>
      <name>preorder</name>
      <anchorfile>class_b_m_v2_1_1_convert_globals.html</anchorfile>
      <anchor>a1626a20fcc50315c02dfc8869f373fe0</anchor>
      <arglist>(const IR::ToplevelBlock *block) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BMV2::ConvertPsaToJson</name>
    <filename>class_b_m_v2_1_1_convert_psa_to_json.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>BMV2::DeparserConverter</name>
    <filename>class_b_m_v2_1_1_deparser_converter.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>BMV2::DirectMeterMap</name>
    <filename>class_b_m_v2_1_1_direct_meter_map.html</filename>
    <class kind="struct">BMV2::DirectMeterMap::DirectMeterInfo</class>
    <member kind="function">
      <type>void</type>
      <name>setDestination</name>
      <anchorfile>class_b_m_v2_1_1_direct_meter_map.html</anchorfile>
      <anchor>a00de5d22a9fadee3fa7d26607ef9ebe2</anchor>
      <arglist>(const IR::IDeclaration *meter, const IR::Expression *destination)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>class_b_m_v2_1_1_direct_meter_map.html</anchorfile>
      <anchor>af8b97de9e43723a7cf58132846ee3ff9</anchor>
      <arglist>(const IR::IDeclaration *meter, unsigned size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTable</name>
      <anchorfile>class_b_m_v2_1_1_direct_meter_map.html</anchorfile>
      <anchor>a729b4ffe6724377c7d36bdadc3c20eb9</anchor>
      <arglist>(const IR::IDeclaration *meter, const IR::P4Table *table)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BMV2::DirectMeterMap::DirectMeterInfo</name>
    <filename>struct_b_m_v2_1_1_direct_meter_map_1_1_direct_meter_info.html</filename>
  </compound>
  <compound kind="class">
    <name>BMV2::DiscoverStructure</name>
    <filename>class_b_m_v2_1_1_discover_structure.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>BMV2::EnumOn32Bits</name>
    <filename>class_b_m_v2_1_1_enum_on32_bits.html</filename>
    <base>P4::ChooseEnumRepresentation</base>
    <member kind="function">
      <type></type>
      <name>EnumOn32Bits</name>
      <anchorfile>class_b_m_v2_1_1_enum_on32_bits.html</anchorfile>
      <anchor>ac9d775187a722b57234deca154f9997e</anchor>
      <arglist>(cstring filename)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BMV2::ExpressionConverter</name>
    <filename>class_b_m_v2_1_1_expression_converter.html</filename>
    <base>Inspector</base>
    <member kind="function">
      <type>Util::IJson *</type>
      <name>convert</name>
      <anchorfile>class_b_m_v2_1_1_expression_converter.html</anchorfile>
      <anchor>a956ac3352e52fe2a11933eab388857a4</anchor>
      <arglist>(const IR::Expression *e, bool doFixup=true, bool wrap=true, bool convertBool=false)</arglist>
    </member>
    <member kind="function">
      <type>const IR::Parameter *</type>
      <name>enclosingParamReference</name>
      <anchorfile>class_b_m_v2_1_1_expression_converter.html</anchorfile>
      <anchor>ab12c7f2e424a70c957cd044a79dfbc39</anchor>
      <arglist>(const IR::Expression *expression)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>simpleExpressionsOnly</name>
      <anchorfile>class_b_m_v2_1_1_expression_converter.html</anchorfile>
      <anchor>af1c05e740504adef8fe20f0c8ce1935f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BMV2::ExternConverter</name>
    <filename>class_b_m_v2_1_1_extern_converter.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>convertExternInstance</name>
      <anchorfile>class_b_m_v2_1_1_extern_converter.html</anchorfile>
      <anchor>aef0073c9239fb510e3543e63fe676f8d</anchor>
      <arglist>(ConversionContext *ctxt, const IR::Declaration *c, const IR::ExternBlock *eb, const bool &amp;emitExterns)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BMV2::HeaderConverter</name>
    <filename>class_b_m_v2_1_1_header_converter.html</filename>
    <base>Inspector</base>
    <member kind="function">
      <type>void</type>
      <name>addTypesAndInstances</name>
      <anchorfile>class_b_m_v2_1_1_header_converter.html</anchorfile>
      <anchor>ab572f30710511b9d7819eebbff911886</anchor>
      <arglist>(const IR::Type_StructLike *type, bool meta)</arglist>
    </member>
    <member kind="function">
      <type>Visitor::profile_t</type>
      <name>init_apply</name>
      <anchorfile>class_b_m_v2_1_1_header_converter.html</anchorfile>
      <anchor>ac8c7e3bba67afa99763529ab69d6eb42</anchor>
      <arglist>(const IR::Node *node) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>preorder</name>
      <anchorfile>class_b_m_v2_1_1_header_converter.html</anchorfile>
      <anchor>a3b2220bb6eb54efad81c4518d25f7b86</anchor>
      <arglist>(const IR::Parameter *param) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BMV2::Helpers::CounterlikeTraits</name>
    <filename>struct_b_m_v2_1_1_helpers_1_1_counterlike_traits.html</filename>
    <templarg>typename Kind</templarg>
  </compound>
  <compound kind="struct">
    <name>BMV2::Helpers::CounterlikeTraits&lt; Standard::CounterExtern&lt; Standard::Arch::PSA &gt; &gt;</name>
    <filename>struct_b_m_v2_1_1_helpers_1_1_counterlike_traits_3_01_standard_1_1_counter_extern_3_01_standard_1_1_arch_1_1_p_s_a_01_4_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>BMV2::Helpers::CounterlikeTraits&lt; Standard::CounterExtern&lt; Standard::Arch::V1MODEL &gt; &gt;</name>
    <filename>struct_b_m_v2_1_1_helpers_1_1_counterlike_traits_3_01_standard_1_1_counter_extern_3_01_standard_d981fdf8d12f5c250b806454059141e9.html</filename>
  </compound>
  <compound kind="struct">
    <name>BMV2::Helpers::CounterlikeTraits&lt; Standard::CounterExtern&lt; Standard::Arch::V1MODEL2020 &gt; &gt;</name>
    <filename>struct_b_m_v2_1_1_helpers_1_1_counterlike_traits_3_01_standard_1_1_counter_extern_3_01_standard_1302367763c70aeb3488060364f42ba5.html</filename>
  </compound>
  <compound kind="struct">
    <name>BMV2::Helpers::CounterlikeTraits&lt; Standard::MeterExtern&lt; Standard::Arch::PSA &gt; &gt;</name>
    <filename>struct_b_m_v2_1_1_helpers_1_1_counterlike_traits_3_01_standard_1_1_meter_extern_3_01_standard_1_1_arch_1_1_p_s_a_01_4_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>BMV2::Helpers::CounterlikeTraits&lt; Standard::MeterExtern&lt; Standard::Arch::V1MODEL &gt; &gt;</name>
    <filename>struct_b_m_v2_1_1_helpers_1_1_counterlike_traits_3_01_standard_1_1_meter_extern_3_01_standard_1_3319495aeae719e9179706c80458698a.html</filename>
  </compound>
  <compound kind="struct">
    <name>BMV2::Helpers::CounterlikeTraits&lt; Standard::MeterExtern&lt; Standard::Arch::V1MODEL2020 &gt; &gt;</name>
    <filename>struct_b_m_v2_1_1_helpers_1_1_counterlike_traits_3_01_standard_1_1_meter_extern_3_01_standard_1_ca99f14e6e28c57a50cf669fc916988e.html</filename>
  </compound>
  <compound kind="class">
    <name>BMV2::InspectPsaProgram</name>
    <filename>class_b_m_v2_1_1_inspect_psa_program.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>BMV2::JsonObjects</name>
    <filename>class_b_m_v2_1_1_json_objects.html</filename>
    <member kind="function">
      <type>void</type>
      <name>add_enum</name>
      <anchorfile>class_b_m_v2_1_1_json_objects.html</anchorfile>
      <anchor>ae19b60722c5bda994fc21f6bd6a0760d</anchor>
      <arglist>(const cstring &amp;enum_name, const cstring &amp;entry_name, const unsigned entry_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_error</name>
      <anchorfile>class_b_m_v2_1_1_json_objects.html</anchorfile>
      <anchor>a1143360632a9af0386ed656c2c2f0d81</anchor>
      <arglist>(const cstring &amp;name, const unsigned type)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>add_header</name>
      <anchorfile>class_b_m_v2_1_1_json_objects.html</anchorfile>
      <anchor>af9eb60ba9bc8dfebf942242acd90f52b</anchor>
      <arglist>(const cstring &amp;type, const cstring &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_header_field</name>
      <anchorfile>class_b_m_v2_1_1_json_objects.html</anchorfile>
      <anchor>affef253c42644c518d36358281c27f90</anchor>
      <arglist>(const cstring &amp;name, Util::JsonArray *&amp;field)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>add_header_type</name>
      <anchorfile>class_b_m_v2_1_1_json_objects.html</anchorfile>
      <anchor>a98700750f7bdad94a45a111b53971f29</anchor>
      <arglist>(const cstring &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>add_header_type</name>
      <anchorfile>class_b_m_v2_1_1_json_objects.html</anchorfile>
      <anchor>a0e1dc487ae3105999b007137763be01e</anchor>
      <arglist>(const cstring &amp;name, Util::JsonArray *&amp;fields, unsigned max_length)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>add_parser_state</name>
      <anchorfile>class_b_m_v2_1_1_json_objects.html</anchorfile>
      <anchor>a145fb436b76a886f3735c9182206f2d5</anchor>
      <arglist>(const unsigned id, const cstring &amp;state_name)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>add_union</name>
      <anchorfile>class_b_m_v2_1_1_json_objects.html</anchorfile>
      <anchor>af9d077dadbc4acee03582ff4e78ba913</anchor>
      <arglist>(const cstring &amp;type, Util::JsonArray *&amp;fields, const cstring &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Util::JsonArray *</type>
      <name>append_array</name>
      <anchorfile>class_b_m_v2_1_1_json_objects.html</anchorfile>
      <anchor>ab5e4f3edfc7c1692642114bd3ee8ac59</anchor>
      <arglist>(Util::JsonArray *parent)</arglist>
    </member>
    <member kind="function">
      <type>Util::JsonArray *</type>
      <name>create_parameters</name>
      <anchorfile>class_b_m_v2_1_1_json_objects.html</anchorfile>
      <anchor>a1932422058f2c97c68b1573a09a12a57</anchor>
      <arglist>(Util::JsonObject *object)</arglist>
    </member>
    <member kind="function">
      <type>Util::JsonArray *</type>
      <name>insert_array_field</name>
      <anchorfile>class_b_m_v2_1_1_json_objects.html</anchorfile>
      <anchor>a51c96d340b0b6b5459ac285cd0bf9f7f</anchor>
      <arglist>(Util::JsonObject *parent, cstring name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BMV2::LowerExpressions</name>
    <filename>class_b_m_v2_1_1_lower_expressions.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>BMV2::MatchImplementation</name>
    <filename>class_b_m_v2_1_1_match_implementation.html</filename>
    <member kind="variable" static="yes">
      <type>static const cstring</type>
      <name>selectorMatchTypeName</name>
      <anchorfile>class_b_m_v2_1_1_match_implementation.html</anchorfile>
      <anchor>a04b73e1e30b64988d853ad18aa3ec87a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BMV2::MidEnd</name>
    <filename>class_b_m_v2_1_1_mid_end.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>BMV2::ParseAnnotations</name>
    <filename>class_b_m_v2_1_1_parse_annotations.html</filename>
    <base>P4::ParseAnnotations</base>
  </compound>
  <compound kind="class">
    <name>BMV2::ParsePsaArchitecture</name>
    <filename>class_b_m_v2_1_1_parse_psa_architecture.html</filename>
    <base>Inspector</base>
    <member kind="function">
      <type>bool</type>
      <name>preorder</name>
      <anchorfile>class_b_m_v2_1_1_parse_psa_architecture.html</anchorfile>
      <anchor>a14b0f9642c5aba633bb42e3f277c8b24</anchor>
      <arglist>(const IR::ToplevelBlock *block) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BMV2::ParserConverter</name>
    <filename>class_b_m_v2_1_1_parser_converter.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>BMV2::ParseV1Architecture</name>
    <filename>class_b_m_v2_1_1_parse_v1_architecture.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>BMV2::ProcessControls</name>
    <filename>class_b_m_v2_1_1_process_controls.html</filename>
    <base>P4::RemoveComplexExpressionsPolicy</base>
    <member kind="function">
      <type>bool</type>
      <name>convert</name>
      <anchorfile>class_b_m_v2_1_1_process_controls.html</anchorfile>
      <anchor>a588e2a2d67706159e1e7865f6111085b</anchor>
      <arglist>(const IR::P4Control *control) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BMV2::ProgramStructure</name>
    <filename>class_b_m_v2_1_1_program_structure.html</filename>
    <member kind="variable">
      <type>ordered_map&lt; const IR::P4Action *, const IR::P4Control * &gt;</type>
      <name>actions</name>
      <anchorfile>class_b_m_v2_1_1_program_structure.html</anchorfile>
      <anchor>aba30116e9ee0d7c20f266c87386e36b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ordered_map&lt; cstring, const IR::P4Table * &gt;</type>
      <name>directCounterMap</name>
      <anchorfile>class_b_m_v2_1_1_program_structure.html</anchorfile>
      <anchor>ae18bab0ce1b1be9e8eb9f805761b673b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DirectMeterMap</type>
      <name>directMeterMap</name>
      <anchorfile>class_b_m_v2_1_1_program_structure.html</anchorfile>
      <anchor>acf908fc145fa66d121cf18fb19c40531</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ordered_map&lt; const IR::IDeclaration *, unsigned int &gt;</type>
      <name>errorCodesMap</name>
      <anchorfile>class_b_m_v2_1_1_program_structure.html</anchorfile>
      <anchor>a8786b719cfc95f67681f243f2a5306d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ordered_map&lt; const IR::P4Action *, unsigned &gt;</type>
      <name>ids</name>
      <anchorfile>class_b_m_v2_1_1_program_structure.html</anchorfile>
      <anchor>a415622b82fc6b1bd627f13afa054833e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ordered_map&lt; const IR::Parameter *, unsigned &gt;</type>
      <name>index</name>
      <anchorfile>class_b_m_v2_1_1_program_structure.html</anchorfile>
      <anchor>a6d87f867782362f06f555a61d21b6d10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; cstring &gt;</type>
      <name>match_kinds</name>
      <anchorfile>class_b_m_v2_1_1_program_structure.html</anchorfile>
      <anchor>a578d778a25ba660af1ddf85cfbe402b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ordered_set&lt; const IR::Parameter * &gt;</type>
      <name>nonActionParameters</name>
      <anchorfile>class_b_m_v2_1_1_program_structure.html</anchorfile>
      <anchor>acbc5707478370387c23551ba0a3db47d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ResourceMap</type>
      <name>resourceMap</name>
      <anchorfile>class_b_m_v2_1_1_program_structure.html</anchorfile>
      <anchor>a26cba188f4e71940e05d36706db3c96f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; const IR::Declaration_Variable * &gt;</type>
      <name>variables</name>
      <anchorfile>class_b_m_v2_1_1_program_structure.html</anchorfile>
      <anchor>a9b573116fa9c554b6964cfa0638322a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BMV2::PsaCodeGenerator</name>
    <filename>class_b_m_v2_1_1_psa_code_generator.html</filename>
    <base>BMV2::PsaProgramStructure</base>
  </compound>
  <compound kind="class">
    <name>BMV2::PsaEnumOn32Bits</name>
    <filename>class_b_m_v2_1_1_psa_enum_on32_bits.html</filename>
    <base>P4::ChooseEnumRepresentation</base>
  </compound>
  <compound kind="class">
    <name>BMV2::PsaProgramStructure</name>
    <filename>class_b_m_v2_1_1_psa_program_structure.html</filename>
    <base>BMV2::ProgramStructure</base>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isCounterMetadata</name>
      <anchorfile>class_b_m_v2_1_1_psa_program_structure.html</anchorfile>
      <anchor>adef7be420bf11f4ae8762a2ecf6b59c0</anchor>
      <arglist>(cstring ptName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isStandardMetadata</name>
      <anchorfile>class_b_m_v2_1_1_psa_program_structure.html</anchorfile>
      <anchor>acd3de3492a6ac3deb74cc0b91bb2d4ee</anchor>
      <arglist>(cstring ptName)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BMV2::PsaSwitchBackend</name>
    <filename>class_b_m_v2_1_1_psa_switch_backend.html</filename>
    <base>BMV2::Backend</base>
  </compound>
  <compound kind="class">
    <name>BMV2::PsaSwitchExpressionConverter</name>
    <filename>class_b_m_v2_1_1_psa_switch_expression_converter.html</filename>
    <base>BMV2::ExpressionConverter</base>
  </compound>
  <compound kind="class">
    <name>BMV2::PsaSwitchMidEnd</name>
    <filename>class_b_m_v2_1_1_psa_switch_mid_end.html</filename>
    <base>BMV2::MidEnd</base>
  </compound>
  <compound kind="class">
    <name>BMV2::PsaSwitchOptions</name>
    <filename>class_b_m_v2_1_1_psa_switch_options.html</filename>
    <base>BMV2::BMV2Options</base>
    <member kind="function">
      <type>std::vector&lt; const char * &gt; *</type>
      <name>process</name>
      <anchorfile>class_b_m_v2_1_1_psa_switch_options.html</anchorfile>
      <anchor>ad2aac4803a1e0833b0d697c2c7f2aec4</anchor>
      <arglist>(int argc, char *const argv[]) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BMV2::RemoveComplexExpressions</name>
    <filename>class_b_m_v2_1_1_remove_complex_expressions.html</filename>
    <base>P4::RemoveComplexExpressions</base>
  </compound>
  <compound kind="class">
    <name>BMV2::RenameUserMetadata</name>
    <filename>class_b_m_v2_1_1_rename_user_metadata.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>BMV2::SharedActionSelectorCheck</name>
    <filename>class_b_m_v2_1_1_shared_action_selector_check.html</filename>
    <templarg>Standard::Arch arch</templarg>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>BMV2::SimpleSwitchBackend</name>
    <filename>class_b_m_v2_1_1_simple_switch_backend.html</filename>
    <base>BMV2::Backend</base>
    <member kind="function">
      <type>void</type>
      <name>convert</name>
      <anchorfile>class_b_m_v2_1_1_simple_switch_backend.html</anchorfile>
      <anchor>ac959c22fbbd69f77ab950d537d522c5f</anchor>
      <arglist>(const IR::ToplevelBlock *tlb) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createRecirculateFieldsList</name>
      <anchorfile>class_b_m_v2_1_1_simple_switch_backend.html</anchorfile>
      <anchor>a64dcfbf1107962f59f4d9e101db04a43</anchor>
      <arglist>(ConversionContext *ctxt, const IR::ToplevelBlock *tlb, cstring scalarName)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BMV2::SimpleSwitchExpressionConverter</name>
    <filename>class_b_m_v2_1_1_simple_switch_expression_converter.html</filename>
    <base>BMV2::ExpressionConverter</base>
  </compound>
  <compound kind="class">
    <name>BMV2::SimpleSwitchMidEnd</name>
    <filename>class_b_m_v2_1_1_simple_switch_mid_end.html</filename>
    <base>BMV2::MidEnd</base>
  </compound>
  <compound kind="class">
    <name>BMV2::SimpleSwitchOptions</name>
    <filename>class_b_m_v2_1_1_simple_switch_options.html</filename>
    <base>BMV2::BMV2Options</base>
  </compound>
  <compound kind="class">
    <name>BMV2::SkipControls</name>
    <filename>class_b_m_v2_1_1_skip_controls.html</filename>
    <base>P4::ActionSynthesisPolicy</base>
    <member kind="function">
      <type>bool</type>
      <name>convert</name>
      <anchorfile>class_b_m_v2_1_1_skip_controls.html</anchorfile>
      <anchor>a037e2356e5a0979cc3ee667569506db3</anchor>
      <arglist>(const Visitor::Context *, const IR::P4Control *control) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BMV2::Standard::ActionProfileTraits</name>
    <filename>struct_b_m_v2_1_1_standard_1_1_action_profile_traits.html</filename>
    <templarg>Arch arch</templarg>
  </compound>
  <compound kind="struct">
    <name>BMV2::Standard::ActionProfileTraits&lt; Arch::PSA &gt;</name>
    <filename>struct_b_m_v2_1_1_standard_1_1_action_profile_traits_3_01_arch_1_1_p_s_a_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>BMV2::Standard::ActionProfileTraits&lt; Arch::V1MODEL &gt;</name>
    <filename>struct_b_m_v2_1_1_standard_1_1_action_profile_traits_3_01_arch_1_1_v1_m_o_d_e_l_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>BMV2::Standard::ActionProfileTraits&lt; Arch::V1MODEL2020 &gt;</name>
    <filename>struct_b_m_v2_1_1_standard_1_1_action_profile_traits_3_01_arch_1_1_v1_m_o_d_e_l2020_01_4.html</filename>
    <base>BMV2::Standard::ActionProfileTraits&lt; Arch::V1MODEL &gt;</base>
  </compound>
  <compound kind="struct">
    <name>BMV2::Standard::ActionSelectorTraits</name>
    <filename>struct_b_m_v2_1_1_standard_1_1_action_selector_traits.html</filename>
    <templarg>Arch arch</templarg>
  </compound>
  <compound kind="struct">
    <name>BMV2::Standard::ActionSelectorTraits&lt; Arch::PSA &gt;</name>
    <filename>struct_b_m_v2_1_1_standard_1_1_action_selector_traits_3_01_arch_1_1_p_s_a_01_4.html</filename>
    <base>BMV2::Standard::ActionProfileTraits&lt; Arch::PSA &gt;</base>
  </compound>
  <compound kind="struct">
    <name>BMV2::Standard::ActionSelectorTraits&lt; Arch::V1MODEL &gt;</name>
    <filename>struct_b_m_v2_1_1_standard_1_1_action_selector_traits_3_01_arch_1_1_v1_m_o_d_e_l_01_4.html</filename>
    <base>BMV2::Standard::ActionProfileTraits&lt; Arch::V1MODEL &gt;</base>
  </compound>
  <compound kind="struct">
    <name>BMV2::Standard::ActionSelectorTraits&lt; Arch::V1MODEL2020 &gt;</name>
    <filename>struct_b_m_v2_1_1_standard_1_1_action_selector_traits_3_01_arch_1_1_v1_m_o_d_e_l2020_01_4.html</filename>
    <base>BMV2::Standard::ActionProfileTraits&lt; Arch::V1MODEL2020 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>BMV2::Standard::CounterExtern</name>
    <filename>struct_b_m_v2_1_1_standard_1_1_counter_extern.html</filename>
    <templarg>Arch arch</templarg>
  </compound>
  <compound kind="struct">
    <name>BMV2::Standard::MeterExtern</name>
    <filename>struct_b_m_v2_1_1_standard_1_1_meter_extern.html</filename>
    <templarg>Arch arch</templarg>
  </compound>
  <compound kind="struct">
    <name>BMV2::Standard::RegisterTraits</name>
    <filename>struct_b_m_v2_1_1_standard_1_1_register_traits.html</filename>
    <templarg>Arch arch</templarg>
  </compound>
  <compound kind="struct">
    <name>BMV2::Standard::RegisterTraits&lt; Arch::PSA &gt;</name>
    <filename>struct_b_m_v2_1_1_standard_1_1_register_traits_3_01_arch_1_1_p_s_a_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>BMV2::Standard::RegisterTraits&lt; Arch::V1MODEL &gt;</name>
    <filename>struct_b_m_v2_1_1_standard_1_1_register_traits_3_01_arch_1_1_v1_m_o_d_e_l_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>BMV2::Standard::RegisterTraits&lt; Arch::V1MODEL2020 &gt;</name>
    <filename>struct_b_m_v2_1_1_standard_1_1_register_traits_3_01_arch_1_1_v1_m_o_d_e_l2020_01_4.html</filename>
    <base>BMV2::Standard::RegisterTraits&lt; Arch::V1MODEL &gt;</base>
  </compound>
  <compound kind="class">
    <name>BMV2::TableAttributes</name>
    <filename>class_b_m_v2_1_1_table_attributes.html</filename>
  </compound>
  <compound kind="class">
    <name>BMV2::V1ModelProperties</name>
    <filename>class_b_m_v2_1_1_v1_model_properties.html</filename>
    <member kind="variable" static="yes">
      <type>static const cstring</type>
      <name>validField</name>
      <anchorfile>class_b_m_v2_1_1_v1_model_properties.html</anchorfile>
      <anchor>a2b616ffd7a494ba4aeea11b06bd291c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BMV2::V1ProgramStructure</name>
    <filename>class_b_m_v2_1_1_v1_program_structure.html</filename>
    <base>BMV2::ProgramStructure</base>
  </compound>
  <compound kind="struct">
    <name>bpf_elf_map</name>
    <filename>structbpf__elf__map.html</filename>
  </compound>
  <compound kind="struct">
    <name>bpf_map</name>
    <filename>structbpf__map.html</filename>
  </compound>
  <compound kind="struct">
    <name>bpf_table</name>
    <filename>structbpf__table.html</filename>
  </compound>
  <compound kind="class">
    <name>CheckHeaderTypes</name>
    <filename>class_check_header_types.html</filename>
    <base>Modifier</base>
  </compound>
  <compound kind="struct">
    <name>clone_session_entry</name>
    <filename>structclone__session__entry.html</filename>
  </compound>
  <compound kind="struct">
    <name>ClosedRange</name>
    <filename>struct_closed_range.html</filename>
    <templarg>RangeUnit Unit</templarg>
    <templarg>Endian Order</templarg>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>struct_closed_range.html</anchorfile>
      <anchor>aa9708f4df7ff0293adec3fdeb282629b</anchor>
      <arglist>(ClosedRange other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>struct_closed_range.html</anchorfile>
      <anchor>a8818e7a08d147fe52789396e1e1f224b</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>formatAsSlice</name>
      <anchorfile>struct_closed_range.html</anchorfile>
      <anchor>aab3b421701f0b79fd72e76d404cd1414</anchor>
      <arglist>(int spaceSize) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>hiByte</name>
      <anchorfile>struct_closed_range.html</anchorfile>
      <anchor>acbd529d25d50502cc83eec7527697d2b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HalfOpenRange&lt; Unit, Order &gt;</type>
      <name>intersectWith</name>
      <anchorfile>struct_closed_range.html</anchorfile>
      <anchor>a00da73b6c4d13bf2b89fdb2be42d8dcf</anchor>
      <arglist>(ClosedRange a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isHiAligned</name>
      <anchorfile>struct_closed_range.html</anchorfile>
      <anchor>a88bf6345e5257afee7e58f744fe8e014</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLoAligned</name>
      <anchorfile>struct_closed_range.html</anchorfile>
      <anchor>a79a078f4f5b420f5d67d261f6995dc26</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>loByte</name>
      <anchorfile>struct_closed_range.html</anchorfile>
      <anchor>aa3a3a7564820b0c7155311d901f6d51d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nextByte</name>
      <anchorfile>struct_closed_range.html</anchorfile>
      <anchor>a137f120422861ee3fd5f293cf070a6d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>struct_closed_range.html</anchorfile>
      <anchor>a2ba3e7848d43b770d9b566b2b9b0e4af</anchor>
      <arglist>(const ClosedRange &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlaps</name>
      <anchorfile>struct_closed_range.html</anchorfile>
      <anchor>ac00bccf1cea6170713bddfff38d15544</anchor>
      <arglist>(ClosedRange a) const</arglist>
    </member>
    <member kind="function">
      <type>ClosedRange&lt; RangeUnit::Bit, Order &gt;</type>
      <name>resizedToBits</name>
      <anchorfile>struct_closed_range.html</anchorfile>
      <anchor>ab9c4a36cdeed105ff2dc60f9b6c9edfc</anchor>
      <arglist>(int size) const</arglist>
    </member>
    <member kind="function">
      <type>ClosedRange</type>
      <name>resizedToBytes</name>
      <anchorfile>struct_closed_range.html</anchorfile>
      <anchor>a093b1d5a2385c6147001fa59a7b9a8e5</anchor>
      <arglist>(int size) const</arglist>
    </member>
    <member kind="function">
      <type>ClosedRange&lt; RangeUnit::Bit, Order &gt;</type>
      <name>shiftedByBits</name>
      <anchorfile>struct_closed_range.html</anchorfile>
      <anchor>a93aa1df445ebe5c91f0bc432dd32d718</anchor>
      <arglist>(int offset) const</arglist>
    </member>
    <member kind="function">
      <type>ClosedRange</type>
      <name>shiftedByBytes</name>
      <anchorfile>struct_closed_range.html</anchorfile>
      <anchor>a7dbe2a2007df01bf0710485e35c4b852</anchor>
      <arglist>(int offset) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>size</name>
      <anchorfile>struct_closed_range.html</anchorfile>
      <anchor>a8aa2425409ad20e13d70c73af2d779cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toJSON</name>
      <anchorfile>struct_closed_range.html</anchorfile>
      <anchor>adb3dfcc466b7c6cacafa6583607ca969</anchor>
      <arglist>(JSONGenerator &amp;json) const</arglist>
    </member>
    <member kind="function">
      <type>ClosedRange&lt; Unit, DestOrder &gt;</type>
      <name>toOrder</name>
      <anchorfile>struct_closed_range.html</anchorfile>
      <anchor>a09bd1c41d839e878b1e5a63a44118c00</anchor>
      <arglist>(int spaceSize) const</arglist>
    </member>
    <member kind="function">
      <type>ClosedRange&lt; DestUnit, Order &gt;</type>
      <name>toUnit</name>
      <anchorfile>struct_closed_range.html</anchorfile>
      <anchor>ab8d28d5034a34a675fe369a7ec9cb7ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ClosedRange</type>
      <name>unionWith</name>
      <anchorfile>struct_closed_range.html</anchorfile>
      <anchor>a94f126db46caa20ca2e4909f6598a3bf</anchor>
      <arglist>(ClosedRange a) const</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>hi</name>
      <anchorfile>struct_closed_range.html</anchorfile>
      <anchor>ada8c0be97c7e970cfe3d7a38d411993e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>lo</name>
      <anchorfile>struct_closed_range.html</anchorfile>
      <anchor>a3c147ff5035de2d106a4ebbbd41602de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CompileContextStack</name>
    <filename>struct_compile_context_stack.html</filename>
    <member kind="function" static="yes">
      <type>static CompileContextType &amp;</type>
      <name>top</name>
      <anchorfile>struct_compile_context_stack.html</anchorfile>
      <anchor>a89655357b458775fdfc14d0f4d99f690</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CompilerOptions</name>
    <filename>class_compiler_options.html</filename>
    <base>ParserOptions</base>
  </compound>
  <compound kind="class">
    <name>ControlFlowVisitor</name>
    <filename>class_control_flow_visitor.html</filename>
    <base virtualness="virtual">Visitor</base>
    <class kind="class">ControlFlowVisitor::GuardGlobal</class>
    <class kind="class">ControlFlowVisitor::SetupJoinPoints</class>
    <member kind="function">
      <type>void</type>
      <name>flow_merge_global_to</name>
      <anchorfile>class_control_flow_visitor.html</anchorfile>
      <anchor>a4f86bdade5c6bf79ca9adc95753e7924</anchor>
      <arglist>(cstring key) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>filter_join_point</name>
      <anchorfile>class_control_flow_visitor.html</anchorfile>
      <anchor>a9da7328184fa76471e217cfbcc5c8a65</anchor>
      <arglist>(const IR::Node *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>void</type>
      <name>flow_merge</name>
      <anchorfile>class_control_flow_visitor.html</anchorfile>
      <anchor>a5d515c1f31e8edf330aee71aba43dc64</anchor>
      <arglist>(Visitor &amp;) override=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>join_flows</name>
      <anchorfile>class_control_flow_visitor.html</anchorfile>
      <anchor>a73cdd2949d6ab9b0321a16ed47484751</anchor>
      <arglist>(const IR::Node *n) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>post_join_flows</name>
      <anchorfile>class_control_flow_visitor.html</anchorfile>
      <anchor>ab778f695b048fd6ac5477f69670ece95</anchor>
      <arglist>(const IR::Node *, const IR::Node *) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ControlFlowVisitor::flow_join_info_t</name>
    <filename>class_control_flow_visitor.html</filename>
    <anchor>struct_control_flow_visitor_1_1flow__join__info__t</anchor>
  </compound>
  <compound kind="class">
    <name>ControlFlowVisitor::GuardGlobal</name>
    <filename>class_control_flow_visitor_1_1_guard_global.html</filename>
  </compound>
  <compound kind="class">
    <name>ControlFlowVisitor::SetupJoinPoints</name>
    <filename>class_control_flow_visitor_1_1_setup_join_points.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>cstring</name>
    <filename>classcstring.html</filename>
    <member kind="function">
      <type>cstring</type>
      <name>capitalize</name>
      <anchorfile>classcstring.html</anchorfile>
      <anchor>ab414747a16df240cf4e8967b4c30573c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>escapeJson</name>
      <anchorfile>classcstring.html</anchorfile>
      <anchor>a48cdca9b9f0d98c2abbce5d1d9f3ab26</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>indent</name>
      <anchorfile>classcstring.html</anchorfile>
      <anchor>af33dc8991f606f31f15cba816049e931</anchor>
      <arglist>(size_t amount) const</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>toLower</name>
      <anchorfile>classcstring.html</anchorfile>
      <anchor>a3b1ec35950925fcdbb5df4c761c7d880</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>toUpper</name>
      <anchorfile>classcstring.html</anchorfile>
      <anchor>a4df80e14a864a096992e47104064480e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>cache_size</name>
      <anchorfile>classcstring.html</anchorfile>
      <anchor>a5247cc3f2485b28d234500aa20573a3d</anchor>
      <arglist>(size_t &amp;count)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DBPrint::clrflag</name>
    <filename>struct_d_b_print_1_1clrflag.html</filename>
    <base>DBPrint::setflags_helper</base>
  </compound>
  <compound kind="struct">
    <name>DBPrint::setflag</name>
    <filename>struct_d_b_print_1_1setflag.html</filename>
    <base>DBPrint::setflags_helper</base>
  </compound>
  <compound kind="class">
    <name>DBPrint::setflags_helper</name>
    <filename>class_d_b_print_1_1setflags__helper.html</filename>
  </compound>
  <compound kind="struct">
    <name>DBPrint::setprec</name>
    <filename>struct_d_b_print_1_1setprec.html</filename>
    <base>DBPrint::setflags_helper</base>
  </compound>
  <compound kind="class">
    <name>DefaultP4CConfiguration</name>
    <filename>class_default_p4_c_configuration.html</filename>
    <base>P4CConfiguration</base>
    <member kind="function">
      <type>int</type>
      <name>maximumArraySize</name>
      <anchorfile>class_default_p4_c_configuration.html</anchorfile>
      <anchor>a9050ff12a68836d47a804d74ee84d4f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maximumWidthSupported</name>
      <anchorfile>class_default_p4_c_configuration.html</anchorfile>
      <anchor>ae387698126ff19e137a046e546cc7292</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const DefaultP4CConfiguration &amp;</type>
      <name>get</name>
      <anchorfile>class_default_p4_c_configuration.html</anchorfile>
      <anchor>a15875f725bd3ed8e85d3c657e423a1b9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>dp_packet</name>
    <filename>structdp__packet.html</filename>
  </compound>
  <compound kind="struct">
    <name>DPDK::actionAttributes</name>
    <filename>namespace_d_p_d_k.html</filename>
    <anchor>struct_d_p_d_k_1_1action_attributes</anchor>
  </compound>
  <compound kind="class">
    <name>DPDK::AddFieldsToPseudoHeader</name>
    <filename>class_d_p_d_k_1_1_add_fields_to_pseudo_header.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>DPDK::AlignHdrMetaField</name>
    <filename>class_d_p_d_k_1_1_align_hdr_meta_field.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>DPDK::BranchingInstructionGeneration</name>
    <filename>class_d_p_d_k_1_1_branching_instruction_generation.html</filename>
  </compound>
  <compound kind="class">
    <name>DPDK::BreakLogicalExpressionParenthesis</name>
    <filename>class_d_p_d_k_1_1_break_logical_expression_parenthesis.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="struct">
    <name>DPDK::ByteAlignment</name>
    <filename>struct_d_p_d_k_1_1_byte_alignment.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>DPDK::CheckExternInvocation</name>
    <filename>class_d_p_d_k_1_1_check_extern_invocation.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>DPDK::CheckPNAExternInvocation</name>
    <filename>class_d_p_d_k_1_1_check_p_n_a_extern_invocation.html</filename>
    <base>P4::CheckExternInvocationCommon</base>
  </compound>
  <compound kind="class">
    <name>DPDK::CollectActionUses</name>
    <filename>class_d_p_d_k_1_1_collect_action_uses.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>DPDK::CollectAddOnMissTable</name>
    <filename>class_d_p_d_k_1_1_collect_add_on_miss_table.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>DPDK::CollectDirectCounterMeter</name>
    <filename>class_d_p_d_k_1_1_collect_direct_counter_meter.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>DPDK::CollectErrors</name>
    <filename>class_d_p_d_k_1_1_collect_errors.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>DPDK::CollectExternDeclaration</name>
    <filename>class_d_p_d_k_1_1_collect_extern_declaration.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>DPDK::CollectInternetChecksumInstance</name>
    <filename>class_d_p_d_k_1_1_collect_internet_checksum_instance.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>DPDK::CollectIPSecInfo</name>
    <filename>class_d_p_d_k_1_1_collect_i_p_sec_info.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>DPDK::CollectLocalStructAndFlatten</name>
    <filename>class_d_p_d_k_1_1_collect_local_struct_and_flatten.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>DPDK::CollectLocalVariables</name>
    <filename>class_d_p_d_k_1_1_collect_local_variables.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>DPDK::CollectMetadataHeaderInfo</name>
    <filename>class_d_p_d_k_1_1_collect_metadata_header_info.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>DPDK::CollectProgramStructure</name>
    <filename>class_d_p_d_k_1_1_collect_program_structure.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>DPDK::CollectStructLocalVariables</name>
    <filename>class_d_p_d_k_1_1_collect_struct_local_variables.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>DPDK::CollectTableInfo</name>
    <filename>class_d_p_d_k_1_1_collect_table_info.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>DPDK::CollectUseDefInfo</name>
    <filename>class_d_p_d_k_1_1_collect_use_def_info.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>DPDK::CollectUsedMetadataField</name>
    <filename>class_d_p_d_k_1_1_collect_used_metadata_field.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>DPDK::ConvertActionSelectorAndProfile</name>
    <filename>class_d_p_d_k_1_1_convert_action_selector_and_profile.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>DPDK::ConvertBinaryOperationTo2Params</name>
    <filename>class_d_p_d_k_1_1_convert_binary_operation_to2_params.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>DPDK::ConvertInternetChecksum</name>
    <filename>class_d_p_d_k_1_1_convert_internet_checksum.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>DPDK::ConvertLogicalExpression</name>
    <filename>class_d_p_d_k_1_1_convert_logical_expression.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="struct">
    <name>DPDK::ConvertLookahead</name>
    <filename>struct_d_p_d_k_1_1_convert_lookahead.html</filename>
    <base>PassManager</base>
    <class kind="class">DPDK::ConvertLookahead::Collect</class>
    <class kind="class">DPDK::ConvertLookahead::Replace</class>
    <class kind="class">DPDK::ConvertLookahead::ReplacementMap</class>
  </compound>
  <compound kind="class">
    <name>DPDK::ConvertLookahead::Collect</name>
    <filename>class_d_p_d_k_1_1_convert_lookahead_1_1_collect.html</filename>
    <base>Inspector</base>
    <member kind="function">
      <type>void</type>
      <name>postorder</name>
      <anchorfile>class_d_p_d_k_1_1_convert_lookahead_1_1_collect.html</anchorfile>
      <anchor>ade4e9da076062e77649770ffc4310aff</anchor>
      <arglist>(const IR::AssignmentStatement *statement) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DPDK::ConvertLookahead::Replace</name>
    <filename>class_d_p_d_k_1_1_convert_lookahead_1_1_replace.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>DPDK::ConvertLookahead::ReplacementMap</name>
    <filename>class_d_p_d_k_1_1_convert_lookahead_1_1_replacement_map.html</filename>
  </compound>
  <compound kind="class">
    <name>DPDK::ConvertStatementToDpdk</name>
    <filename>class_d_p_d_k_1_1_convert_statement_to_dpdk.html</filename>
    <base>Inspector</base>
    <member kind="function">
      <type>bool</type>
      <name>preorder</name>
      <anchorfile>class_d_p_d_k_1_1_convert_statement_to_dpdk.html</anchorfile>
      <anchor>ae2b0f0473e0b02d2e8a8b98aeaa8e397</anchor>
      <arglist>(const IR::MethodCallStatement *a) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DPDK::ConvertToDpdkArch</name>
    <filename>class_d_p_d_k_1_1_convert_to_dpdk_arch.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>DPDK::ConvertToDpdkControl</name>
    <filename>class_d_p_d_k_1_1_convert_to_dpdk_control.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>DPDK::ConvertToDpdkParser</name>
    <filename>class_d_p_d_k_1_1_convert_to_dpdk_parser.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>DPDK::ConvertToDpdkProgram</name>
    <filename>class_d_p_d_k_1_1_convert_to_dpdk_program.html</filename>
    <base>Transform</base>
    <member kind="function">
      <type>const IR::DpdkAsmProgram *</type>
      <name>create</name>
      <anchorfile>class_d_p_d_k_1_1_convert_to_dpdk_program.html</anchorfile>
      <anchor>a7115a2091fa852b2b06e19a1e8cdd549</anchor>
      <arglist>(IR::P4Program *prog)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DPDK::ConvertToString</name>
    <filename>class_d_p_d_k_1_1_convert_to_string.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>DPDK::CopyMatchKeysToSingleStruct</name>
    <filename>class_d_p_d_k_1_1_copy_match_keys_to_single_struct.html</filename>
    <base>P4::KeySideEffect</base>
  </compound>
  <compound kind="class">
    <name>DPDK::CopyPropagationAndElimination</name>
    <filename>class_d_p_d_k_1_1_copy_propagation_and_elimination.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>DPDK::DeclarationInjector</name>
    <filename>class_d_p_d_k_1_1_declaration_injector.html</filename>
  </compound>
  <compound kind="class">
    <name>DPDK::DefActionValue</name>
    <filename>class_d_p_d_k_1_1_def_action_value.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>DPDK::DirectionToRegRead</name>
    <filename>class_d_p_d_k_1_1_direction_to_reg_read.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>DPDK::DismantleMuxExpressions</name>
    <filename>class_d_p_d_k_1_1_dismantle_mux_expressions.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="struct">
    <name>DPDK::DpdkAddPseudoHeader</name>
    <filename>struct_d_p_d_k_1_1_dpdk_add_pseudo_header.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>DPDK::DpdkAddPseudoHeaderDecl</name>
    <filename>class_d_p_d_k_1_1_dpdk_add_pseudo_header_decl.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>DPDK::DpdkArchFirst</name>
    <filename>class_d_p_d_k_1_1_dpdk_arch_first.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>DPDK::DpdkArchLast</name>
    <filename>class_d_p_d_k_1_1_dpdk_arch_last.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>DPDK::DpdkAsmOptimization</name>
    <filename>class_d_p_d_k_1_1_dpdk_asm_optimization.html</filename>
    <base>PassRepeated</base>
  </compound>
  <compound kind="class">
    <name>DPDK::DpdkBackend</name>
    <filename>class_d_p_d_k_1_1_dpdk_backend.html</filename>
  </compound>
  <compound kind="class">
    <name>DPDK::DpdkContextGenerator</name>
    <filename>class_d_p_d_k_1_1_dpdk_context_generator.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="struct">
    <name>DPDK::DpdkHandleIPSec</name>
    <filename>struct_d_p_d_k_1_1_dpdk_handle_i_p_sec.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>DPDK::DpdkMidEnd</name>
    <filename>class_d_p_d_k_1_1_dpdk_mid_end.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>DPDK::DpdkOptions</name>
    <filename>class_d_p_d_k_1_1_dpdk_options.html</filename>
    <base>CompilerOptions</base>
    <member kind="function">
      <type>std::vector&lt; const char * &gt; *</type>
      <name>process</name>
      <anchorfile>class_d_p_d_k_1_1_dpdk_options.html</anchorfile>
      <anchor>ab78769c0ce66ed9e1953a4d83a180eaa</anchor>
      <arglist>(int argc, char *const argv[]) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DPDK::ElimHeaderCopy</name>
    <filename>class_d_p_d_k_1_1_elim_header_copy.html</filename>
    <base>Transform</base>
    <member kind="function">
      <type>const IR::Node *</type>
      <name>preorder</name>
      <anchorfile>class_d_p_d_k_1_1_elim_header_copy.html</anchorfile>
      <anchor>af5db92aa8e3cdd6302a9455ad5315691</anchor>
      <arglist>(IR::MethodCallStatement *mcs) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DPDK::EliminateHeaderCopy</name>
    <filename>class_d_p_d_k_1_1_eliminate_header_copy.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>DPDK::EliminateUnusedAction</name>
    <filename>class_d_p_d_k_1_1_eliminate_unused_action.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>DPDK::ElimUnusedActions</name>
    <filename>class_d_p_d_k_1_1_elim_unused_actions.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>DPDK::EmitDpdkTableConfig</name>
    <filename>class_d_p_d_k_1_1_emit_dpdk_table_config.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>DPDK::EnumOn32Bits</name>
    <filename>class_d_p_d_k_1_1_enum_on32_bits.html</filename>
    <base>P4::ChooseEnumRepresentation</base>
  </compound>
  <compound kind="class">
    <name>DPDK::ErrorWidth</name>
    <filename>class_d_p_d_k_1_1_error_width.html</filename>
    <base>P4::ChooseErrorRepresentation</base>
  </compound>
  <compound kind="class">
    <name>DPDK::ExpressionUnroll</name>
    <filename>class_d_p_d_k_1_1_expression_unroll.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="struct">
    <name>DPDK::externAttributes</name>
    <filename>namespace_d_p_d_k.html</filename>
    <anchor>struct_d_p_d_k_1_1extern_attributes</anchor>
  </compound>
  <compound kind="struct">
    <name>DPDK::fieldInfo</name>
    <filename>struct_d_p_d_k_1_1field_info.html</filename>
  </compound>
  <compound kind="class">
    <name>DPDK::HaveNonHeaderChecksumArgs</name>
    <filename>class_d_p_d_k_1_1_have_non_header_checksum_args.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>DPDK::HaveNonHeaderLargeOperandAssignment</name>
    <filename>class_d_p_d_k_1_1_have_non_header_large_operand_assignment.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>DPDK::IfStatementUnroll</name>
    <filename>class_d_p_d_k_1_1_if_statement_unroll.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>DPDK::InjectFixedMetadataField</name>
    <filename>class_d_p_d_k_1_1_inject_fixed_metadata_field.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>DPDK::InjectInternetChecksumIntermediateValue</name>
    <filename>class_d_p_d_k_1_1_inject_internet_checksum_intermediate_value.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>DPDK::InjectJumboStruct</name>
    <filename>class_d_p_d_k_1_1_inject_jumbo_struct.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>DPDK::InsertReqDeclForIPSec</name>
    <filename>class_d_p_d_k_1_1_insert_req_decl_for_i_p_sec.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>DPDK::IsDirectionMetadataUsed</name>
    <filename>class_d_p_d_k_1_1_is_direction_metadata_used.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="struct">
    <name>DPDK::keyElementInfo</name>
    <filename>namespace_d_p_d_k.html</filename>
    <anchor>struct_d_p_d_k_1_1key_element_info</anchor>
  </compound>
  <compound kind="struct">
    <name>DPDK::keyInfo</name>
    <filename>namespace_d_p_d_k.html</filename>
    <anchor>struct_d_p_d_k_1_1key_info</anchor>
  </compound>
  <compound kind="class">
    <name>DPDK::LogicalExpressionUnroll</name>
    <filename>class_d_p_d_k_1_1_logical_expression_unroll.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>DPDK::MoveCollectedStructLocalVariableToMetadata</name>
    <filename>class_d_p_d_k_1_1_move_collected_struct_local_variable_to_metadata.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>DPDK::MoveNonHeaderFieldsToPseudoHeader</name>
    <filename>class_d_p_d_k_1_1_move_non_header_fields_to_pseudo_header.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>DPDK::PrependPassRecircId</name>
    <filename>class_d_p_d_k_1_1_prepend_pass_recirc_id.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>DPDK::PrependPDotToActionArgs</name>
    <filename>class_d_p_d_k_1_1_prepend_p_dot_to_action_args.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>DPDK::ProcessControls</name>
    <filename>class_d_p_d_k_1_1_process_controls.html</filename>
    <base>P4::RemoveComplexExpressionsPolicy</base>
    <member kind="function">
      <type>bool</type>
      <name>convert</name>
      <anchorfile>class_d_p_d_k_1_1_process_controls.html</anchorfile>
      <anchor>ad8cb076cb3b2b1fa38b13b271b57b9b2</anchor>
      <arglist>(const IR::P4Control *control) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DPDK::RemoveConsecutiveJmpAndLabel</name>
    <filename>class_d_p_d_k_1_1_remove_consecutive_jmp_and_label.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>DPDK::RemoveLabelAfterLabel</name>
    <filename>class_d_p_d_k_1_1_remove_label_after_label.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>DPDK::RemoveRedundantLabel</name>
    <filename>class_d_p_d_k_1_1_remove_redundant_label.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>DPDK::RemoveUnusedMetadataFields</name>
    <filename>class_d_p_d_k_1_1_remove_unused_metadata_fields.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>DPDK::ReplaceHdrMetaField</name>
    <filename>class_d_p_d_k_1_1_replace_hdr_meta_field.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="struct">
    <name>DPDK::SelectionTable</name>
    <filename>struct_d_p_d_k_1_1_selection_table.html</filename>
  </compound>
  <compound kind="class">
    <name>DPDK::ShortenTokenLength</name>
    <filename>class_d_p_d_k_1_1_shorten_token_length.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>DPDK::SplitActionProfileTable</name>
    <filename>class_d_p_d_k_1_1_split_action_profile_table.html</filename>
    <base>DPDK::SplitP4TableCommon</base>
  </compound>
  <compound kind="class">
    <name>DPDK::SplitActionSelectorTable</name>
    <filename>class_d_p_d_k_1_1_split_action_selector_table.html</filename>
    <base>DPDK::SplitP4TableCommon</base>
  </compound>
  <compound kind="class">
    <name>DPDK::SplitP4TableCommon</name>
    <filename>class_d_p_d_k_1_1_split_p4_table_common.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>DPDK::StatementUnroll</name>
    <filename>class_d_p_d_k_1_1_statement_unroll.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>DPDK::SwapSimpleExpressionToFrontOfLogicalExpression</name>
    <filename>class_d_p_d_k_1_1_swap_simple_expression_to_front_of_logical_expression.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>DPDK::SwitchHandler</name>
    <filename>class_d_p_d_k_1_1_switch_handler.html</filename>
  </compound>
  <compound kind="struct">
    <name>DPDK::TableAttributes</name>
    <filename>namespace_d_p_d_k.html</filename>
    <anchor>struct_d_p_d_k_1_1_table_attributes</anchor>
  </compound>
  <compound kind="class">
    <name>DPDK::TdiBfrtConf</name>
    <filename>class_d_p_d_k_1_1_tdi_bfrt_conf.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>generate</name>
      <anchorfile>class_d_p_d_k_1_1_tdi_bfrt_conf.html</anchorfile>
      <anchor>ac9a924ca823c1097b90e74d0757ab43b</anchor>
      <arglist>(const IR::P4Program *prog, DPDK::DpdkOptions &amp;options)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DPDK::ThreadJumps</name>
    <filename>class_d_p_d_k_1_1_thread_jumps.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="struct">
    <name>DPDK::TopLevelCtxt</name>
    <filename>struct_d_p_d_k_1_1_top_level_ctxt.html</filename>
  </compound>
  <compound kind="class">
    <name>DPDK::TypeWidthValidator</name>
    <filename>class_d_p_d_k_1_1_type_width_validator.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>DPDK::UpdateActionForSwitch</name>
    <filename>class_d_p_d_k_1_1_update_action_for_switch.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>DPDK::ValidateAddOnMissExterns</name>
    <filename>class_d_p_d_k_1_1_validate_add_on_miss_externs.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>DPDK::ValidateDirectCounterMeter</name>
    <filename>class_d_p_d_k_1_1_validate_direct_counter_meter.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>DPDK::ValidateOperandSize</name>
    <filename>class_d_p_d_k_1_1_validate_operand_size.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="struct">
    <name>DpdkProgramStructure</name>
    <filename>struct_dpdk_program_structure.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>isPNA</name>
      <anchorfile>struct_dpdk_program_structure.html</anchorfile>
      <anchor>ac2b9b6622399ef53a3accd452c048162</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPSA</name>
      <anchorfile>struct_dpdk_program_structure.html</anchorfile>
      <anchor>a6078261dd3fd350bbec89a18de1f59ab</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dump</name>
    <filename>class_dump.html</filename>
  </compound>
  <compound kind="class">
    <name>DynamicVisitor</name>
    <filename>class_dynamic_visitor.html</filename>
    <base virtualness="virtual">Visitor</base>
  </compound>
  <compound kind="class">
    <name>EBPF::ActionTranslationVisitor</name>
    <filename>class_e_b_p_f_1_1_action_translation_visitor.html</filename>
    <base virtualness="virtual">EBPF::CodeGenInspector</base>
  </compound>
  <compound kind="class">
    <name>EBPF::ActionTranslationVisitorPSA</name>
    <filename>class_e_b_p_f_1_1_action_translation_visitor_p_s_a.html</filename>
    <base>EBPF::ActionTranslationVisitor</base>
    <base>EBPF::ControlBodyTranslatorPSA</base>
  </compound>
  <compound kind="class">
    <name>EBPF::BccTarget</name>
    <filename>class_e_b_p_f_1_1_bcc_target.html</filename>
    <base>EBPF::Target</base>
  </compound>
  <compound kind="class">
    <name>EBPF::CodeBuilder</name>
    <filename>class_e_b_p_f_1_1_code_builder.html</filename>
    <base>Util::SourceCodeBuilder</base>
  </compound>
  <compound kind="class">
    <name>EBPF::CodeGenInspector</name>
    <filename>class_e_b_p_f_1_1_code_gen_inspector.html</filename>
    <base>Inspector</base>
    <member kind="function">
      <type></type>
      <name>CodeGenInspector</name>
      <anchorfile>class_e_b_p_f_1_1_code_gen_inspector.html</anchorfile>
      <anchor>a90dded50450a4969c1ca4fe97dff7021</anchor>
      <arglist>(P4::ReferenceMap *refMap, P4::TypeMap *typeMap)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EBPF::ControlBodyTranslator</name>
    <filename>class_e_b_p_f_1_1_control_body_translator.html</filename>
    <base virtualness="virtual">EBPF::CodeGenInspector</base>
  </compound>
  <compound kind="class">
    <name>EBPF::ControlBodyTranslatorPSA</name>
    <filename>class_e_b_p_f_1_1_control_body_translator_p_s_a.html</filename>
    <base>EBPF::ControlBodyTranslator</base>
  </compound>
  <compound kind="class">
    <name>EBPF::ConvertToEBPFControlPSA</name>
    <filename>class_e_b_p_f_1_1_convert_to_e_b_p_f_control_p_s_a.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>EBPF::ConvertToEBPFDeparserPSA</name>
    <filename>class_e_b_p_f_1_1_convert_to_e_b_p_f_deparser_p_s_a.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>EBPF::ConvertToEBPFParserPSA</name>
    <filename>class_e_b_p_f_1_1_convert_to_e_b_p_f_parser_p_s_a.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>EBPF::ConvertToEbpfPipeline</name>
    <filename>class_e_b_p_f_1_1_convert_to_ebpf_pipeline.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>EBPF::ConvertToEbpfPSA</name>
    <filename>class_e_b_p_f_1_1_convert_to_ebpf_p_s_a.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="struct">
    <name>EBPF::CounterArray_Model</name>
    <filename>struct_e_b_p_f_1_1_counter_array___model.html</filename>
    <base>Model::Extern_Model</base>
  </compound>
  <compound kind="class">
    <name>EBPF::CRC16ChecksumAlgorithm</name>
    <filename>class_e_b_p_f_1_1_c_r_c16_checksum_algorithm.html</filename>
    <base>EBPF::CRCChecksumAlgorithm</base>
  </compound>
  <compound kind="class">
    <name>EBPF::CRC32ChecksumAlgorithm</name>
    <filename>class_e_b_p_f_1_1_c_r_c32_checksum_algorithm.html</filename>
    <base>EBPF::CRCChecksumAlgorithm</base>
  </compound>
  <compound kind="class">
    <name>EBPF::CRCChecksumAlgorithm</name>
    <filename>class_e_b_p_f_1_1_c_r_c_checksum_algorithm.html</filename>
    <base>EBPF::EBPFHashAlgorithmPSA</base>
  </compound>
  <compound kind="class">
    <name>EBPF::DeparserBodyTranslator</name>
    <filename>class_e_b_p_f_1_1_deparser_body_translator.html</filename>
    <base>EBPF::ControlBodyTranslator</base>
  </compound>
  <compound kind="class">
    <name>EBPF::DeparserBodyTranslatorPSA</name>
    <filename>class_e_b_p_f_1_1_deparser_body_translator_p_s_a.html</filename>
    <base>EBPF::DeparserBodyTranslator</base>
  </compound>
  <compound kind="class">
    <name>EBPF::DeparserHdrEmitTranslator</name>
    <filename>class_e_b_p_f_1_1_deparser_hdr_emit_translator.html</filename>
    <base>EBPF::DeparserPrepareBufferTranslator</base>
  </compound>
  <compound kind="class">
    <name>EBPF::DeparserPrepareBufferTranslator</name>
    <filename>class_e_b_p_f_1_1_deparser_prepare_buffer_translator.html</filename>
    <base>EBPF::ControlBodyTranslator</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFActionProfilePSA</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_action_profile_p_s_a.html</filename>
    <base>EBPF::EBPFTableImplementationPSA</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFActionSelectorPSA</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_action_selector_p_s_a.html</filename>
    <base>EBPF::EBPFTableImplementationPSA</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFBoolType</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_bool_type.html</filename>
    <base>EBPF::EBPFType</base>
    <base>EBPF::IHasWidth</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFChecksumPSA</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_checksum_p_s_a.html</filename>
    <base>EBPF::EBPFObject</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EbpfCodeGenerator</name>
    <filename>class_e_b_p_f_1_1_ebpf_code_generator.html</filename>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFControl</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_control.html</filename>
    <base>EBPF::EBPFObject</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFControlPSA</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_control_p_s_a.html</filename>
    <base>EBPF::EBPFControl</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFCounterPSA</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_counter_p_s_a.html</filename>
    <base>EBPF::EBPFCounterTable</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFCounterTable</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_counter_table.html</filename>
    <base>EBPF::EBPFTableBase</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFDeparser</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_deparser.html</filename>
    <base>EBPF::EBPFControl</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFDeparserPSA</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_deparser_p_s_a.html</filename>
    <base>EBPF::EBPFDeparser</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFDigestPSA</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_digest_p_s_a.html</filename>
    <base>EBPF::EBPFObject</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFDigestPSAValueVisitor</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_digest_p_s_a_value_visitor.html</filename>
    <base>EBPF::CodeGenInspector</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFEgressPipeline</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_egress_pipeline.html</filename>
    <base>EBPF::EBPFPipeline</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFEnumType</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_enum_type.html</filename>
    <base>EBPF::EBPFType</base>
    <base>EBPF::IHasWidth</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFHashAlgorithmPSA</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_hash_algorithm_p_s_a.html</filename>
    <base>EBPF::EBPFObject</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFHashAlgorithmTypeFactoryPSA</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_hash_algorithm_type_factory_p_s_a.html</filename>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFHashPSA</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_hash_p_s_a.html</filename>
    <base>EBPF::EBPFChecksumPSA</base>
    <member kind="function">
      <type>void</type>
      <name>calculateHash</name>
      <anchorfile>class_e_b_p_f_1_1_e_b_p_f_hash_p_s_a.html</anchorfile>
      <anchor>ac2f058ce35e1d48cbd03203546c32827</anchor>
      <arglist>(CodeBuilder *builder, const IR::MethodCallExpression *expr, Visitor *visitor)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFIngressPipeline</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_ingress_pipeline.html</filename>
    <base>EBPF::EBPFPipeline</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFInitializerUtils</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_initializer_utils.html</filename>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFInternetChecksumPSA</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_internet_checksum_p_s_a.html</filename>
    <base>EBPF::EBPFChecksumPSA</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFMeterPSA</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_meter_p_s_a.html</filename>
    <base>EBPF::EBPFTableBase</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFModel</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_model.html</filename>
    <base>Model::Model</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFObject</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_object.html</filename>
    <base>ICastable</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFParser</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_parser.html</filename>
    <base>EBPF::EBPFObject</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFParserState</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_parser_state.html</filename>
    <base>EBPF::EBPFObject</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFPipeline</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_pipeline.html</filename>
    <base>EBPF::EBPFProgram</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFProgram</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_program.html</filename>
    <base>EBPF::EBPFObject</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFPsaParser</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_psa_parser.html</filename>
    <base>EBPF::EBPFParser</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFRandomPSA</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_random_p_s_a.html</filename>
    <base>EBPF::EBPFObject</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFRegisterPSA</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_register_p_s_a.html</filename>
    <base>EBPF::EBPFTableBase</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFScalarType</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_scalar_type.html</filename>
    <base>EBPF::EBPFType</base>
    <base>EBPF::IHasWidth</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFStackType</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_stack_type.html</filename>
    <base>EBPF::EBPFType</base>
    <base>EBPF::IHasWidth</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFStructType</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_struct_type.html</filename>
    <base>EBPF::EBPFType</base>
    <base>EBPF::IHasWidth</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFTable</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_table.html</filename>
    <base>EBPF::EBPFTableBase</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFTableBase</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_table_base.html</filename>
    <base>EBPF::EBPFObject</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFTableImplementationPSA</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_table_implementation_p_s_a.html</filename>
    <base>EBPF::EBPFTablePSA</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFTablePSA</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_table_p_s_a.html</filename>
    <base>EBPF::EBPFTable</base>
    <member kind="function">
      <type>void</type>
      <name>emitDirectValueTypes</name>
      <anchorfile>class_e_b_p_f_1_1_e_b_p_f_table_p_s_a.html</anchorfile>
      <anchor>a6491c576f80544463645bfec048be48b</anchor>
      <arglist>(CodeBuilder *builder) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFTablePSADirectCounterPropertyVisitor</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_table_p_s_a_direct_counter_property_visitor.html</filename>
    <base>EBPF::EBPFTablePsaPropertyVisitor</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFTablePSADirectMeterPropertyVisitor</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_table_p_s_a_direct_meter_property_visitor.html</filename>
    <base>EBPF::EBPFTablePsaPropertyVisitor</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFTablePSAImplementationPropertyVisitor</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_table_p_s_a_implementation_property_visitor.html</filename>
    <base>EBPF::EBPFTablePsaPropertyVisitor</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFTablePSAInitializerCodeGen</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_table_p_s_a_initializer_code_gen.html</filename>
    <base>EBPF::CodeGenInspector</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFTablePsaPropertyVisitor</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_table_psa_property_visitor.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFTablePSATernaryKeyMaskGenerator</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_table_p_s_a_ternary_key_mask_generator.html</filename>
    <base>EBPF::EBPFTablePSAInitializerCodeGen</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFTablePSATernaryTableMaskGenerator</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_table_p_s_a_ternary_table_mask_generator.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFType</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_type.html</filename>
    <base>EBPF::EBPFObject</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFTypeFactory</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_type_factory.html</filename>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFTypeName</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_type_name.html</filename>
    <base>EBPF::EBPFType</base>
    <base>EBPF::IHasWidth</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EBPFValueSet</name>
    <filename>class_e_b_p_f_1_1_e_b_p_f_value_set.html</filename>
    <base>EBPF::EBPFTableBase</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EgressDeparserPSA</name>
    <filename>class_e_b_p_f_1_1_egress_deparser_p_s_a.html</filename>
    <base>EBPF::EBPFDeparserPSA</base>
  </compound>
  <compound kind="class">
    <name>EBPF::EnumOn32Bits</name>
    <filename>class_e_b_p_f_1_1_enum_on32_bits.html</filename>
    <base>P4::ChooseEnumRepresentation</base>
  </compound>
  <compound kind="struct">
    <name>EBPF::Filter_Model</name>
    <filename>struct_e_b_p_f_1_1_filter___model.html</filename>
    <base>Model::Elem</base>
  </compound>
  <compound kind="class">
    <name>EBPF::IHasWidth</name>
    <filename>class_e_b_p_f_1_1_i_has_width.html</filename>
    <base>ICastable</base>
  </compound>
  <compound kind="class">
    <name>EBPF::IngressDeparserPSA</name>
    <filename>class_e_b_p_f_1_1_ingress_deparser_p_s_a.html</filename>
    <base>EBPF::EBPFDeparserPSA</base>
  </compound>
  <compound kind="class">
    <name>EBPF::InternetChecksumAlgorithm</name>
    <filename>class_e_b_p_f_1_1_internet_checksum_algorithm.html</filename>
    <base>EBPF::EBPFHashAlgorithmPSA</base>
  </compound>
  <compound kind="class">
    <name>EBPF::KernelSamplesTarget</name>
    <filename>class_e_b_p_f_1_1_kernel_samples_target.html</filename>
    <base>EBPF::Target</base>
    <member kind="function">
      <type>void</type>
      <name>emitTraceMessage</name>
      <anchorfile>class_e_b_p_f_1_1_kernel_samples_target.html</anchorfile>
      <anchor>aff6436be75b0a1b2072e27f75d8f121b</anchor>
      <arglist>(Util::SourceCodeBuilder *builder, const char *format, int argc=0,...) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EBPF::Lower</name>
    <filename>class_e_b_p_f_1_1_lower.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>EBPF::LowerExpressions</name>
    <filename>class_e_b_p_f_1_1_lower_expressions.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>EBPF::MidEnd</name>
    <filename>class_e_b_p_f_1_1_mid_end.html</filename>
  </compound>
  <compound kind="class">
    <name>EBPF::PSAArchTC</name>
    <filename>class_e_b_p_f_1_1_p_s_a_arch_t_c.html</filename>
    <base>EBPF::PSAEbpfGenerator</base>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>class_e_b_p_f_1_1_p_s_a_arch_t_c.html</anchorfile>
      <anchor>ab905b62b7eca71c380eb8696c4171e0b</anchor>
      <arglist>(CodeBuilder *builder) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EBPF::PSAArchXDP</name>
    <filename>class_e_b_p_f_1_1_p_s_a_arch_x_d_p.html</filename>
    <base>EBPF::PSAEbpfGenerator</base>
  </compound>
  <compound kind="class">
    <name>EBPF::PSAEbpfGenerator</name>
    <filename>class_e_b_p_f_1_1_p_s_a_ebpf_generator.html</filename>
    <base>EBPF::EbpfCodeGenerator</base>
  </compound>
  <compound kind="class">
    <name>EBPF::PSAErrorCodesGen</name>
    <filename>class_e_b_p_f_1_1_p_s_a_error_codes_gen.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>EBPF::PsaStateTranslationVisitor</name>
    <filename>class_e_b_p_f_1_1_psa_state_translation_visitor.html</filename>
    <base>EBPF::StateTranslationVisitor</base>
  </compound>
  <compound kind="class">
    <name>EBPF::PSASwitchBackend</name>
    <filename>class_e_b_p_f_1_1_p_s_a_switch_backend.html</filename>
  </compound>
  <compound kind="class">
    <name>EBPF::StateTranslationVisitor</name>
    <filename>class_e_b_p_f_1_1_state_translation_visitor.html</filename>
    <base>EBPF::CodeGenInspector</base>
  </compound>
  <compound kind="struct">
    <name>EBPF::TableImpl_Model</name>
    <filename>struct_e_b_p_f_1_1_table_impl___model.html</filename>
    <base>Model::Extern_Model</base>
  </compound>
  <compound kind="class">
    <name>EBPF::Target</name>
    <filename>class_e_b_p_f_1_1_target.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>emitTraceMessage</name>
      <anchorfile>class_e_b_p_f_1_1_target.html</anchorfile>
      <anchor>a32d6b77e2bd665a92a0f072d70e29956</anchor>
      <arglist>(Util::SourceCodeBuilder *builder, const char *format, int argc,...) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EBPF::TCEgressDeparserPSA</name>
    <filename>class_e_b_p_f_1_1_t_c_egress_deparser_p_s_a.html</filename>
    <base>EBPF::EgressDeparserPSA</base>
  </compound>
  <compound kind="class">
    <name>EBPF::TCEgressPipeline</name>
    <filename>class_e_b_p_f_1_1_t_c_egress_pipeline.html</filename>
    <base>EBPF::EBPFEgressPipeline</base>
  </compound>
  <compound kind="class">
    <name>EBPF::TCIngressDeparserForTrafficManagerPSA</name>
    <filename>class_e_b_p_f_1_1_t_c_ingress_deparser_for_traffic_manager_p_s_a.html</filename>
    <base>EBPF::TCIngressDeparserPSA</base>
  </compound>
  <compound kind="class">
    <name>EBPF::TCIngressDeparserPSA</name>
    <filename>class_e_b_p_f_1_1_t_c_ingress_deparser_p_s_a.html</filename>
    <base>EBPF::IngressDeparserPSA</base>
  </compound>
  <compound kind="class">
    <name>EBPF::TCIngressPipeline</name>
    <filename>class_e_b_p_f_1_1_t_c_ingress_pipeline.html</filename>
    <base>EBPF::EBPFIngressPipeline</base>
  </compound>
  <compound kind="class">
    <name>EBPF::TCTrafficManagerForXDP</name>
    <filename>class_e_b_p_f_1_1_t_c_traffic_manager_for_x_d_p.html</filename>
    <base>EBPF::TCIngressPipeline</base>
  </compound>
  <compound kind="class">
    <name>EBPF::TestTarget</name>
    <filename>class_e_b_p_f_1_1_test_target.html</filename>
    <base>EBPF::KernelSamplesTarget</base>
  </compound>
  <compound kind="struct">
    <name>EBPF::Xdp_Model</name>
    <filename>struct_e_b_p_f_1_1_xdp___model.html</filename>
    <base>Model::Elem</base>
  </compound>
  <compound kind="class">
    <name>EBPF::XDPEgressDeparserPSA</name>
    <filename>class_e_b_p_f_1_1_x_d_p_egress_deparser_p_s_a.html</filename>
    <base>EBPF::EgressDeparserPSA</base>
  </compound>
  <compound kind="class">
    <name>EBPF::XDPEgressPipeline</name>
    <filename>class_e_b_p_f_1_1_x_d_p_egress_pipeline.html</filename>
    <base>EBPF::EBPFEgressPipeline</base>
  </compound>
  <compound kind="class">
    <name>EBPF::XDPHelpProgram</name>
    <filename>class_e_b_p_f_1_1_x_d_p_help_program.html</filename>
    <base>EBPF::EBPFProgram</base>
  </compound>
  <compound kind="class">
    <name>EBPF::XDPIngressDeparserPSA</name>
    <filename>class_e_b_p_f_1_1_x_d_p_ingress_deparser_p_s_a.html</filename>
    <base>EBPF::IngressDeparserPSA</base>
  </compound>
  <compound kind="class">
    <name>EBPF::XDPIngressPipeline</name>
    <filename>class_e_b_p_f_1_1_x_d_p_ingress_pipeline.html</filename>
    <base>EBPF::EBPFIngressPipeline</base>
  </compound>
  <compound kind="class">
    <name>EBPF::XdpTarget</name>
    <filename>class_e_b_p_f_1_1_xdp_target.html</filename>
    <base>EBPF::KernelSamplesTarget</base>
  </compound>
  <compound kind="class">
    <name>EbpfOptions</name>
    <filename>class_ebpf_options.html</filename>
    <base>CompilerOptions</base>
  </compound>
  <compound kind="class">
    <name>ErrorCatalog</name>
    <filename>class_error_catalog.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>add</name>
      <anchorfile>class_error_catalog.html</anchorfile>
      <anchor>a888a5bad7937a24b050a0b6c0f0734e7</anchor>
      <arglist>(const char *name, bool forceReplace=false)</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>getName</name>
      <anchorfile>class_error_catalog.html</anchorfile>
      <anchor>a26eaf277c1f1785f806f8879c85086cb</anchor>
      <arglist>(int errorCode)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isError</name>
      <anchorfile>class_error_catalog.html</anchorfile>
      <anchor>a5dd99fb028d05ff7f2cbf2d50303fbab</anchor>
      <arglist>(cstring name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ErrorCatalog &amp;</type>
      <name>getCatalog</name>
      <anchorfile>class_error_catalog.html</anchorfile>
      <anchor>ab7e1c05caa1eeb98c5965e31f33a235f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ErrorMessage</name>
    <filename>struct_error_message.html</filename>
    <member kind="function">
      <type></type>
      <name>ErrorMessage</name>
      <anchorfile>struct_error_message.html</anchorfile>
      <anchor>a851ceaeac351c2c6d8d2dae5ef8e50c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Util::SourceInfo &gt;</type>
      <name>locations</name>
      <anchorfile>struct_error_message.html</anchorfile>
      <anchor>a330ed3a60ef2067d5e4888dd713fbb0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>message</name>
      <anchorfile>struct_error_message.html</anchorfile>
      <anchor>a891809daa9afcfba5edf5900588710c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>suffix</name>
      <anchorfile>struct_error_message.html</anchorfile>
      <anchor>aea60e8c0b533f36cd8a6c258289a5682</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ErrorReporter</name>
    <filename>class_error_reporter.html</filename>
    <member kind="function">
      <type>void</type>
      <name>diagnose</name>
      <anchorfile>class_error_reporter.html</anchorfile>
      <anchor>aa4e90be5b9b3eed2d439fb4b39d36a12</anchor>
      <arglist>(DiagnosticAction action, const char *diagnosticName, const char *format, const char *suffix, T... args)</arglist>
    </member>
    <member kind="function">
      <type>DiagnosticAction</type>
      <name>getDefaultInfoDiagnosticAction</name>
      <anchorfile>class_error_reporter.html</anchorfile>
      <anchor>a6dd474b8225361158990290f2431984c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DiagnosticAction</type>
      <name>getDefaultWarningDiagnosticAction</name>
      <anchorfile>class_error_reporter.html</anchorfile>
      <anchor>adedc43a468b6708de66c6a146069aced</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DiagnosticAction</type>
      <name>getDiagnosticAction</name>
      <anchorfile>class_error_reporter.html</anchorfile>
      <anchor>a5cfcdaecb3d9425a0c40b30c90b05965</anchor>
      <arglist>(cstring diagnostic, DiagnosticAction defaultAction)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>getDiagnosticCount</name>
      <anchorfile>class_error_reporter.html</anchorfile>
      <anchor>aece6776838b05d03dba2344073a8aef2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parser_error</name>
      <anchorfile>class_error_reporter.html</anchorfile>
      <anchor>a10b3f4a1fbc8525edef9e5123daf5b22</anchor>
      <arglist>(const Util::InputSources *sources, const char *fmt, va_list args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parser_error</name>
      <anchorfile>class_error_reporter.html</anchorfile>
      <anchor>a8f2185bcb3dc2f752e0663dd7dfc1170</anchor>
      <arglist>(const Util::SourceInfo &amp;location, const T &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultInfoDiagnosticAction</name>
      <anchorfile>class_error_reporter.html</anchorfile>
      <anchor>a1f5dd27a578437f398e403ef631d73d0</anchor>
      <arglist>(DiagnosticAction action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultWarningDiagnosticAction</name>
      <anchorfile>class_error_reporter.html</anchorfile>
      <anchor>a14bdd5955fc3262a4b002055ddcf3d3a</anchor>
      <arglist>(DiagnosticAction action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDiagnosticAction</name>
      <anchorfile>class_error_reporter.html</anchorfile>
      <anchor>a996584a320d456ecf9dbf245da36fc90</anchor>
      <arglist>(cstring diagnostic, DiagnosticAction action)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>setMaxErrorCount</name>
      <anchorfile>class_error_reporter.html</anchorfile>
      <anchor>ac19ef6b4b91c9bde0c1fccbd586063f5</anchor>
      <arglist>(unsigned newMaxCount)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>emit_message</name>
      <anchorfile>class_error_reporter.html</anchorfile>
      <anchor>a7a0bbfdbede71a883547c9f0682ed422</anchor>
      <arglist>(const ErrorMessage &amp;msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>error_reported</name>
      <anchorfile>class_error_reporter.html</anchorfile>
      <anchor>a77cb3661de3039fd8c9fdb70a1d10d47</anchor>
      <arglist>(int err, const Util::SourceInfo source)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>get_error_name</name>
      <anchorfile>class_error_reporter.html</anchorfile>
      <anchor>a4d8cf2069a02aafd04ac5c7b3ff4735f</anchor>
      <arglist>(int errorCode)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; std::pair&lt; int, const Util::SourceInfo &gt; &gt;</type>
      <name>errorTracker</name>
      <anchorfile>class_error_reporter.html</anchorfile>
      <anchor>a2660b04578583c4cffb7858553290729</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::ostream *</type>
      <name>outputstream</name>
      <anchorfile>class_error_reporter.html</anchorfile>
      <anchor>a02c5f4d9ebe49f2c88e88b6c19d34604</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ErrorType</name>
    <filename>class_error_type.html</filename>
  </compound>
  <compound kind="class">
    <name>exprUses</name>
    <filename>classexpr_uses.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>graphs::ControlGraphs</name>
    <filename>classgraphs_1_1_control_graphs.html</filename>
    <base>graphs::Graphs</base>
    <class kind="class">graphs::ControlGraphs::ControlStack</class>
  </compound>
  <compound kind="class">
    <name>graphs::ControlGraphs::ControlStack</name>
    <filename>classgraphs_1_1_control_graphs_1_1_control_stack.html</filename>
  </compound>
  <compound kind="class">
    <name>graphs::EdgeIf</name>
    <filename>classgraphs_1_1_edge_if.html</filename>
    <base>graphs::EdgeTypeIface</base>
  </compound>
  <compound kind="class">
    <name>graphs::EdgeSwitch</name>
    <filename>classgraphs_1_1_edge_switch.html</filename>
    <base>graphs::EdgeTypeIface</base>
  </compound>
  <compound kind="class">
    <name>graphs::EdgeTypeIface</name>
    <filename>classgraphs_1_1_edge_type_iface.html</filename>
  </compound>
  <compound kind="class">
    <name>graphs::EdgeUnconditional</name>
    <filename>classgraphs_1_1_edge_unconditional.html</filename>
    <base>graphs::EdgeTypeIface</base>
  </compound>
  <compound kind="class">
    <name>graphs::Graph_visitor</name>
    <filename>classgraphs_1_1_graph__visitor.html</filename>
    <base>graphs::Graphs</base>
    <member kind="function">
      <type></type>
      <name>Graph_visitor</name>
      <anchorfile>classgraphs_1_1_graph__visitor.html</anchorfile>
      <anchor>a5ba26d19ca4576037995cd29e270ffd4</anchor>
      <arglist>(const cstring &amp;graphsDir, const bool graphs, const bool fullGraph, const bool jsonOut, const cstring &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getPrevType</name>
      <anchorfile>classgraphs_1_1_graph__visitor.html</anchorfile>
      <anchor>a98cc5c638e2d3e7cd1b064112b9a5d9a</anchor>
      <arglist>(const PrevType &amp;prev_type)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getType</name>
      <anchorfile>classgraphs_1_1_graph__visitor.html</anchorfile>
      <anchor>a8d234151d665125a29b51c640834447a</anchor>
      <arglist>(const VertexType &amp;v_type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>process</name>
      <anchorfile>classgraphs_1_1_graph__visitor.html</anchorfile>
      <anchor>ad828b1e80a00601b32de7a1829c0d67b</anchor>
      <arglist>(std::vector&lt; Graph * &gt; &amp;controlGraphsArray, std::vector&lt; Graph * &gt; &amp;parserGraphsArray)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeGraphToFile</name>
      <anchorfile>classgraphs_1_1_graph__visitor.html</anchorfile>
      <anchor>acf7050f5726e1fe00e8a4635c83b223c</anchor>
      <arglist>(const Graph &amp;g, const cstring &amp;name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>graphs::Graphs</name>
    <filename>classgraphs_1_1_graphs.html</filename>
    <base>Inspector</base>
    <class kind="class">graphs::Graphs::GraphAttributeSetter</class>
    <member kind="function">
      <type>void</type>
      <name>add_edge</name>
      <anchorfile>classgraphs_1_1_graphs.html</anchorfile>
      <anchor>a7f3d87b7d7e156e99d8118d36331a1a7</anchor>
      <arglist>(const vertex_t &amp;from, const vertex_t &amp;to, const cstring &amp;name, unsigned cluster_id)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>graphs::Graphs::GraphAttributeSetter</name>
    <filename>classgraphs_1_1_graphs_1_1_graph_attribute_setter.html</filename>
  </compound>
  <compound kind="struct">
    <name>graphs::Graphs::Vertex</name>
    <filename>classgraphs_1_1_graphs.html</filename>
    <anchor>structgraphs_1_1_graphs_1_1_vertex</anchor>
  </compound>
  <compound kind="class">
    <name>graphs::MidEnd</name>
    <filename>classgraphs_1_1_mid_end.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>graphs::Options</name>
    <filename>classgraphs_1_1_options.html</filename>
    <base>CompilerOptions</base>
  </compound>
  <compound kind="class">
    <name>graphs::ParserGraphs</name>
    <filename>classgraphs_1_1_parser_graphs.html</filename>
    <base>graphs::Graphs</base>
    <class kind="struct">graphs::ParserGraphs::TransitionEdge</class>
  </compound>
  <compound kind="struct">
    <name>graphs::ParserGraphs::TransitionEdge</name>
    <filename>structgraphs_1_1_parser_graphs_1_1_transition_edge.html</filename>
  </compound>
  <compound kind="struct">
    <name>HalfOpenRange</name>
    <filename>struct_half_open_range.html</filename>
    <templarg>RangeUnit Unit</templarg>
    <templarg>Endian Order</templarg>
    <member kind="function">
      <type>HalfOpenRange</type>
      <name>canonicalize</name>
      <anchorfile>struct_half_open_range.html</anchorfile>
      <anchor>acff93e7e7f96bf3abeb1291a34a9b3ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>struct_half_open_range.html</anchorfile>
      <anchor>a7c37adea9ef8de1f9f2c52ea73c754e4</anchor>
      <arglist>(HalfOpenRange other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>struct_half_open_range.html</anchorfile>
      <anchor>a328cf13ba10067ee5e27e169368f9233</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>struct_half_open_range.html</anchorfile>
      <anchor>ae4ecdee52e4f6015d03db9e12b865dac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>hiByte</name>
      <anchorfile>struct_half_open_range.html</anchorfile>
      <anchor>aa6acc2b730a759ff33784bd46a8e53c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HalfOpenRange</type>
      <name>intersectWith</name>
      <anchorfile>struct_half_open_range.html</anchorfile>
      <anchor>aa823fd3673e10f45cbb4606763411f77</anchor>
      <arglist>(HalfOpenRange a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isHiAligned</name>
      <anchorfile>struct_half_open_range.html</anchorfile>
      <anchor>a9435c1d2c6490f3f3e8a441d355c2ac1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLoAligned</name>
      <anchorfile>struct_half_open_range.html</anchorfile>
      <anchor>a5402ffffab4f6549ca01ae72326f13f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>loByte</name>
      <anchorfile>struct_half_open_range.html</anchorfile>
      <anchor>af30531d17fda05e0f73f46b91ccee216</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nextByte</name>
      <anchorfile>struct_half_open_range.html</anchorfile>
      <anchor>aaa53726a09442e73591b72790505e40d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>struct_half_open_range.html</anchorfile>
      <anchor>a44fcc8cd975fe7e886af4fb8460ce05c</anchor>
      <arglist>(const HalfOpenRange &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlaps</name>
      <anchorfile>struct_half_open_range.html</anchorfile>
      <anchor>ac9b3a39d1c3dce06af76391fc5181ec0</anchor>
      <arglist>(HalfOpenRange a) const</arglist>
    </member>
    <member kind="function">
      <type>HalfOpenRange&lt; RangeUnit::Bit, Order &gt;</type>
      <name>resizedToBits</name>
      <anchorfile>struct_half_open_range.html</anchorfile>
      <anchor>aa14754aee362e88e4966be2d4a8b4b5e</anchor>
      <arglist>(int size) const</arglist>
    </member>
    <member kind="function">
      <type>HalfOpenRange</type>
      <name>resizedToBytes</name>
      <anchorfile>struct_half_open_range.html</anchorfile>
      <anchor>a5da5cba2495aa277e2c4428d9fe6db6a</anchor>
      <arglist>(int size) const</arglist>
    </member>
    <member kind="function">
      <type>HalfOpenRange&lt; RangeUnit::Bit, Order &gt;</type>
      <name>shiftedByBits</name>
      <anchorfile>struct_half_open_range.html</anchorfile>
      <anchor>a3f34cab503959ebf2f7cded63eb4b7bb</anchor>
      <arglist>(int offset) const</arglist>
    </member>
    <member kind="function">
      <type>HalfOpenRange&lt; Unit, Order &gt;</type>
      <name>shiftedByBytes</name>
      <anchorfile>struct_half_open_range.html</anchorfile>
      <anchor>a0ecc7315fa52e24ed06acd5eec07be17</anchor>
      <arglist>(int offset) const</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>size</name>
      <anchorfile>struct_half_open_range.html</anchorfile>
      <anchor>a0b7c732bd05b0d46fc44716be9205bd5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toJSON</name>
      <anchorfile>struct_half_open_range.html</anchorfile>
      <anchor>ae8efb394d9bd5930957b8172df71ef5e</anchor>
      <arglist>(JSONGenerator &amp;json) const</arglist>
    </member>
    <member kind="function">
      <type>HalfOpenRange&lt; Unit, DestOrder &gt;</type>
      <name>toOrder</name>
      <anchorfile>struct_half_open_range.html</anchorfile>
      <anchor>a45fdc30da34a90c723a2d627b1a9725c</anchor>
      <arglist>(int spaceSize) const</arglist>
    </member>
    <member kind="function">
      <type>HalfOpenRange&lt; DestUnit, Order &gt;</type>
      <name>toUnit</name>
      <anchorfile>struct_half_open_range.html</anchorfile>
      <anchor>a871e14edbd0ecea28b688a8d35fa9de3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HalfOpenRange</type>
      <name>unionWith</name>
      <anchorfile>struct_half_open_range.html</anchorfile>
      <anchor>ae0c35948cd096b4d823326e137024495</anchor>
      <arglist>(HalfOpenRange a) const</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>hi</name>
      <anchorfile>struct_half_open_range.html</anchorfile>
      <anchor>a9200300d57790da2da1fefe0cb7a0628</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>lo</name>
      <anchorfile>struct_half_open_range.html</anchorfile>
      <anchor>a655f6c015ca1a87704b5c1db3b6e3ae3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hash_vector_base</name>
    <filename>classhash__vector__base.html</filename>
    <class kind="struct">hash_vector_base::internal</class>
    <class kind="struct">hash_vector_base::lookup_cache</class>
  </compound>
  <compound kind="struct">
    <name>hash_vector_base::internal</name>
    <filename>structhash__vector__base_1_1internal.html</filename>
  </compound>
  <compound kind="struct">
    <name>hash_vector_base::lookup_cache</name>
    <filename>structhash__vector__base_1_1lookup__cache.html</filename>
  </compound>
  <compound kind="class">
    <name>hasSideEffects</name>
    <filename>classhas_side_effects.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="struct">
    <name>hdrFieldInfo</name>
    <filename>structhdr_field_info.html</filename>
  </compound>
  <compound kind="class">
    <name>HeaderTypeMaxLengthCalculator</name>
    <filename>class_header_type_max_length_calculator.html</filename>
    <base>Modifier</base>
  </compound>
  <compound kind="class">
    <name>hex</name>
    <filename>classhex.html</filename>
  </compound>
  <compound kind="class">
    <name>hexvec</name>
    <filename>classhexvec.html</filename>
  </compound>
  <compound kind="class">
    <name>hvec_map</name>
    <filename>classhvec__map.html</filename>
    <templarg>class KEY</templarg>
    <templarg>class VAL</templarg>
    <templarg>class HASH</templarg>
    <templarg>class PRED</templarg>
    <templarg>class ALLOC</templarg>
    <base protection="private">hash_vector_base</base>
  </compound>
  <compound kind="class">
    <name>ICastable</name>
    <filename>class_i_castable.html</filename>
    <base virtualness="virtual">RTTI::Base</base>
    <member kind="function">
      <type>T &amp;</type>
      <name>as</name>
      <anchorfile>class_i_castable.html</anchorfile>
      <anchor>a88c3b2d9d52f83909582425b471aa23b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>as</name>
      <anchorfile>class_i_castable.html</anchorfile>
      <anchor>aa37d586a3dbb4df73346dc5d3803ff20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>checkedTo</name>
      <anchorfile>class_i_castable.html</anchorfile>
      <anchor>af6defaa45e11c0a3d9164814695c69a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>checkedTo</name>
      <anchorfile>class_i_castable.html</anchorfile>
      <anchor>afdbd28b81119a33a898fa8511bf2ef6b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ICompileContext</name>
    <filename>class_i_compile_context.html</filename>
  </compound>
  <compound kind="class">
    <name>IHasDbPrint</name>
    <filename>class_i_has_db_print.html</filename>
  </compound>
  <compound kind="class">
    <name>indent_t</name>
    <filename>classindent__t.html</filename>
  </compound>
  <compound kind="class">
    <name>IndentCtl::TempIndent</name>
    <filename>class_indent_ctl_1_1_temp_indent.html</filename>
  </compound>
  <compound kind="class">
    <name>InlineControlFlow</name>
    <filename>class_inline_control_flow.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>InspectDpdkProgram</name>
    <filename>class_inspect_dpdk_program.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>Inspector</name>
    <filename>class_inspector.html</filename>
    <base virtualness="virtual">Visitor</base>
  </compound>
  <compound kind="struct">
    <name>IR::has_static_type_name</name>
    <filename>struct_i_r_1_1has__static__type__name.html</filename>
    <templarg>class</templarg>
    <templarg>class</templarg>
  </compound>
  <compound kind="struct">
    <name>IR::has_static_type_name&lt; T, std::void_t&lt; decltype(T::static_type_name())&gt; &gt;</name>
    <filename>struct_i_r_1_1has__static__type__name_3_01_t_00_01std_1_1void__t_3_01decltype_07_t_1_1static__type__name_07_08_08_4_01_4.html</filename>
    <templarg>class T</templarg>
  </compound>
  <compound kind="struct">
    <name>IR::ID</name>
    <filename>struct_i_r_1_1_i_d.html</filename>
    <base>Util::IHasSourceInfo</base>
  </compound>
  <compound kind="class">
    <name>IR::IDeclaration</name>
    <filename>class_i_r_1_1_i_declaration.html</filename>
    <base virtualness="virtual">IR::INode</base>
    <member kind="function" virtualness="pure">
      <type>virtual ID</type>
      <name>getName</name>
      <anchorfile>class_i_r_1_1_i_declaration.html</anchorfile>
      <anchor>aff5913a13e547420641da5c2e1d40e86</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IR::IndexedVector</name>
    <filename>class_i_r_1_1_indexed_vector.html</filename>
    <templarg>class T</templarg>
    <base>IR::Vector&lt; T &gt;</base>
  </compound>
  <compound kind="class">
    <name>IR::INode</name>
    <filename>class_i_r_1_1_i_node.html</filename>
    <base>Util::IHasSourceInfo</base>
    <base>IHasDbPrint</base>
    <base>ICastable</base>
  </compound>
  <compound kind="class">
    <name>IR::NameMap</name>
    <filename>class_i_r_1_1_name_map.html</filename>
    <templarg>class T</templarg>
    <templarg>template&lt; class K, class V, class COMP, class ALLOC &gt; class MAP</templarg>
    <templarg>class COMP</templarg>
    <templarg>class ALLOC</templarg>
    <base>IR::Node</base>
  </compound>
  <compound kind="class">
    <name>IR::Node</name>
    <filename>class_i_r_1_1_node.html</filename>
    <base virtualness="virtual">IR::INode</base>
  </compound>
  <compound kind="class">
    <name>IR::NodeMap</name>
    <filename>class_i_r_1_1_node_map.html</filename>
    <templarg>class KEY</templarg>
    <templarg>class VALUE</templarg>
    <templarg>template&lt; class K, class V, class COMP, class ALLOC &gt; class MAP</templarg>
    <templarg>class COMP</templarg>
    <templarg>class ALLOC</templarg>
    <base>IR::Node</base>
  </compound>
  <compound kind="class">
    <name>IR::Vector</name>
    <filename>class_i_r_1_1_vector.html</filename>
    <templarg>class T</templarg>
    <base>IR::VectorBase</base>
    <member kind="function">
      <type>void</type>
      <name>pushBackOrAppend</name>
      <anchorfile>class_i_r_1_1_vector.html</anchorfile>
      <anchor>a6bc5b5df05e53906913f1959a9fb1484</anchor>
      <arglist>(const IR::Node *item)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IR::VectorBase</name>
    <filename>class_i_r_1_1_vector_base.html</filename>
    <base>IR::Node</base>
  </compound>
  <compound kind="class">
    <name>IterKeys</name>
    <filename>class_iter_keys.html</filename>
    <templarg>class PairIter</templarg>
  </compound>
  <compound kind="class">
    <name>IterValues</name>
    <filename>class_iter_values.html</filename>
    <templarg>class PairIter</templarg>
  </compound>
  <compound kind="class">
    <name>JsonBoolean</name>
    <filename>class_json_boolean.html</filename>
    <base>JsonData</base>
  </compound>
  <compound kind="class">
    <name>JsonData</name>
    <filename>class_json_data.html</filename>
    <base>ICastable</base>
  </compound>
  <compound kind="class">
    <name>JSONGenerator</name>
    <filename>class_j_s_o_n_generator.html</filename>
  </compound>
  <compound kind="class">
    <name>JSONLoader</name>
    <filename>class_j_s_o_n_loader.html</filename>
  </compound>
  <compound kind="class">
    <name>JsonNull</name>
    <filename>class_json_null.html</filename>
    <base>JsonData</base>
  </compound>
  <compound kind="class">
    <name>JsonNumber</name>
    <filename>class_json_number.html</filename>
    <base>JsonData</base>
  </compound>
  <compound kind="class">
    <name>JsonObject</name>
    <filename>class_json_object.html</filename>
    <base>JsonData</base>
    <base>ordered_map&lt; std::string, JsonData * &gt;</base>
  </compound>
  <compound kind="class">
    <name>JsonString</name>
    <filename>class_json_string.html</filename>
    <base>JsonData</base>
  </compound>
  <compound kind="class">
    <name>JsonVector</name>
    <filename>class_json_vector.html</filename>
    <base>JsonData</base>
  </compound>
  <compound kind="struct">
    <name>Log::Detail::LevelAndOutput</name>
    <filename>struct_log_1_1_detail_1_1_level_and_output.html</filename>
  </compound>
  <compound kind="class">
    <name>Log::Detail::OutputLogPrefix</name>
    <filename>class_log_1_1_detail_1_1_output_log_prefix.html</filename>
  </compound>
  <compound kind="class">
    <name>LTBitMatrix</name>
    <filename>class_l_t_bit_matrix.html</filename>
    <base protection="private">bitvec</base>
  </compound>
  <compound kind="class">
    <name>MapForKey</name>
    <filename>class_map_for_key.html</filename>
    <templarg>class M</templarg>
  </compound>
  <compound kind="struct">
    <name>match_t</name>
    <filename>structmatch__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>Model::Elem</name>
    <filename>struct_model_1_1_elem.html</filename>
  </compound>
  <compound kind="struct">
    <name>Model::Enum_Model</name>
    <filename>struct_model_1_1_enum___model.html</filename>
    <base>Model::Type_Model</base>
  </compound>
  <compound kind="struct">
    <name>Model::Extern_Model</name>
    <filename>struct_model_1_1_extern___model.html</filename>
    <base>Model::Type_Model</base>
  </compound>
  <compound kind="class">
    <name>Model::Model</name>
    <filename>class_model_1_1_model.html</filename>
  </compound>
  <compound kind="struct">
    <name>Model::Param_Model</name>
    <filename>struct_model_1_1_param___model.html</filename>
    <base>Model::Elem</base>
  </compound>
  <compound kind="struct">
    <name>Model::Type_Model</name>
    <filename>struct_model_1_1_type___model.html</filename>
    <base>Model::Elem</base>
  </compound>
  <compound kind="class">
    <name>Modifier</name>
    <filename>class_modifier.html</filename>
    <base virtualness="virtual">Visitor</base>
  </compound>
  <compound kind="class">
    <name>n4</name>
    <filename>classn4.html</filename>
  </compound>
  <compound kind="class">
    <name>NameGateways</name>
    <filename>class_name_gateways.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="struct">
    <name>NetHash::Identity</name>
    <filename>struct_net_hash_1_1_identity.html</filename>
  </compound>
  <compound kind="struct">
    <name>NetHash::Reflect</name>
    <filename>struct_net_hash_1_1_reflect.html</filename>
  </compound>
  <compound kind="class">
    <name>OnBacktrack</name>
    <filename>class_on_backtrack.html</filename>
    <templarg>class T</templarg>
    <base virtualness="virtual">Visitor</base>
    <base virtualness="virtual">Backtrack</base>
  </compound>
  <compound kind="class">
    <name>onullstream</name>
    <filename>classonullstream.html</filename>
    <templarg>class cT</templarg>
    <templarg>class traits</templarg>
  </compound>
  <compound kind="class">
    <name>ordered_map</name>
    <filename>classordered__map.html</filename>
    <templarg>class K</templarg>
    <templarg>class V</templarg>
    <templarg>class COMP</templarg>
    <templarg>class ALLOC</templarg>
    <class kind="class">ordered_map::value_compare</class>
  </compound>
  <compound kind="class">
    <name>ordered_map::value_compare</name>
    <filename>classordered__map_1_1value__compare.html</filename>
  </compound>
  <compound kind="class">
    <name>ordered_set</name>
    <filename>classordered__set.html</filename>
    <templarg>class T</templarg>
    <templarg>class COMP</templarg>
    <templarg>class ALLOC</templarg>
    <class kind="class">ordered_set::sorted_iterator</class>
  </compound>
  <compound kind="class">
    <name>ordered_set::sorted_iterator</name>
    <filename>classordered__set_1_1sorted__iterator.html</filename>
  </compound>
  <compound kind="class">
    <name>P4::AbstractInliner</name>
    <filename>class_p4_1_1_abstract_inliner.html</filename>
    <templarg>class InlineList</templarg>
    <templarg>class InlineWorkList</templarg>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::AbstractParserDriver</name>
    <filename>class_p4_1_1_abstract_parser_driver.html</filename>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>onParseError</name>
      <anchorfile>class_p4_1_1_abstract_parser_driver.html</anchorfile>
      <anchor>a16cd6f60a578e74dcf477d06eeb156ee</anchor>
      <arglist>(const Util::SourceInfo &amp;location, const std::string &amp;message)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>onReadComment</name>
      <anchorfile>class_p4_1_1_abstract_parser_driver.html</anchorfile>
      <anchor>a4d823163643d67ef6604b099bd01a88e</anchor>
      <arglist>(const char *text, bool lineComment)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>onReadFileName</name>
      <anchorfile>class_p4_1_1_abstract_parser_driver.html</anchorfile>
      <anchor>a655b41963d556e4d3ab761a7344d2e74</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>onReadIdentifier</name>
      <anchorfile>class_p4_1_1_abstract_parser_driver.html</anchorfile>
      <anchor>ac8c00944ac88ef759c83266aadca4dbd</anchor>
      <arglist>(cstring id)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>onReadLineNumber</name>
      <anchorfile>class_p4_1_1_abstract_parser_driver.html</anchorfile>
      <anchor>a7a6f13017163b96ffce7bef1f5e63035</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>onReadToken</name>
      <anchorfile>class_p4_1_1_abstract_parser_driver.html</anchorfile>
      <anchor>a263442acb846847248ea5b63be7a60c3</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>saveState</name>
      <anchorfile>class_p4_1_1_abstract_parser_driver.html</anchorfile>
      <anchor>a8170e90031d242b1c7e5af482b57e10d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Util::InputSources *</type>
      <name>sources</name>
      <anchorfile>class_p4_1_1_abstract_parser_driver.html</anchorfile>
      <anchor>a8a79648adb1969aa9e13b412d2748094</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Util::SourceInfo</type>
      <name>yylloc</name>
      <anchorfile>class_p4_1_1_abstract_parser_driver.html</anchorfile>
      <anchor>a24ade0995b31810ca08459b6966147e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::ActionCall</name>
    <filename>class_p4_1_1_action_call.html</filename>
    <base>P4::MethodInstance</base>
    <member kind="function">
      <type>const IR::P4Action *</type>
      <name>specialize</name>
      <anchorfile>class_p4_1_1_action_call.html</anchorfile>
      <anchor>a0673e44886b5a1ce2b78a362a4ecaf8b</anchor>
      <arglist>(ReferenceMap *refMap) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::ActionInvocation</name>
    <filename>class_p4_1_1_action_invocation.html</filename>
  </compound>
  <compound kind="class">
    <name>P4::ActionReplacement</name>
    <filename>class_p4_1_1_action_replacement.html</filename>
  </compound>
  <compound kind="class">
    <name>P4::ActionsInliner</name>
    <filename>class_p4_1_1_actions_inliner.html</filename>
    <base>P4::AbstractInliner&lt; ActionsInlineList, AInlineWorkList &gt;</base>
  </compound>
  <compound kind="class">
    <name>P4::ActionSynthesisPolicy</name>
    <filename>class_p4_1_1_action_synthesis_policy.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>can_combine</name>
      <anchorfile>class_p4_1_1_action_synthesis_policy.html</anchorfile>
      <anchor>a4ea1d68cca758ace7de8c9b3ca80fa86</anchor>
      <arglist>(const Visitor::Context *, const IR::BlockStatement *, const IR::StatOrDecl *)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>convert</name>
      <anchorfile>class_p4_1_1_action_synthesis_policy.html</anchorfile>
      <anchor>ab81bf4db8b9f40b05968952e4f3901d3</anchor>
      <arglist>(const Visitor::Context *ctxt, const IR::P4Control *control)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::AddMissingIdAnnotations</name>
    <filename>class_p4_1_1_add_missing_id_annotations.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::AllDefinitions</name>
    <filename>class_p4_1_1_all_definitions.html</filename>
    <base>IHasDbPrint</base>
  </compound>
  <compound kind="class">
    <name>P4::AnalyzeParser</name>
    <filename>class_p4_1_1_analyze_parser.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::AnnotationSelectionPolicy</name>
    <filename>class_p4_1_1_annotation_selection_policy.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>keep</name>
      <anchorfile>class_p4_1_1_annotation_selection_policy.html</anchorfile>
      <anchor>adbb93f90ad02b2c8f3e5887ce7bb99c2</anchor>
      <arglist>(const IR::Annotation *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::AnyElement</name>
    <filename>class_p4_1_1_any_element.html</filename>
    <base>P4::SymbolicHeader</base>
  </compound>
  <compound kind="class">
    <name>P4::ApplyMethod</name>
    <filename>class_p4_1_1_apply_method.html</filename>
    <base>P4::MethodInstance</base>
  </compound>
  <compound kind="class">
    <name>P4::ApplyOptionsPragmas</name>
    <filename>class_p4_1_1_apply_options_pragmas.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::ApplyTypesToExpressions</name>
    <filename>class_p4_1_1_apply_types_to_expressions.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::ArrayLocation</name>
    <filename>class_p4_1_1_array_location.html</filename>
    <base>P4::IndexedLocation</base>
  </compound>
  <compound kind="class">
    <name>P4::BaseLocation</name>
    <filename>class_p4_1_1_base_location.html</filename>
    <base>P4::StorageLocation</base>
  </compound>
  <compound kind="class">
    <name>P4::BFRT::BFRuntimeGenerator</name>
    <filename>class_p4_1_1_b_f_r_t_1_1_b_f_runtime_generator.html</filename>
    <class kind="struct">P4::BFRT::BFRuntimeGenerator::ActionProf</class>
    <class kind="struct">P4::BFRT::BFRuntimeGenerator::Counter</class>
    <class kind="struct">P4::BFRT::BFRuntimeGenerator::Digest</class>
    <class kind="struct">P4::BFRT::BFRuntimeGenerator::Meter</class>
    <class kind="struct">P4::BFRT::BFRuntimeGenerator::Register</class>
    <member kind="function" virtualness="virtual">
      <type>virtual const Util::JsonObject *</type>
      <name>genSchema</name>
      <anchorfile>class_p4_1_1_b_f_r_t_1_1_b_f_runtime_generator.html</anchorfile>
      <anchor>ac957e5731c3653cc1a1d06d0e9be6088</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serializeBFRuntimeSchema</name>
      <anchorfile>class_p4_1_1_b_f_r_t_1_1_b_f_runtime_generator.html</anchorfile>
      <anchor>aa7cc7cebcf280e2bb0fb90905388a212</anchor>
      <arglist>(std::ostream *destination)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addRegisterDataFields</name>
      <anchorfile>class_p4_1_1_b_f_r_t_1_1_b_f_runtime_generator.html</anchorfile>
      <anchor>a7cb08673f0d62c4e807aff46f67e9a7d</anchor>
      <arglist>(Util::JsonArray *dataJson, const Register &amp;register_, P4Id idOffset=1) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Util::JsonArray *</type>
      <name>makeActionSpecs</name>
      <anchorfile>class_p4_1_1_b_f_r_t_1_1_b_f_runtime_generator.html</anchorfile>
      <anchor>afb450b7c2d0b575f3ad2538d8b390ca5</anchor>
      <arglist>(const p4configv1::Table &amp;table, P4Id *maxActionParamId=nullptr) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>transformTypeSpecToDataFields</name>
      <anchorfile>class_p4_1_1_b_f_r_t_1_1_b_f_runtime_generator.html</anchorfile>
      <anchor>a2ff1082a31bebfb62e8b15c5804ac069</anchor>
      <arglist>(Util::JsonArray *fieldsJson, const p4configv1::P4DataTypeSpec &amp;typeSpec, cstring instanceType, cstring instanceName, const std::vector&lt; cstring &gt; *fieldNames=nullptr, cstring prefix=&quot;&quot;, cstring suffix=&quot;&quot;, P4Id idOffset=1) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4::BFRT::BFRuntimeGenerator::ActionProf</name>
    <filename>struct_p4_1_1_b_f_r_t_1_1_b_f_runtime_generator_1_1_action_prof.html</filename>
  </compound>
  <compound kind="struct">
    <name>P4::BFRT::BFRuntimeGenerator::Counter</name>
    <filename>struct_p4_1_1_b_f_r_t_1_1_b_f_runtime_generator_1_1_counter.html</filename>
  </compound>
  <compound kind="struct">
    <name>P4::BFRT::BFRuntimeGenerator::Digest</name>
    <filename>struct_p4_1_1_b_f_r_t_1_1_b_f_runtime_generator_1_1_digest.html</filename>
  </compound>
  <compound kind="struct">
    <name>P4::BFRT::BFRuntimeGenerator::Meter</name>
    <filename>struct_p4_1_1_b_f_r_t_1_1_b_f_runtime_generator_1_1_meter.html</filename>
  </compound>
  <compound kind="struct">
    <name>P4::BFRT::BFRuntimeGenerator::Register</name>
    <filename>struct_p4_1_1_b_f_r_t_1_1_b_f_runtime_generator_1_1_register.html</filename>
  </compound>
  <compound kind="class">
    <name>P4::BFRT::BFRuntimeSchemaGenerator</name>
    <filename>class_p4_1_1_b_f_r_t_1_1_b_f_runtime_schema_generator.html</filename>
    <base>P4::BFRT::BFRuntimeGenerator</base>
    <class kind="struct">P4::BFRT::BFRuntimeSchemaGenerator::ActionSelector</class>
    <member kind="function">
      <type>const Util::JsonObject *</type>
      <name>genSchema</name>
      <anchorfile>class_p4_1_1_b_f_r_t_1_1_b_f_runtime_schema_generator.html</anchorfile>
      <anchor>a1f107dacb97e1a130b087854692b0106</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4::BFRT::BFRuntimeSchemaGenerator::ActionSelector</name>
    <filename>struct_p4_1_1_b_f_r_t_1_1_b_f_runtime_schema_generator_1_1_action_selector.html</filename>
  </compound>
  <compound kind="class">
    <name>P4::BFRT::TypeSpecParser</name>
    <filename>class_p4_1_1_b_f_r_t_1_1_type_spec_parser.html</filename>
  </compound>
  <compound kind="struct">
    <name>P4::BFRT::TypeSpecParser::Field</name>
    <filename>class_p4_1_1_b_f_r_t_1_1_type_spec_parser.html</filename>
    <anchor>struct_p4_1_1_b_f_r_t_1_1_type_spec_parser_1_1_field</anchor>
  </compound>
  <compound kind="class">
    <name>P4::BinaryConstraint</name>
    <filename>class_p4_1_1_binary_constraint.html</filename>
    <base>P4::TypeConstraint</base>
  </compound>
  <compound kind="class">
    <name>P4::BindTypeVariables</name>
    <filename>class_p4_1_1_bind_type_variables.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::BuiltInMethod</name>
    <filename>class_p4_1_1_built_in_method.html</filename>
    <base>P4::MethodInstance</base>
  </compound>
  <compound kind="class">
    <name>P4::CallGraph</name>
    <filename>class_p4_1_1_call_graph.html</filename>
    <templarg>class T</templarg>
    <class kind="class">P4::CallGraph::Loop</class>
    <class kind="struct">P4::CallGraph::Loops</class>
    <class kind="struct">P4::CallGraph::sccInfo</class>
  </compound>
  <compound kind="class">
    <name>P4::CallGraph::Loop</name>
    <filename>class_p4_1_1_call_graph_1_1_loop.html</filename>
  </compound>
  <compound kind="struct">
    <name>P4::CallGraph::Loops</name>
    <filename>struct_p4_1_1_call_graph_1_1_loops.html</filename>
  </compound>
  <compound kind="struct">
    <name>P4::CallGraph::sccInfo</name>
    <filename>struct_p4_1_1_call_graph_1_1scc_info.html</filename>
  </compound>
  <compound kind="struct">
    <name>P4::CallInfo</name>
    <filename>struct_p4_1_1_call_info.html</filename>
    <base>IHasDbPrint</base>
  </compound>
  <compound kind="class">
    <name>P4::CanBeImplicitlyCastConstraint</name>
    <filename>class_p4_1_1_can_be_implicitly_cast_constraint.html</filename>
    <base>P4::BinaryConstraint</base>
    <member kind="function">
      <type>bool</type>
      <name>reportError</name>
      <anchorfile>class_p4_1_1_can_be_implicitly_cast_constraint.html</anchorfile>
      <anchor>a0ee16f599d0c1c462799b7b36c781a79</anchor>
      <arglist>(const TypeVariableSubstitution *subst, const char *format, Args &amp;&amp;...args) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::CastBooleanTableKeys</name>
    <filename>class_p4_1_1_cast_boolean_table_keys.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::CheckConstants</name>
    <filename>class_p4_1_1_check_constants.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::CheckCoreMethods</name>
    <filename>class_p4_1_1_check_core_methods.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::CheckDeprecated</name>
    <filename>class_p4_1_1_check_deprecated.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::CheckExternInvocationCommon</name>
    <filename>class_p4_1_1_check_extern_invocation_common.html</filename>
    <base>Inspector</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>checkExtern</name>
      <anchorfile>class_p4_1_1_check_extern_invocation_common.html</anchorfile>
      <anchor>ae3350cff238a1bcb145d35de254fad45</anchor>
      <arglist>(const ExternFunction *extFunction, const IR::MethodCallExpression *expr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>checkExtern</name>
      <anchorfile>class_p4_1_1_check_extern_invocation_common.html</anchorfile>
      <anchor>a8e4e8c0ca73442bfd1d05807736f0574</anchor>
      <arglist>(const ExternMethod *extMethod, const IR::MethodCallExpression *expr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkPipeConstraints</name>
      <anchorfile>class_p4_1_1_check_extern_invocation_common.html</anchorfile>
      <anchor>afcd9ca2d1c886fe0905892d69dae9f65</anchor>
      <arglist>(cstring extType, bitvec bv, const IR::MethodCallExpression *expr, cstring extName, cstring pipe)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cstring</type>
      <name>extractBlock</name>
      <anchorfile>class_p4_1_1_check_extern_invocation_common.html</anchorfile>
      <anchor>a2306decdba864f9bda73f82de2cf8abf</anchor>
      <arglist>(bitvec vec)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual cstring</type>
      <name>getBlockName</name>
      <anchorfile>class_p4_1_1_check_extern_invocation_common.html</anchorfile>
      <anchor>a5a5db92289f5fd6becec8e7628fe039f</anchor>
      <arglist>(int bit)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>initPipeConstraints</name>
      <anchorfile>class_p4_1_1_check_extern_invocation_common.html</anchorfile>
      <anchor>a727193b258aad42b35d2f050970f4e0e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setPipeConstraints</name>
      <anchorfile>class_p4_1_1_check_extern_invocation_common.html</anchorfile>
      <anchor>a0b1d53b2321688b6e24aa0ba9f8d0706</anchor>
      <arglist>(cstring extType, bitvec vec)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::CheckNamedArgs</name>
    <filename>class_p4_1_1_check_named_args.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::CheckTableSize</name>
    <filename>class_p4_1_1_check_table_size.html</filename>
    <base>Modifier</base>
  </compound>
  <compound kind="class">
    <name>P4::ChooseEnumRepresentation</name>
    <filename>class_p4_1_1_choose_enum_representation.html</filename>
  </compound>
  <compound kind="class">
    <name>P4::ChooseErrorRepresentation</name>
    <filename>class_p4_1_1_choose_error_representation.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual IR::IndexedVector&lt; IR::SerEnumMember &gt; *</type>
      <name>assignValues</name>
      <anchorfile>class_p4_1_1_choose_error_representation.html</anchorfile>
      <anchor>aa20a4fa1cbeb9a32f4f956cbf8bbd545</anchor>
      <arglist>(IR::Type_Error *type, unsigned width) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>convert</name>
      <anchorfile>class_p4_1_1_choose_error_representation.html</anchorfile>
      <anchor>ab71f8f27eefb6b647885df7ba56dcda4</anchor>
      <arglist>(const IR::Type_Error *type) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned</type>
      <name>errorSize</name>
      <anchorfile>class_p4_1_1_choose_error_representation.html</anchorfile>
      <anchor>a62c172ace046806561c64c7206955d61</anchor>
      <arglist>(unsigned errorCount) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::ClearTypeMap</name>
    <filename>class_p4_1_1_clear_type_map.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::CloneConstants</name>
    <filename>class_p4_1_1_clone_constants.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::ClonePathExpressions</name>
    <filename>class_p4_1_1_clone_path_expressions.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::CloneVariableDeclarations</name>
    <filename>class_p4_1_1_clone_variable_declarations.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::CompileTimeOperations</name>
    <filename>class_p4_1_1_compile_time_operations.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::ComplexValues</name>
    <filename>class_p4_1_1_complex_values.html</filename>
    <class kind="struct">P4::ComplexValues::Component</class>
    <class kind="struct">P4::ComplexValues::FieldsMap</class>
    <class kind="struct">P4::ComplexValues::FinalName</class>
    <member kind="function">
      <type>void</type>
      <name>explode</name>
      <anchorfile>class_p4_1_1_complex_values.html</anchorfile>
      <anchor>ac7bb9bf97bd5448607f463b21495da77</anchor>
      <arglist>(cstring prefix, const IR::Type_Struct *type, FieldsMap *map, IR::Vector&lt; T &gt; *result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNestedStruct</name>
      <anchorfile>class_p4_1_1_complex_values.html</anchorfile>
      <anchor>ac291c7ad90bf1d1061c79ddfdf08366f</anchor>
      <arglist>(const IR::Type *type)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4::ComplexValues::Component</name>
    <filename>struct_p4_1_1_complex_values_1_1_component.html</filename>
    <base>IHasDbPrint</base>
  </compound>
  <compound kind="struct">
    <name>P4::ComplexValues::FieldsMap</name>
    <filename>struct_p4_1_1_complex_values_1_1_fields_map.html</filename>
    <base>P4::ComplexValues::Component</base>
  </compound>
  <compound kind="struct">
    <name>P4::ComplexValues::FinalName</name>
    <filename>struct_p4_1_1_complex_values_1_1_final_name.html</filename>
    <base>P4::ComplexValues::Component</base>
  </compound>
  <compound kind="class">
    <name>P4::ComputeDefUse</name>
    <filename>class_p4_1_1_compute_def_use.html</filename>
    <base>Inspector</base>
    <base>ControlFlowVisitor</base>
    <base>P4WriteContext</base>
    <base>P4::ResolutionContext</base>
    <class kind="struct">P4::ComputeDefUse::loc_t</class>
    <class kind="class">P4::ComputeDefUse::SetupJoinPoints</class>
  </compound>
  <compound kind="struct">
    <name>P4::ComputeDefUse::loc_t</name>
    <filename>struct_p4_1_1_compute_def_use_1_1loc__t.html</filename>
  </compound>
  <compound kind="class">
    <name>P4::ComputeDefUse::SetupJoinPoints</name>
    <filename>class_p4_1_1_compute_def_use_1_1_setup_join_points.html</filename>
    <base>ControlFlowVisitor::SetupJoinPoints</base>
    <base>P4::ResolutionContext</base>
  </compound>
  <compound kind="class">
    <name>P4::ComputeParserCG</name>
    <filename>class_p4_1_1_compute_parser_c_g.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::ComputeWriteSet</name>
    <filename>class_p4_1_1_compute_write_set.html</filename>
    <base>Inspector</base>
    <base>IHasDbPrint</base>
    <member kind="function">
      <type>bool</type>
      <name>preorder</name>
      <anchorfile>class_p4_1_1_compute_write_set.html</anchorfile>
      <anchor>a52dc08506bd35459987fd82f86f7d216</anchor>
      <arglist>(const IR::Expression *expression) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ComputeWriteSet</name>
      <anchorfile>class_p4_1_1_compute_write_set.html</anchorfile>
      <anchor>a7fcd69f4a8bf1824f851e4d5965d2b23</anchor>
      <arglist>(const ComputeWriteSet *source, ProgramPoint context, Definitions *definitions)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>visitVirtualMethods</name>
      <anchorfile>class_p4_1_1_compute_write_set.html</anchorfile>
      <anchor>a52433fc95ae122230131012d3c64d993</anchor>
      <arglist>(const IR::IndexedVector&lt; IR::Declaration &gt; &amp;locals)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ProgramPoint</type>
      <name>callingContext</name>
      <anchorfile>class_p4_1_1_compute_write_set.html</anchorfile>
      <anchor>ac1a066474266be18e816594b4172191b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Definitions *</type>
      <name>currentDefinitions</name>
      <anchorfile>class_p4_1_1_compute_write_set.html</anchorfile>
      <anchor>a534487ed7707c490a3fb667e509708dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Definitions *</type>
      <name>exitDefinitions</name>
      <anchorfile>class_p4_1_1_compute_write_set.html</anchorfile>
      <anchor>a53207ee4f6fd7d4b3e7de236b79a5de3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>lhs</name>
      <anchorfile>class_p4_1_1_compute_write_set.html</anchorfile>
      <anchor>a0d0696397a363c106c523ae5af61f21d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AllocTrace</type>
      <name>memuse</name>
      <anchorfile>class_p4_1_1_compute_write_set.html</anchorfile>
      <anchor>a0ecfa0e44c447f20bb2090038d5e40b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Definitions *</type>
      <name>returnedDefinitions</name>
      <anchorfile>class_p4_1_1_compute_write_set.html</anchorfile>
      <anchor>a15be09eb5b630a8435a75cd5e1fc84fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>hvec_map&lt; const IR::Expression *, const LocationSet * &gt;</type>
      <name>writes</name>
      <anchorfile>class_p4_1_1_compute_write_set.html</anchorfile>
      <anchor>aaebc1bc32749fb9b823408f7b24e3a04</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::ConstantFolding</name>
    <filename>class_p4_1_1_constant_folding.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::ConstantFoldingPolicy</name>
    <filename>class_p4_1_1_constant_folding_policy.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual const IR::Node *</type>
      <name>hook</name>
      <anchorfile>class_p4_1_1_constant_folding_policy.html</anchorfile>
      <anchor>a6ecdc32eff3b3baf1c96b005630ab343</anchor>
      <arglist>(Visitor &amp;, IR::PathExpression *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::ConstructorCall</name>
    <filename>class_p4_1_1_constructor_call.html</filename>
    <base>P4::InstanceBase</base>
  </compound>
  <compound kind="struct">
    <name>P4::ConstructorMap</name>
    <filename>struct_p4_1_1_constructor_map.html</filename>
  </compound>
  <compound kind="class">
    <name>P4::ContainerConstructorCall</name>
    <filename>class_p4_1_1_container_constructor_call.html</filename>
    <base>P4::ConstructorCall</base>
  </compound>
  <compound kind="class">
    <name>P4::ContainsType</name>
    <filename>class_p4_1_1_contains_type.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::ControlInstantiation</name>
    <filename>class_p4_1_1_control_instantiation.html</filename>
    <base>P4::Instantiation</base>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::ActionRef</name>
    <filename>namespace_p4_1_1_control_plane_a_p_i.html</filename>
    <anchor>struct_p4_1_1_control_plane_a_p_i_1_1_action_ref</anchor>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::ControllerType</name>
    <filename>struct_p4_1_1_control_plane_a_p_i_1_1_controller_type.html</filename>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::DefaultAction</name>
    <filename>namespace_p4_1_1_control_plane_a_p_i.html</filename>
    <anchor>struct_p4_1_1_control_plane_a_p_i_1_1_default_action</anchor>
  </compound>
  <compound kind="class">
    <name>P4::ControlPlaneAPI::FieldIdAllocator</name>
    <filename>class_p4_1_1_control_plane_a_p_i_1_1_field_id_allocator.html</filename>
    <templarg>typename T</templarg>
  </compound>
  <compound kind="class">
    <name>P4::ControlPlaneAPI::FlattenHeader</name>
    <filename>class_p4_1_1_control_plane_a_p_i_1_1_flatten_header.html</filename>
    <member kind="function" static="yes">
      <type>static const IR::Type_Header *</type>
      <name>flatten</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_flatten_header.html</anchorfile>
      <anchor>a9c85feef337ee8c22e2313ac70634931</anchor>
      <arglist>(P4::TypeMap *typeMap, const IR::Type_Header *headerType)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::Helpers::Counterlike</name>
    <filename>struct_p4_1_1_control_plane_a_p_i_1_1_helpers_1_1_counterlike.html</filename>
    <templarg>typename Kind</templarg>
    <member kind="function" static="yes">
      <type>static std::optional&lt; Counterlike&lt; Kind &gt; &gt;</type>
      <name>from</name>
      <anchorfile>struct_p4_1_1_control_plane_a_p_i_1_1_helpers_1_1_counterlike.html</anchorfile>
      <anchor>a81cd5227f0ac2be6cb57a6304b25aeeb</anchor>
      <arglist>(const IR::ExternBlock *instance, const ReferenceMap *refMap, P4::TypeMap *typeMap, ::p4::config::v1::P4TypeInfo *p4RtTypeInfo)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::optional&lt; Counterlike&lt; Kind &gt; &gt;</type>
      <name>fromDirect</name>
      <anchorfile>struct_p4_1_1_control_plane_a_p_i_1_1_helpers_1_1_counterlike.html</anchorfile>
      <anchor>a8e2174351214aae5cf1b7df9da11eff4</anchor>
      <arglist>(const ExternInstance &amp;instance, const IR::P4Table *table)</arglist>
    </member>
    <member kind="variable">
      <type>const IR::IAnnotated *</type>
      <name>annotations</name>
      <anchorfile>struct_p4_1_1_control_plane_a_p_i_1_1_helpers_1_1_counterlike.html</anchorfile>
      <anchor>a6eeecfc75b3544b6dc66a6b695bc6eff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const cstring</type>
      <name>index_type_name</name>
      <anchorfile>struct_p4_1_1_control_plane_a_p_i_1_1_helpers_1_1_counterlike.html</anchorfile>
      <anchor>a88a37f2a8f126956a2d25c346a7db60e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const cstring</type>
      <name>name</name>
      <anchorfile>struct_p4_1_1_control_plane_a_p_i_1_1_helpers_1_1_counterlike.html</anchorfile>
      <anchor>a41d30bfe0292ac72e1b540d2250cba2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int64_t</type>
      <name>size</name>
      <anchorfile>struct_p4_1_1_control_plane_a_p_i_1_1_helpers_1_1_counterlike.html</anchorfile>
      <anchor>ad4d95aa36a6d9dd8bcaa5725d02d48e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::optional&lt; cstring &gt;</type>
      <name>table</name>
      <anchorfile>struct_p4_1_1_control_plane_a_p_i_1_1_helpers_1_1_counterlike.html</anchorfile>
      <anchor>a2d284842dab1dc2ae1ea2f478fe1ed17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const cstring</type>
      <name>unit</name>
      <anchorfile>struct_p4_1_1_control_plane_a_p_i_1_1_helpers_1_1_counterlike.html</anchorfile>
      <anchor>a87e96cf8a7660b0b04893ddc34efeb35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::Helpers::CounterlikeTraits</name>
    <filename>namespace_p4_1_1_control_plane_a_p_i_1_1_helpers.html</filename>
    <anchor>struct_p4_1_1_control_plane_a_p_i_1_1_helpers_1_1_counterlike_traits</anchor>
    <templarg>typename Kind</templarg>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::Helpers::CounterlikeTraits&lt; Standard::CounterExtern&lt; Standard::Arch::PNA &gt; &gt;</name>
    <filename>struct_p4_1_1_control_plane_a_p_i_1_1_helpers_1_1_counterlike_traits_3_01_standard_1_1_counter_ebb50c582c5dd33c5846215ba73dfabae.html</filename>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::Helpers::CounterlikeTraits&lt; Standard::CounterExtern&lt; Standard::Arch::PSA &gt; &gt;</name>
    <filename>struct_p4_1_1_control_plane_a_p_i_1_1_helpers_1_1_counterlike_traits_3_01_standard_1_1_counter_e6437b271dee81710718c4ad614e8af47.html</filename>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::Helpers::CounterlikeTraits&lt; Standard::CounterExtern&lt; Standard::Arch::V1MODEL &gt; &gt;</name>
    <filename>struct_p4_1_1_control_plane_a_p_i_1_1_helpers_1_1_counterlike_traits_3_01_standard_1_1_counter_e248b4300a59b419bebe327cb298ec982.html</filename>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::Helpers::CounterlikeTraits&lt; Standard::CounterExtern&lt; Standard::Arch::V1MODEL2020 &gt; &gt;</name>
    <filename>struct_p4_1_1_control_plane_a_p_i_1_1_helpers_1_1_counterlike_traits_3_01_standard_1_1_counter_e1f6c98c2aec817f75f1c612757de5d9e.html</filename>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::Helpers::CounterlikeTraits&lt; Standard::MeterExtern&lt; Standard::Arch::PNA &gt; &gt;</name>
    <filename>struct_p4_1_1_control_plane_a_p_i_1_1_helpers_1_1_counterlike_traits_3_01_standard_1_1_meter_exte7410394ea83dab77c27e91b74c2885a.html</filename>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::Helpers::CounterlikeTraits&lt; Standard::MeterExtern&lt; Standard::Arch::PSA &gt; &gt;</name>
    <filename>struct_p4_1_1_control_plane_a_p_i_1_1_helpers_1_1_counterlike_traits_3_01_standard_1_1_meter_ext13b908381663fa82ab86377f6c8cedcd.html</filename>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::Helpers::CounterlikeTraits&lt; Standard::MeterExtern&lt; Standard::Arch::V1MODEL &gt; &gt;</name>
    <filename>struct_p4_1_1_control_plane_a_p_i_1_1_helpers_1_1_counterlike_traits_3_01_standard_1_1_meter_ext9534506db731af7e7b2ecd0cea82709d.html</filename>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::Helpers::CounterlikeTraits&lt; Standard::MeterExtern&lt; Standard::Arch::V1MODEL2020 &gt; &gt;</name>
    <filename>struct_p4_1_1_control_plane_a_p_i_1_1_helpers_1_1_counterlike_traits_3_01_standard_1_1_meter_extab6d2347add15d90ee663718d90b5fa9.html</filename>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::MatchField</name>
    <filename>namespace_p4_1_1_control_plane_a_p_i.html</filename>
    <anchor>struct_p4_1_1_control_plane_a_p_i_1_1_match_field</anchor>
  </compound>
  <compound kind="class">
    <name>P4::ControlPlaneAPI::P4InfoMaps</name>
    <filename>class_p4_1_1_control_plane_a_p_i_1_1_p4_info_maps.html</filename>
    <member kind="function">
      <type>std::optional&lt; cstring &gt;</type>
      <name>lookUpControlPlaneName</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_p4_info_maps.html</anchorfile>
      <anchor>a86e1122034c7cfce19194f0f3a48641c</anchor>
      <arglist>(uint64_t id) const</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; uint64_t &gt;</type>
      <name>lookUpP4RuntimeId</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_p4_info_maps.html</anchorfile>
      <anchor>a906a59a9170c1ae6fcccab61f006cac7</anchor>
      <arglist>(cstring controlPlaneName) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>buildP4InfoMaps</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_p4_info_maps.html</anchorfile>
      <anchor>a75be747c5b0f32b7f77ebd127bcc5adb</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P4RuntimeIdToControlPlaneNameMap</type>
      <name>idToNameMap</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_p4_info_maps.html</anchorfile>
      <anchor>ae66c42a97f9980ced4fdb8c3cc6f4f8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ControlPlaneNameToP4RuntimeIdMap</type>
      <name>nameToIdMap</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_p4_info_maps.html</anchorfile>
      <anchor>a6b2dde95f30aa1e5897d6e3ed53f09c1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::ControlPlaneAPI::P4RuntimeAnalyzer</name>
    <filename>class_p4_1_1_control_plane_a_p_i_1_1_p4_runtime_analyzer.html</filename>
    <member kind="function">
      <type>void</type>
      <name>addPkgInfo</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_p4_runtime_analyzer.html</anchorfile>
      <anchor>a20a8e3f9177c3d0fae3955d3eaac1bb5</anchor>
      <arglist>(const IR::ToplevelBlock *evaluatedProgram, cstring arch) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addValueSet</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_p4_runtime_analyzer.html</anchorfile>
      <anchor>ae39b58b3b10f3640d1bdf2cbfb8c4381</anchor>
      <arglist>(const IR::P4ValueSet *inst)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postAdd</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_p4_runtime_analyzer.html</anchorfile>
      <anchor>a0b154e5966b7ddd41ded1bc1588f66f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static P4RuntimeAPI</type>
      <name>analyze</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_p4_runtime_analyzer.html</anchorfile>
      <anchor>ad3548b126dae320b091fc586d7135e59</anchor>
      <arglist>(const IR::P4Program *program, const IR::ToplevelBlock *evaluatedProgram, ReferenceMap *refMap, TypeMap *typeMap, P4RuntimeArchHandlerIface *archHandler, cstring arch)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::P4RuntimeArchHandlerBuilderIface</name>
    <filename>struct_p4_1_1_control_plane_a_p_i_1_1_p4_runtime_arch_handler_builder_iface.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual P4RuntimeArchHandlerIface *</type>
      <name>operator()</name>
      <anchorfile>struct_p4_1_1_control_plane_a_p_i_1_1_p4_runtime_arch_handler_builder_iface.html</anchorfile>
      <anchor>a21b092c70f9fc11c2c36992185eac351</anchor>
      <arglist>(ReferenceMap *refMap, TypeMap *typeMap, const IR::ToplevelBlock *evaluatedProgram) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::ControlPlaneAPI::P4RuntimeArchHandlerIface</name>
    <filename>class_p4_1_1_control_plane_a_p_i_1_1_p4_runtime_arch_handler_iface.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addExternEntries</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_p4_runtime_arch_handler_iface.html</anchorfile>
      <anchor>af6d1c2aeb2b3758554a5010fe57972c4</anchor>
      <arglist>(const p4::v1::WriteRequest *entries, const P4RuntimeSymbolTableIface &amp;symbols, const IR::ExternBlock *externBlock)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addExternFunction</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_p4_runtime_arch_handler_iface.html</anchorfile>
      <anchor>a9e7666f68ccfd98fb89156379665254a</anchor>
      <arglist>(const P4RuntimeSymbolTableIface &amp;symbols, ::p4::config::v1::P4Info *p4info, const P4::ExternFunction *externFunction)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addExternInstance</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_p4_runtime_arch_handler_iface.html</anchorfile>
      <anchor>a475707d33eeb44b4c3ed04fcb537c15d</anchor>
      <arglist>(const P4RuntimeSymbolTableIface &amp;symbols, ::p4::config::v1::P4Info *p4info, const IR::ExternBlock *externBlock)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addTableProperties</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_p4_runtime_arch_handler_iface.html</anchorfile>
      <anchor>a8f0f179ad22fab32b0f0eeab22d2c4bb</anchor>
      <arglist>(const P4RuntimeSymbolTableIface &amp;symbols, ::p4::config::v1::P4Info *p4info, ::p4::config::v1::Table *table, const IR::TableBlock *tableBlock)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>collectAssignmentStatement</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_p4_runtime_arch_handler_iface.html</anchorfile>
      <anchor>af5870a3cb33cbbd87fec83621a1b8044</anchor>
      <arglist>(P4RuntimeSymbolTableIface *symbols, const IR::AssignmentStatement *assign)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>collectExternFunction</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_p4_runtime_arch_handler_iface.html</anchorfile>
      <anchor>a9b9cbc4344a8bcd3d215bc32a6e8587c</anchor>
      <arglist>(P4RuntimeSymbolTableIface *symbols, const P4::ExternFunction *externFunction)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>collectExternInstance</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_p4_runtime_arch_handler_iface.html</anchorfile>
      <anchor>ac32195e770b93891764af1942155c605</anchor>
      <arglist>(P4RuntimeSymbolTableIface *symbols, const IR::ExternBlock *externBlock)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>collectExternMethod</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_p4_runtime_arch_handler_iface.html</anchorfile>
      <anchor>ad445556d106c1b4a936614beb3667688</anchor>
      <arglist>(P4RuntimeSymbolTableIface *symbols, const P4::ExternMethod *externMethod)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>collectExtra</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_p4_runtime_arch_handler_iface.html</anchorfile>
      <anchor>afb7489c2b7227a44dae05604df780874</anchor>
      <arglist>(P4RuntimeSymbolTableIface *symbols)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>collectTableProperties</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_p4_runtime_arch_handler_iface.html</anchorfile>
      <anchor>a0e28d208d5cc5827573871ec35941839</anchor>
      <arglist>(P4RuntimeSymbolTableIface *symbols, const IR::TableBlock *tableBlock)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>filterAnnotations</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_p4_runtime_arch_handler_iface.html</anchorfile>
      <anchor>acd9f1d3c4fcd513124cd4138d419a964</anchor>
      <arglist>(cstring anno)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cstring</type>
      <name>getControlPlaneName</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_p4_runtime_arch_handler_iface.html</anchorfile>
      <anchor>a90f20334be25b9396ae32bdf7c60e784</anchor>
      <arglist>(const IR::Block *block)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual google::protobuf::util::JsonPrintOptions</type>
      <name>getJsonPrintOptions</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_p4_runtime_arch_handler_iface.html</anchorfile>
      <anchor>abd88bb2019af597719e514709401ebf9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>postAdd</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_p4_runtime_arch_handler_iface.html</anchorfile>
      <anchor>a842ed9e6b9ce3fa191cd0747df0c8bf8</anchor>
      <arglist>(const P4RuntimeSymbolTableIface &amp;symbols, ::p4::config::v1::P4Info *p4info)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>postCollect</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_p4_runtime_arch_handler_iface.html</anchorfile>
      <anchor>ab0802484a38a3541c7b0b0ef646d4441</anchor>
      <arglist>(const P4RuntimeSymbolTableIface &amp;symbols)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::ControlPlaneAPI::P4RuntimeEntriesConverter</name>
    <filename>class_p4_1_1_control_plane_a_p_i_1_1_p4_runtime_entries_converter.html</filename>
  </compound>
  <compound kind="class">
    <name>P4::ControlPlaneAPI::P4RuntimeSymbolTable</name>
    <filename>class_p4_1_1_control_plane_a_p_i_1_1_p4_runtime_symbol_table.html</filename>
    <base>P4::ControlPlaneAPI::P4RuntimeSymbolTableIface</base>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_p4_runtime_symbol_table.html</anchorfile>
      <anchor>a5c0caf9a03a7beb2652654cf9fb9daf0</anchor>
      <arglist>(P4RuntimeSymbolType type, const IR::IDeclaration *declaration) override</arglist>
    </member>
    <member kind="function">
      <type>p4rt_id_t</type>
      <name>getId</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_p4_runtime_symbol_table.html</anchorfile>
      <anchor>a0f01d2566f5b3d6612e085fd26bae7a8</anchor>
      <arglist>(P4RuntimeSymbolType type, const IR::IDeclaration *declaration) const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static P4RuntimeSymbolTable *</type>
      <name>create</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_p4_runtime_symbol_table.html</anchorfile>
      <anchor>af660baee4d28fe46b87640f391c96f47</anchor>
      <arglist>(Func function)</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>getAlias</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_p4_runtime_symbol_table.html</anchorfile>
      <anchor>aed48cafcbb683bb084286a0cf49b0a17</anchor>
      <arglist>(cstring name) const override</arglist>
    </member>
    <member kind="function">
      <type>p4rt_id_t</type>
      <name>getId</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_p4_runtime_symbol_table.html</anchorfile>
      <anchor>a0f01d2566f5b3d6612e085fd26bae7a8</anchor>
      <arglist>(P4RuntimeSymbolType type, const IR::IDeclaration *declaration) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::ControlPlaneAPI::P4RuntimeSymbolTableIface</name>
    <filename>class_p4_1_1_control_plane_a_p_i_1_1_p4_runtime_symbol_table_iface.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_p4_runtime_symbol_table_iface.html</anchorfile>
      <anchor>ab46f248f8fe56a4c164334c84721b1bf</anchor>
      <arglist>(P4RuntimeSymbolType type, const IR::IDeclaration *declaration)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual p4rt_id_t</type>
      <name>getId</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_p4_runtime_symbol_table_iface.html</anchorfile>
      <anchor>a66debc15e2ff480d2d56d5edbd140baa</anchor>
      <arglist>(P4RuntimeSymbolType type, const IR::IDeclaration *declaration) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cstring</type>
      <name>getAlias</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_p4_runtime_symbol_table_iface.html</anchorfile>
      <anchor>a9d08a3829bc07da4358fd0676ed14dc7</anchor>
      <arglist>(cstring name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual p4rt_id_t</type>
      <name>getId</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_p4_runtime_symbol_table_iface.html</anchorfile>
      <anchor>a66debc15e2ff480d2d56d5edbd140baa</anchor>
      <arglist>(P4RuntimeSymbolType type, const IR::IDeclaration *declaration) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cstring</type>
      <name>getAlias</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_p4_runtime_symbol_table_iface.html</anchorfile>
      <anchor>a9d08a3829bc07da4358fd0676ed14dc7</anchor>
      <arglist>(cstring name) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::ControlPlaneAPI::P4RuntimeSymbolType</name>
    <filename>class_p4_1_1_control_plane_a_p_i_1_1_p4_runtime_symbol_type.html</filename>
    <member kind="function">
      <type></type>
      <name>operator p4rt_id_t</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_p4_runtime_symbol_type.html</anchorfile>
      <anchor>a6e5f3e28771222e86177800369a23292</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::P4SymbolSuffixSet</name>
    <filename>struct_p4_1_1_control_plane_a_p_i_1_1_p4_symbol_suffix_set.html</filename>
    <member kind="function">
      <type>void</type>
      <name>addSymbol</name>
      <anchorfile>struct_p4_1_1_control_plane_a_p_i_1_1_p4_symbol_suffix_set.html</anchorfile>
      <anchor>a0dea86d37cb14fbef0f3f1527678a406</anchor>
      <arglist>(const cstring &amp;symbol)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::ControlPlaneAPI::ParseP4RuntimeAnnotations</name>
    <filename>class_p4_1_1_control_plane_a_p_i_1_1_parse_p4_runtime_annotations.html</filename>
    <base>P4::ParseAnnotations</base>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::Standard::ActionProfile</name>
    <filename>struct_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_action_profile.html</filename>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::Standard::ActionProfileTraits</name>
    <filename>namespace_p4_1_1_control_plane_a_p_i_1_1_standard.html</filename>
    <anchor>struct_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_action_profile_traits</anchor>
    <templarg>Arch arch</templarg>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::Standard::ActionProfileTraits&lt; Arch::PNA &gt;</name>
    <filename>struct_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_action_profile_traits_3_01_arch_1_1_p_n_a_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::Standard::ActionProfileTraits&lt; Arch::PSA &gt;</name>
    <filename>struct_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_action_profile_traits_3_01_arch_1_1_p_s_a_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::Standard::ActionProfileTraits&lt; Arch::V1MODEL &gt;</name>
    <filename>struct_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_action_profile_traits_3_01_arch_1_1_v1_m_o_d_e_l_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::Standard::ActionProfileTraits&lt; Arch::V1MODEL2020 &gt;</name>
    <filename>struct_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_action_profile_traits_3_01_arch_1_1_v1_m_o_d_e_l2020_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::Standard::ActionSelector</name>
    <filename>struct_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_action_selector.html</filename>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::Standard::ActionSelectorTraits</name>
    <filename>namespace_p4_1_1_control_plane_a_p_i_1_1_standard.html</filename>
    <anchor>struct_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_action_selector_traits</anchor>
    <templarg>Arch arch</templarg>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::Standard::ActionSelectorTraits&lt; Arch::PNA &gt;</name>
    <filename>struct_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_action_selector_traits_3_01_arch_1_1_p_n_a_01_4.html</filename>
    <base>P4::ControlPlaneAPI::Standard::ActionProfileTraits&lt; Arch::PNA &gt;</base>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::Standard::ActionSelectorTraits&lt; Arch::PSA &gt;</name>
    <filename>struct_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_action_selector_traits_3_01_arch_1_1_p_s_a_01_4.html</filename>
    <base>P4::ControlPlaneAPI::Standard::ActionProfileTraits&lt; Arch::PSA &gt;</base>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::Standard::ActionSelectorTraits&lt; Arch::V1MODEL &gt;</name>
    <filename>struct_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_action_selector_traits_3_01_arch_1_1_v1_m_o_d_e_l_01_4.html</filename>
    <base>P4::ControlPlaneAPI::Standard::ActionProfileTraits&lt; Arch::V1MODEL &gt;</base>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::Standard::ActionSelectorTraits&lt; Arch::V1MODEL2020 &gt;</name>
    <filename>struct_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_action_selector_traits_3_01_arch_1_1_v1_m_o_d_e_l2020_01_4.html</filename>
    <base>P4::ControlPlaneAPI::Standard::ActionProfileTraits&lt; Arch::V1MODEL2020 &gt;</base>
  </compound>
  <compound kind="class">
    <name>P4::ControlPlaneAPI::Standard::BFRuntimeArchHandler</name>
    <filename>class_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_b_f_runtime_arch_handler.html</filename>
    <templarg>Arch arch</templarg>
    <base>P4::ControlPlaneAPI::Standard::P4RuntimeArchHandlerCommon&lt; arch &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>collectExternInstance</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_b_f_runtime_arch_handler.html</anchorfile>
      <anchor>ae82c1de71c37ae58529b145d19713f93</anchor>
      <arglist>(P4RuntimeSymbolTableIface *symbols, const IR::ExternBlock *externBlock) override</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; Digest &gt;</type>
      <name>getDigest</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_b_f_runtime_arch_handler.html</anchorfile>
      <anchor>a2a37a6b5213ac8e4b8d65eddf91724b4</anchor>
      <arglist>(const IR::Declaration_Instance *decl, p4configv1::P4TypeInfo *p4RtTypeInfo)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>getSupportsTimeout</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_b_f_runtime_arch_handler.html</anchorfile>
      <anchor>acfa94e54d01a1de42a79c6b60d8f30dc</anchor>
      <arglist>(const IR::P4Table *table)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::ControlPlaneAPI::Standard::BFRuntimeArchHandlerPNA</name>
    <filename>class_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_b_f_runtime_arch_handler_p_n_a.html</filename>
    <base>P4::ControlPlaneAPI::Standard::BFRuntimeArchHandler&lt; Arch::PNA &gt;</base>
  </compound>
  <compound kind="class">
    <name>P4::ControlPlaneAPI::Standard::BFRuntimeArchHandlerPSA</name>
    <filename>class_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_b_f_runtime_arch_handler_p_s_a.html</filename>
    <base>P4::ControlPlaneAPI::Standard::BFRuntimeArchHandler&lt; Arch::PSA &gt;</base>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::Standard::CounterExtern</name>
    <filename>namespace_p4_1_1_control_plane_a_p_i_1_1_standard.html</filename>
    <anchor>struct_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_counter_extern</anchor>
    <templarg>Arch arch</templarg>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::Standard::Digest</name>
    <filename>namespace_p4_1_1_control_plane_a_p_i_1_1_standard.html</filename>
    <anchor>struct_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_digest</anchor>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::Standard::MeterExtern</name>
    <filename>namespace_p4_1_1_control_plane_a_p_i_1_1_standard.html</filename>
    <anchor>struct_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_meter_extern</anchor>
    <templarg>Arch arch</templarg>
  </compound>
  <compound kind="class">
    <name>P4::ControlPlaneAPI::Standard::P4RuntimeArchHandlerCommon</name>
    <filename>class_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_p4_runtime_arch_handler_common.html</filename>
    <templarg>Arch arch</templarg>
    <base>P4::ControlPlaneAPI::P4RuntimeArchHandlerIface</base>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addExternEntries</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_p4_runtime_arch_handler_common.html</anchorfile>
      <anchor>a305938d79a5e4bc74b85afb5b3325a84</anchor>
      <arglist>(const p4::v1::WriteRequest *, const P4RuntimeSymbolTableIface &amp;, const IR::ExternBlock *) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>collectAssignmentStatement</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_p4_runtime_arch_handler_common.html</anchorfile>
      <anchor>ae7a7d7f407ed6bf4050fd481e7debcb6</anchor>
      <arglist>(P4RuntimeSymbolTableIface *, const IR::AssignmentStatement *) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>collectExternFunction</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_p4_runtime_arch_handler_common.html</anchorfile>
      <anchor>a514455e5acd7e32baf6f560cf6d099d7</anchor>
      <arglist>(P4RuntimeSymbolTableIface *symbols, const P4::ExternFunction *externFunction) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>collectExternInstance</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_p4_runtime_arch_handler_common.html</anchorfile>
      <anchor>a5e3bc07cb79aea44959afe0fb9dbd87b</anchor>
      <arglist>(P4RuntimeSymbolTableIface *symbols, const IR::ExternBlock *externBlock) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>collectExternMethod</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_p4_runtime_arch_handler_common.html</anchorfile>
      <anchor>a21fe65b2b4a0c8225ee6224e0e4cc5bd</anchor>
      <arglist>(P4RuntimeSymbolTableIface *, const P4::ExternMethod *) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>collectExtra</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_p4_runtime_arch_handler_common.html</anchorfile>
      <anchor>a71aa8a381808e93348606b9a314c3758</anchor>
      <arglist>(P4RuntimeSymbolTableIface *symbols) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>collectTableProperties</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_p4_runtime_arch_handler_common.html</anchorfile>
      <anchor>a3aefc41a634be7973a57f9593ffa11d2</anchor>
      <arglist>(P4RuntimeSymbolTableIface *symbols, const IR::TableBlock *tableBlock) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>filterAnnotations</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_p4_runtime_arch_handler_common.html</anchorfile>
      <anchor>a97daea79d3ddab72a89844a77fc9c9bc</anchor>
      <arglist>(cstring) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>google::protobuf::util::JsonPrintOptions</type>
      <name>getJsonPrintOptions</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_p4_runtime_arch_handler_common.html</anchorfile>
      <anchor>ab2ced8b3445c7b43bf68fcdff9657a32</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>postAdd</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_p4_runtime_arch_handler_common.html</anchorfile>
      <anchor>a70441b599facd7190e982f0e6bb7af50</anchor>
      <arglist>(const P4RuntimeSymbolTableIface &amp;, ::p4::config::v1::P4Info *) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>postCollect</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_p4_runtime_arch_handler_common.html</anchorfile>
      <anchor>abd9d3118d77910da23f7612a0404afe8</anchor>
      <arglist>(const P4RuntimeSymbolTableIface &amp;symbols) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setCounterCommon</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_p4_runtime_arch_handler_common.html</anchorfile>
      <anchor>a80718eefebeba9d8a34feef409bf886c</anchor>
      <arglist>(const P4RuntimeSymbolTableIface &amp;symbols, Kind *counter, p4rt_id_t id, const Helpers::Counterlike&lt; ArchCounterExtern &gt; &amp;counterInstance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setMeterCommon</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_p4_runtime_arch_handler_common.html</anchorfile>
      <anchor>aee5329f95a75eea475203fc2c8c3ddab</anchor>
      <arglist>(const P4RuntimeSymbolTableIface &amp;symbols, Kind *meter, p4rt_id_t id, const Helpers::Counterlike&lt; ArchMeterExtern &gt; &amp;meterInstance)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::optional&lt; ActionProfile &gt;</type>
      <name>getActionProfile</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_p4_runtime_arch_handler_common.html</anchorfile>
      <anchor>a9cab04f895dfc59f14ed60e16ca50fd5</anchor>
      <arglist>(const IR::ExternBlock *instance)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::optional&lt; ActionProfile &gt;</type>
      <name>getActionProfile</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_p4_runtime_arch_handler_common.html</anchorfile>
      <anchor>a378b59ea701324ed00920f29c5fc739f</anchor>
      <arglist>(const IR::P4Table *table, ReferenceMap *refMap, TypeMap *typeMap)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const IR::Property *</type>
      <name>getTableImplementationProperty</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_p4_runtime_arch_handler_common.html</anchorfile>
      <anchor>a8e7308a229c6c70cd6edae4deae8e61b</anchor>
      <arglist>(const IR::P4Table *table)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; p4rt_id_t &gt;</type>
      <name>serializedInstances</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_p4_runtime_arch_handler_common.html</anchorfile>
      <anchor>a40b344a0adbaa702b79c3e62fe0e4e0f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::ControlPlaneAPI::Standard::P4RuntimeArchHandlerPNA</name>
    <filename>class_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_p4_runtime_arch_handler_p_n_a.html</filename>
    <base>P4::ControlPlaneAPI::Standard::P4RuntimeArchHandlerPSAPNA&lt; Arch::PNA &gt;</base>
  </compound>
  <compound kind="class">
    <name>P4::ControlPlaneAPI::Standard::P4RuntimeArchHandlerPSA</name>
    <filename>class_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_p4_runtime_arch_handler_p_s_a.html</filename>
    <base>P4::ControlPlaneAPI::Standard::P4RuntimeArchHandlerPSAPNA&lt; Arch::PSA &gt;</base>
  </compound>
  <compound kind="class">
    <name>P4::ControlPlaneAPI::Standard::P4RuntimeArchHandlerPSAPNA</name>
    <filename>class_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_p4_runtime_arch_handler_p_s_a_p_n_a.html</filename>
    <templarg>Arch arch</templarg>
    <base>P4::ControlPlaneAPI::Standard::P4RuntimeArchHandlerCommon&lt; arch &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>collectExternInstance</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_p4_runtime_arch_handler_p_s_a_p_n_a.html</anchorfile>
      <anchor>a85080dfe5d16e57e419e0d5817a35552</anchor>
      <arglist>(P4RuntimeSymbolTableIface *symbols, const IR::ExternBlock *externBlock) override</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; Digest &gt;</type>
      <name>getDigest</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_p4_runtime_arch_handler_p_s_a_p_n_a.html</anchorfile>
      <anchor>ade541826ba3313671b7298c6f699ffe7</anchor>
      <arglist>(const IR::Declaration_Instance *decl, p4configv1::P4TypeInfo *p4RtTypeInfo)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>getSupportsTimeout</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_p4_runtime_arch_handler_p_s_a_p_n_a.html</anchorfile>
      <anchor>a40da44bf75e33e6de2ec6a1d8421449c</anchor>
      <arglist>(const IR::P4Table *table)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::ControlPlaneAPI::Standard::P4RuntimeArchHandlerUBPF</name>
    <filename>class_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_p4_runtime_arch_handler_u_b_p_f.html</filename>
    <base>P4::ControlPlaneAPI::Standard::P4RuntimeArchHandlerCommon&lt; Arch::PSA &gt;</base>
  </compound>
  <compound kind="class">
    <name>P4::ControlPlaneAPI::Standard::P4RuntimeArchHandlerV1Model</name>
    <filename>class_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_p4_runtime_arch_handler_v1_model.html</filename>
    <base>P4::ControlPlaneAPI::Standard::P4RuntimeArchHandlerCommon&lt; Arch::V1MODEL &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>collectExternFunction</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_p4_runtime_arch_handler_v1_model.html</anchorfile>
      <anchor>a69fd01b3e8d8b79a06cd4a9792a72d9e</anchor>
      <arglist>(P4RuntimeSymbolTableIface *symbols, const P4::ExternFunction *externFunction) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::optional&lt; Digest &gt;</type>
      <name>getDigestCall</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_p4_runtime_arch_handler_v1_model.html</anchorfile>
      <anchor>a644a71eac18c4d45255c7b82ebdeb5d5</anchor>
      <arglist>(const P4::ExternFunction *function, ReferenceMap *refMap, P4::TypeMap *typeMap, p4configv1::P4TypeInfo *p4RtTypeInfo)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>getSupportsTimeout</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_p4_runtime_arch_handler_v1_model.html</anchorfile>
      <anchor>ab943b8714e378c7c53fd2f9bcbd39dbb</anchor>
      <arglist>(const IR::P4Table *table)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::Standard::PNAArchHandlerBuilder</name>
    <filename>struct_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_p_n_a_arch_handler_builder.html</filename>
    <base>P4::ControlPlaneAPI::P4RuntimeArchHandlerBuilderIface</base>
    <member kind="function">
      <type>P4RuntimeArchHandlerIface *</type>
      <name>operator()</name>
      <anchorfile>struct_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_p_n_a_arch_handler_builder.html</anchorfile>
      <anchor>a57242b198d3db1d3defc5b2cd74a354c</anchor>
      <arglist>(ReferenceMap *refMap, TypeMap *typeMap, const IR::ToplevelBlock *evaluatedProgram) const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::Standard::PNAArchHandlerBuilderForDPDK</name>
    <filename>struct_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_p_n_a_arch_handler_builder_for_d_p_d_k.html</filename>
    <base>P4::ControlPlaneAPI::P4RuntimeArchHandlerBuilderIface</base>
    <member kind="function">
      <type>P4::ControlPlaneAPI::P4RuntimeArchHandlerIface *</type>
      <name>operator()</name>
      <anchorfile>struct_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_p_n_a_arch_handler_builder_for_d_p_d_k.html</anchorfile>
      <anchor>af3dc2a369f0548902592f72959e1cc99</anchor>
      <arglist>(ReferenceMap *refMap, TypeMap *typeMap, const IR::ToplevelBlock *evaluatedProgram) const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::Standard::PSAArchHandlerBuilder</name>
    <filename>struct_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_p_s_a_arch_handler_builder.html</filename>
    <base>P4::ControlPlaneAPI::P4RuntimeArchHandlerBuilderIface</base>
    <member kind="function">
      <type>P4RuntimeArchHandlerIface *</type>
      <name>operator()</name>
      <anchorfile>struct_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_p_s_a_arch_handler_builder.html</anchorfile>
      <anchor>aca6d71bc254a18a81e0ced526a9610f2</anchor>
      <arglist>(ReferenceMap *refMap, TypeMap *typeMap, const IR::ToplevelBlock *evaluatedProgram) const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::Standard::PSAArchHandlerBuilderForDPDK</name>
    <filename>struct_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_p_s_a_arch_handler_builder_for_d_p_d_k.html</filename>
    <base>P4::ControlPlaneAPI::P4RuntimeArchHandlerBuilderIface</base>
    <member kind="function">
      <type>P4::ControlPlaneAPI::P4RuntimeArchHandlerIface *</type>
      <name>operator()</name>
      <anchorfile>struct_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_p_s_a_arch_handler_builder_for_d_p_d_k.html</anchorfile>
      <anchor>a1f034a5d35783b5e49d90cf37f1f5254</anchor>
      <arglist>(ReferenceMap *refMap, TypeMap *typeMap, const IR::ToplevelBlock *evaluatedProgram) const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::Standard::Register</name>
    <filename>struct_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_register.html</filename>
    <member kind="function" static="yes">
      <type>static std::optional&lt; Register &gt;</type>
      <name>from</name>
      <anchorfile>struct_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_register.html</anchorfile>
      <anchor>a584409a683ba11a1a4899bc6c634127c</anchor>
      <arglist>(const IR::ExternBlock *instance, const ReferenceMap *refMap, P4::TypeMap *typeMap, p4configv1::P4TypeInfo *p4RtTypeInfo)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::Standard::RegisterTraits</name>
    <filename>namespace_p4_1_1_control_plane_a_p_i_1_1_standard.html</filename>
    <anchor>struct_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_register_traits</anchor>
    <templarg>Arch arch</templarg>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::Standard::RegisterTraits&lt; Arch::PNA &gt;</name>
    <filename>struct_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_register_traits_3_01_arch_1_1_p_n_a_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::Standard::RegisterTraits&lt; Arch::PSA &gt;</name>
    <filename>struct_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_register_traits_3_01_arch_1_1_p_s_a_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::Standard::RegisterTraits&lt; Arch::V1MODEL &gt;</name>
    <filename>struct_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_register_traits_3_01_arch_1_1_v1_m_o_d_e_l_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::Standard::RegisterTraits&lt; Arch::V1MODEL2020 &gt;</name>
    <filename>struct_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_register_traits_3_01_arch_1_1_v1_m_o_d_e_l2020_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>P4::ControlPlaneAPI::Standard::SymbolType</name>
    <filename>class_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_symbol_type.html</filename>
    <base>P4::ControlPlaneAPI::P4RuntimeSymbolType</base>
  </compound>
  <compound kind="class">
    <name>P4::ControlPlaneAPI::Standard::SymbolTypeDPDK</name>
    <filename>class_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_symbol_type_d_p_d_k.html</filename>
    <base>P4::ControlPlaneAPI::Standard::SymbolType</base>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::Standard::UBPFArchHandlerBuilder</name>
    <filename>struct_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_u_b_p_f_arch_handler_builder.html</filename>
    <base>P4::ControlPlaneAPI::P4RuntimeArchHandlerBuilderIface</base>
    <member kind="function">
      <type>P4RuntimeArchHandlerIface *</type>
      <name>operator()</name>
      <anchorfile>struct_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_u_b_p_f_arch_handler_builder.html</anchorfile>
      <anchor>a37738c93f3dd2ceb168438126308ac5b</anchor>
      <arglist>(ReferenceMap *refMap, TypeMap *typeMap, const IR::ToplevelBlock *evaluatedProgram) const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::Standard::V1ModelArchHandlerBuilder</name>
    <filename>struct_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_v1_model_arch_handler_builder.html</filename>
    <base>P4::ControlPlaneAPI::P4RuntimeArchHandlerBuilderIface</base>
    <member kind="function">
      <type>P4RuntimeArchHandlerIface *</type>
      <name>operator()</name>
      <anchorfile>struct_p4_1_1_control_plane_a_p_i_1_1_standard_1_1_v1_model_arch_handler_builder.html</anchorfile>
      <anchor>a0516186a81eff688f411d2cf46c8175e</anchor>
      <arglist>(ReferenceMap *refMap, TypeMap *typeMap, const IR::ToplevelBlock *evaluatedProgram) const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4::ControlPlaneAPI::TranslationAnnotation</name>
    <filename>namespace_p4_1_1_control_plane_a_p_i.html</filename>
    <anchor>struct_p4_1_1_control_plane_a_p_i_1_1_translation_annotation</anchor>
  </compound>
  <compound kind="class">
    <name>P4::ControlPlaneAPI::TypeSpecConverter</name>
    <filename>class_p4_1_1_control_plane_a_p_i_1_1_type_spec_converter.html</filename>
    <base>Inspector</base>
    <member kind="function" static="yes">
      <type>static const ::p4::config::v1::P4DataTypeSpec *</type>
      <name>convert</name>
      <anchorfile>class_p4_1_1_control_plane_a_p_i_1_1_type_spec_converter.html</anchorfile>
      <anchor>a988bec5306f75566d0cc97eb2632b586</anchor>
      <arglist>(const P4::ReferenceMap *refMap, P4::TypeMap *typeMap, const IR::Type *type, ::p4::config::v1::P4TypeInfo *typeInfo)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::ConvertEnums</name>
    <filename>class_p4_1_1_convert_enums.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::ConvertErrors</name>
    <filename>class_p4_1_1_convert_errors.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::CopySrcInfo</name>
    <filename>class_p4_1_1_copy_src_info.html</filename>
    <base>Transform</base>
    <member kind="function">
      <type>const IR::Node *</type>
      <name>preorder</name>
      <anchorfile>class_p4_1_1_copy_src_info.html</anchorfile>
      <anchor>a3369dfdaec977f4dda51b68c9f7d82d9</anchor>
      <arglist>(IR::Node *node)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::CopyStructures</name>
    <filename>class_p4_1_1_copy_structures.html</filename>
    <base>PassRepeated</base>
  </compound>
  <compound kind="class">
    <name>P4::Coverage::CollectNodes</name>
    <filename>class_p4_1_1_coverage_1_1_collect_nodes.html</filename>
    <base>Inspector</base>
    <member kind="function">
      <type>const CoverageSet &amp;</type>
      <name>getCoverableNodes</name>
      <anchorfile>class_p4_1_1_coverage_1_1_collect_nodes.html</anchorfile>
      <anchor>a9571bc7cf0de727f7e17f13f46aa435c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4::Coverage::CoverageOptions</name>
    <filename>namespace_p4_1_1_coverage.html</filename>
    <anchor>struct_p4_1_1_coverage_1_1_coverage_options</anchor>
    <member kind="variable">
      <type>bool</type>
      <name>coverActions</name>
      <anchorfile>namespace_p4_1_1_coverage.html</anchorfile>
      <anchor>a62cbb237ffbf9465884cc5eb37832802</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>coverStatements</name>
      <anchorfile>namespace_p4_1_1_coverage.html</anchorfile>
      <anchor>a2a3d638920ba9282563d3f4c90b8df3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>coverTableEntries</name>
      <anchorfile>namespace_p4_1_1_coverage.html</anchorfile>
      <anchor>af76b789b10235cedf806d8bdd178394f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>onlyCoveringTests</name>
      <anchorfile>namespace_p4_1_1_coverage.html</anchorfile>
      <anchor>a3a23a5e6cddf38098f63c067e9005b40</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4::Coverage::SourceIdCmp</name>
    <filename>struct_p4_1_1_coverage_1_1_source_id_cmp.html</filename>
  </compound>
  <compound kind="class">
    <name>P4::CreateBuiltins</name>
    <filename>class_p4_1_1_create_builtins.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::CreateSpecializedTypes</name>
    <filename>class_p4_1_1_create_specialized_types.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::CreateStructInitializers</name>
    <filename>class_p4_1_1_create_struct_initializers.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DeclarationLookup</name>
    <filename>class_p4_1_1_declaration_lookup.html</filename>
  </compound>
  <compound kind="class">
    <name>P4::DefaultArguments</name>
    <filename>class_p4_1_1_default_arguments.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::DefaultValues</name>
    <filename>class_p4_1_1_default_values.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::Definitions</name>
    <filename>class_p4_1_1_definitions.html</filename>
    <base>IHasDbPrint</base>
    <member kind="function">
      <type>Definitions *</type>
      <name>writes</name>
      <anchorfile>class_p4_1_1_definitions.html</anchorfile>
      <anchor>a307f23c336cfd27a90ca195e134cc978</anchor>
      <arglist>(ProgramPoint point, const LocationSet *locations) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::Deprecated</name>
    <filename>class_p4_1_1_deprecated.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::DiscoverActionsInlining</name>
    <filename>class_p4_1_1_discover_actions_inlining.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::DiscoverFunctionsInlining</name>
    <filename>class_p4_1_1_discover_functions_inlining.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::DiscoverInlining</name>
    <filename>class_p4_1_1_discover_inlining.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::DoBindTypeVariables</name>
    <filename>class_p4_1_1_do_bind_type_variables.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoCheckConstants</name>
    <filename>class_p4_1_1_do_check_constants.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::DoCheckCoreMethods</name>
    <filename>class_p4_1_1_do_check_core_methods.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::DoConstantFolding</name>
    <filename>class_p4_1_1_do_constant_folding.html</filename>
    <base>Transform</base>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>Result</name>
      <anchorfile>class_p4_1_1_do_constant_folding.html</anchorfile>
      <anchor>a2342289cbde2a320fa9887e509f4a30a</anchor>
      <arglist></arglist>
      <enumvalue file="class_p4_1_1_do_constant_folding.html" anchor="a2342289cbde2a320fa9887e509f4a30aa93cba07454f06a4a960172bbd6e2a435">Yes</enumvalue>
      <enumvalue file="class_p4_1_1_do_constant_folding.html" anchor="a2342289cbde2a320fa9887e509f4a30aabafd7322c6e97d25b6299b5d6fe8920b">No</enumvalue>
      <enumvalue file="class_p4_1_1_do_constant_folding.html" anchor="a2342289cbde2a320fa9887e509f4a30aa0376265f1d915c2504844d6ed96becd3">DontKnow</enumvalue>
    </member>
    <member kind="function" protection="protected">
      <type>const IR::Node *</type>
      <name>binary</name>
      <anchorfile>class_p4_1_1_do_constant_folding.html</anchorfile>
      <anchor>a5c8ac09d49d814a82da9ef7e1d706c91</anchor>
      <arglist>(const IR::Operation_Binary *op, std::function&lt; big_int(big_int, big_int)&gt; func, bool saturating=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IR::Constant *</type>
      <name>cast</name>
      <anchorfile>class_p4_1_1_do_constant_folding.html</anchorfile>
      <anchor>ab0e867f5a180e573f4591ab391747efe</anchor>
      <arglist>(const IR::Constant *node, unsigned base, const IR::Type_Bits *type) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IR::Node *</type>
      <name>compare</name>
      <anchorfile>class_p4_1_1_do_constant_folding.html</anchorfile>
      <anchor>af128dd44c8dc8177f7a16c5762fbaf56</anchor>
      <arglist>(const IR::Operation_Binary *op)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IR::Expression *</type>
      <name>getConstant</name>
      <anchorfile>class_p4_1_1_do_constant_folding.html</anchorfile>
      <anchor>aca5b04b93f3560d362da4b1a62acdfa9</anchor>
      <arglist>(const IR::Expression *expr) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Result</type>
      <name>setContains</name>
      <anchorfile>class_p4_1_1_do_constant_folding.html</anchorfile>
      <anchor>a92320f78791dd5ec5ad5f47be63a62db</anchor>
      <arglist>(const IR::Expression *keySet, const IR::Expression *constant) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IR::Node *</type>
      <name>shift</name>
      <anchorfile>class_p4_1_1_do_constant_folding.html</anchorfile>
      <anchor>a459b29cbeb3a5438d30f093ac296f971</anchor>
      <arglist>(const IR::Operation_Binary *op)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; const IR::Declaration_Constant *, const IR::Expression * &gt;</type>
      <name>constants</name>
      <anchorfile>class_p4_1_1_do_constant_folding.html</anchorfile>
      <anchor>a4c3e1735b06cb02e7c8d60eb4c8fc9a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ReferenceMap *</type>
      <name>refMap</name>
      <anchorfile>class_p4_1_1_do_constant_folding.html</anchorfile>
      <anchor>a194629e6e4025b15b50be71e830fd757</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const TypeMap *</type>
      <name>typeMap</name>
      <anchorfile>class_p4_1_1_do_constant_folding.html</anchorfile>
      <anchor>a699067d48b4fcc0ec993fa5397f2d2c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>typesKnown</name>
      <anchorfile>class_p4_1_1_do_constant_folding.html</anchorfile>
      <anchor>a9e9a9f024f9de951a7a6ffa949c0a2b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>warnings</name>
      <anchorfile>class_p4_1_1_do_constant_folding.html</anchorfile>
      <anchor>a8fda82bf4aa6421c6ea6c76eb4c35957</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::DoConvertEnums</name>
    <filename>class_p4_1_1_do_convert_enums.html</filename>
    <base>Transform</base>
    <member kind="function">
      <type>const IR::Node *</type>
      <name>postorder</name>
      <anchorfile>class_p4_1_1_do_convert_enums.html</anchorfile>
      <anchor>a9ca6f838994e2ffca8f28f2258e5383d</anchor>
      <arglist>(IR::Member *expression) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::DoConvertErrors</name>
    <filename>class_p4_1_1_do_convert_errors.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoCopyStructures</name>
    <filename>class_p4_1_1_do_copy_structures.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoDefaultArguments</name>
    <filename>class_p4_1_1_do_default_arguments.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoDefaultValues</name>
    <filename>class_p4_1_1_do_default_values.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoEliminateInvalidHeaders</name>
    <filename>class_p4_1_1_do_eliminate_invalid_headers.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoEliminateSerEnums</name>
    <filename>class_p4_1_1_do_eliminate_ser_enums.html</filename>
    <base>Transform</base>
    <member kind="function">
      <type>const IR::Node *</type>
      <name>postorder</name>
      <anchorfile>class_p4_1_1_do_eliminate_ser_enums.html</anchorfile>
      <anchor>a68f86be409d86a832b75ac7a0872bbae</anchor>
      <arglist>(IR::Member *expression) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::DoEliminateSwitch</name>
    <filename>class_p4_1_1_do_eliminate_switch.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoEntryPriorities</name>
    <filename>class_p4_1_1_do_entry_priorities.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoExpandEmit</name>
    <filename>class_p4_1_1_do_expand_emit.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoExpandLookahead</name>
    <filename>class_p4_1_1_do_expand_lookahead.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoFlattenHeaderUnion</name>
    <filename>class_p4_1_1_do_flatten_header_union.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoFlattenHeaderUnionStack</name>
    <filename>class_p4_1_1_do_flatten_header_union_stack.html</filename>
    <base>P4::DoFlattenHeaderUnion</base>
  </compound>
  <compound kind="class">
    <name>P4::DoGlobalCopyPropagation</name>
    <filename>class_p4_1_1_do_global_copy_propagation.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoHandleNoMatch</name>
    <filename>class_p4_1_1_do_handle_no_match.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoInstantiateCalls</name>
    <filename>class_p4_1_1_do_instantiate_calls.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoLocalCopyPropagation</name>
    <filename>class_p4_1_1_do_local_copy_propagation.html</filename>
    <base>ControlFlowVisitor</base>
    <base protection="private">Transform</base>
    <base protection="private">P4WriteContext</base>
    <class kind="class">P4::DoLocalCopyPropagation::ElimDead</class>
    <class kind="class">P4::DoLocalCopyPropagation::RewriteTableKeys</class>
  </compound>
  <compound kind="class">
    <name>P4::DoLocalCopyPropagation::ElimDead</name>
    <filename>class_p4_1_1_do_local_copy_propagation_1_1_elim_dead.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoLocalCopyPropagation::RewriteTableKeys</name>
    <filename>class_p4_1_1_do_local_copy_propagation_1_1_rewrite_table_keys.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoMoveActionsToTables</name>
    <filename>class_p4_1_1_do_move_actions_to_tables.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DontcareArgs</name>
    <filename>class_p4_1_1_dontcare_args.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoOrderArguments</name>
    <filename>class_p4_1_1_do_order_arguments.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoRemoveActionParameters</name>
    <filename>class_p4_1_1_do_remove_action_parameters.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoRemoveAssertAssume</name>
    <filename>class_p4_1_1_do_remove_assert_assume.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoRemoveExits</name>
    <filename>class_p4_1_1_do_remove_exits.html</filename>
    <base>P4::DoRemoveReturns</base>
  </compound>
  <compound kind="class">
    <name>P4::DoRemoveLeftSlices</name>
    <filename>class_p4_1_1_do_remove_left_slices.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoRemoveMiss</name>
    <filename>class_p4_1_1_do_remove_miss.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoRemoveParserControlFlow</name>
    <filename>class_p4_1_1_do_remove_parser_control_flow.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoRemoveReturns</name>
    <filename>class_p4_1_1_do_remove_returns.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoRemoveSelectBooleans</name>
    <filename>class_p4_1_1_do_remove_select_booleans.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoReplaceNewtype</name>
    <filename>class_p4_1_1_do_replace_newtype.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoReplaceSelectRange</name>
    <filename>class_p4_1_1_do_replace_select_range.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoReplaceTuples</name>
    <filename>class_p4_1_1_do_replace_tuples.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoReplaceTypedef</name>
    <filename>class_p4_1_1_do_replace_typedef.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoResetHeaders</name>
    <filename>class_p4_1_1_do_reset_headers.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoSetHeaders</name>
    <filename>class_p4_1_1_do_set_headers.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoSimplifyControlFlow</name>
    <filename>class_p4_1_1_do_simplify_control_flow.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoSimplifyDefUse</name>
    <filename>class_p4_1_1_do_simplify_def_use.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoSimplifyExpressions</name>
    <filename>class_p4_1_1_do_simplify_expressions.html</filename>
    <base>Transform</base>
    <base protection="private">P4WriteContext</base>
  </compound>
  <compound kind="class">
    <name>P4::DoSimplifyKey</name>
    <filename>class_p4_1_1_do_simplify_key.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoSimplifyParsers</name>
    <filename>class_p4_1_1_do_simplify_parsers.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoSimplifySelectCases</name>
    <filename>class_p4_1_1_do_simplify_select_cases.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoSimplifySwitch</name>
    <filename>class_p4_1_1_do_simplify_switch.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoSingleArgumentSelect</name>
    <filename>class_p4_1_1_do_single_argument_select.html</filename>
    <base>Modifier</base>
    <class kind="struct">P4::DoSingleArgumentSelect::Pair</class>
  </compound>
  <compound kind="struct">
    <name>P4::DoSingleArgumentSelect::Pair</name>
    <filename>struct_p4_1_1_do_single_argument_select_1_1_pair.html</filename>
  </compound>
  <compound kind="class">
    <name>P4::DoStaticAssert</name>
    <filename>class_p4_1_1_do_static_assert.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoStrengthReduction</name>
    <filename>class_p4_1_1_do_strength_reduction.html</filename>
    <base>Transform</base>
    <member kind="function">
      <type>const IR::Node *</type>
      <name>postorder</name>
      <anchorfile>class_p4_1_1_do_strength_reduction.html</anchorfile>
      <anchor>a09d63050ed80cb7244cd437211d4fb5c</anchor>
      <arglist>(IR::Cmpl *expr) override</arglist>
      <docanchor file="class_p4_1_1_do_strength_reduction.html" title="Methods">Visitor</docanchor>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::DoSynthesizeActions</name>
    <filename>class_p4_1_1_do_synthesize_actions.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoTableHit</name>
    <filename>class_p4_1_1_do_table_hit.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DoTableKeyNames</name>
    <filename>class_p4_1_1_do_table_key_names.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::DuplicateActions</name>
    <filename>class_p4_1_1_duplicate_actions.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::EliminateInvalidHeaders</name>
    <filename>class_p4_1_1_eliminate_invalid_headers.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::EliminateNewtype</name>
    <filename>class_p4_1_1_eliminate_newtype.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::EliminateSerEnums</name>
    <filename>class_p4_1_1_eliminate_ser_enums.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::EliminateSubparserCalls</name>
    <filename>class_p4_1_1_eliminate_subparser_calls.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::EliminateSwitch</name>
    <filename>class_p4_1_1_eliminate_switch.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::EliminateTuples</name>
    <filename>class_p4_1_1_eliminate_tuples.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::EliminateTypedef</name>
    <filename>class_p4_1_1_eliminate_typedef.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::EntryPriorities</name>
    <filename>class_p4_1_1_entry_priorities.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::EnumInstance</name>
    <filename>class_p4_1_1_enum_instance.html</filename>
    <base>P4::InstanceBase</base>
    <member kind="function" static="yes">
      <type>static EnumInstance *</type>
      <name>resolve</name>
      <anchorfile>class_p4_1_1_enum_instance.html</anchorfile>
      <anchor>a6472e964fe6d375e2b87ccd3cc46302b</anchor>
      <arglist>(const IR::Expression *expression, const P4::TypeMap *typeMap)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::EnumOn32Bits</name>
    <filename>class_p4_1_1_enum_on32_bits.html</filename>
    <base>P4::ChooseEnumRepresentation</base>
  </compound>
  <compound kind="class">
    <name>P4::EnumRepresentation</name>
    <filename>class_p4_1_1_enum_representation.html</filename>
  </compound>
  <compound kind="class">
    <name>P4::EqualityConstraint</name>
    <filename>class_p4_1_1_equality_constraint.html</filename>
    <base>P4::BinaryConstraint</base>
    <member kind="function">
      <type>bool</type>
      <name>reportError</name>
      <anchorfile>class_p4_1_1_equality_constraint.html</anchorfile>
      <anchor>a0ee16f599d0c1c462799b7b36c781a79</anchor>
      <arglist>(const TypeVariableSubstitution *subst, const char *format, Args &amp;&amp;...args) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::Evaluator</name>
    <filename>class_p4_1_1_evaluator.html</filename>
    <base>Inspector</base>
    <base>P4::IHasBlock</base>
    <member kind="function">
      <type>std::vector&lt; const IR::CompileTimeValue * &gt; *</type>
      <name>evaluateArguments</name>
      <anchorfile>class_p4_1_1_evaluator.html</anchorfile>
      <anchor>aae821a8fa47d6235ff77a743e44cd451</anchor>
      <arglist>(const IR::ParameterList *parameters, const IR::Vector&lt; IR::Argument &gt; *arguments, IR::Block *context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasValue</name>
      <anchorfile>class_p4_1_1_evaluator.html</anchorfile>
      <anchor>add8de32b08a1c4d79369bbec7165a58e</anchor>
      <arglist>(const IR::Node *node) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>class_p4_1_1_evaluator.html</anchorfile>
      <anchor>a052353f7cc0b744a07b457ddff088487</anchor>
      <arglist>(const IR::Node *node, const IR::CompileTimeValue *constant)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::EvaluatorPass</name>
    <filename>class_p4_1_1_evaluator_pass.html</filename>
    <base>PassManager</base>
    <base>P4::IHasBlock</base>
  </compound>
  <compound kind="class">
    <name>P4::ExpandEmit</name>
    <filename>class_p4_1_1_expand_emit.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::ExpandLookahead</name>
    <filename>class_p4_1_1_expand_lookahead.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::Explain</name>
    <filename>class_p4_1_1_explain.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::ExpressionEvaluator</name>
    <filename>class_p4_1_1_expression_evaluator.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::ExternConstructorCall</name>
    <filename>class_p4_1_1_extern_constructor_call.html</filename>
    <base>P4::ConstructorCall</base>
  </compound>
  <compound kind="class">
    <name>P4::ExternFunction</name>
    <filename>class_p4_1_1_extern_function.html</filename>
    <base>P4::MethodInstance</base>
  </compound>
  <compound kind="struct">
    <name>P4::ExternInstance</name>
    <filename>struct_p4_1_1_extern_instance.html</filename>
    <member kind="function" static="yes">
      <type>static std::optional&lt; ExternInstance &gt;</type>
      <name>resolve</name>
      <anchorfile>struct_p4_1_1_extern_instance.html</anchorfile>
      <anchor>a382887ef12023e038ef8b4af7096baa5</anchor>
      <arglist>(const IR::Expression *expr, ReferenceMap *refMap, TypeMap *typeMap, const std::optional&lt; cstring &gt; &amp;defaultName=std::nullopt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::optional&lt; ExternInstance &gt;</type>
      <name>resolve</name>
      <anchorfile>struct_p4_1_1_extern_instance.html</anchorfile>
      <anchor>a3cccebc4ad05031ab3d5bbf25cebe99c</anchor>
      <arglist>(const IR::PathExpression *path, ReferenceMap *refMap, TypeMap *typeMap)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::ExternInstantiation</name>
    <filename>class_p4_1_1_extern_instantiation.html</filename>
    <base>P4::Instantiation</base>
  </compound>
  <compound kind="class">
    <name>P4::ExternMethod</name>
    <filename>class_p4_1_1_extern_method.html</filename>
    <base>P4::MethodInstance</base>
    <member kind="function">
      <type>std::vector&lt; const IR::IDeclaration * &gt;</type>
      <name>mayCall</name>
      <anchorfile>class_p4_1_1_extern_method.html</anchorfile>
      <anchor>a35cd59502e1e7502250e9d4535d60795</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::FillEnumMap</name>
    <filename>class_p4_1_1_fill_enum_map.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::FindActionParameters</name>
    <filename>class_p4_1_1_find_action_parameters.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::FindFunctionSpecializations</name>
    <filename>class_p4_1_1_find_function_specializations.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::FindGlobalActionUses</name>
    <filename>class_p4_1_1_find_global_action_uses.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::FindHeaderTypesToReplace</name>
    <filename>class_p4_1_1_find_header_types_to_replace.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::FindParameters</name>
    <filename>class_p4_1_1_find_parameters.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::FindRedundantParsers</name>
    <filename>class_p4_1_1_find_redundant_parsers.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::FindRepeatedActionUses</name>
    <filename>class_p4_1_1_find_repeated_action_uses.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::FindSpecializations</name>
    <filename>class_p4_1_1_find_specializations.html</filename>
    <base>Inspector</base>
    <member kind="function">
      <type>bool</type>
      <name>noParameters</name>
      <anchorfile>class_p4_1_1_find_specializations.html</anchorfile>
      <anchor>a6cf246009ad4114ed2e0e06ee4167c6b</anchor>
      <arglist>(const IR::IContainer *container)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::FindSymbols</name>
    <filename>class_p4_1_1_find_symbols.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::FindTypesInLogMsgInvocationToReplace</name>
    <filename>class_p4_1_1_find_types_in_log_msg_invocation_to_replace.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::FindTypeSpecializations</name>
    <filename>class_p4_1_1_find_type_specializations.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::FindTypesToReplace</name>
    <filename>class_p4_1_1_find_types_to_replace.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::FindVariableValues</name>
    <filename>class_p4_1_1_find_variable_values.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::FlattenHeaders</name>
    <filename>class_p4_1_1_flatten_headers.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::FlattenHeaderUnion</name>
    <filename>class_p4_1_1_flatten_header_union.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::FlattenInterfaceStructs</name>
    <filename>class_p4_1_1_flatten_interface_structs.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::FlattenLogMsg</name>
    <filename>class_p4_1_1_flatten_log_msg.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::FrontEnd</name>
    <filename>class_p4_1_1_front_end.html</filename>
  </compound>
  <compound kind="class">
    <name>P4::FrontEndPolicy</name>
    <filename>class_p4_1_1_front_end_policy.html</filename>
    <base>P4::RemoveUnusedPolicy</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstantFoldingPolicy *</type>
      <name>getConstantFoldingPolicy</name>
      <anchorfile>class_p4_1_1_front_end_policy.html</anchorfile>
      <anchor>a8b5f51f92db63dea3da16a94bfb98a03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; DebugHook &gt;</type>
      <name>getDebugHooks</name>
      <anchorfile>class_p4_1_1_front_end_policy.html</anchorfile>
      <anchor>abe005cdad5f19114c7a91b3bbd9f923b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParseAnnotations *</type>
      <name>getParseAnnotations</name>
      <anchorfile>class_p4_1_1_front_end_policy.html</anchorfile>
      <anchor>ae2f8eb05332dffdbfff3326c3afa12bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>optimize</name>
      <anchorfile>class_p4_1_1_front_end_policy.html</anchorfile>
      <anchor>af373947a553e5ba14e0dc59c8cb41c00</anchor>
      <arglist>(const CompilerOptions &amp;options) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>skipSideEffectOrdering</name>
      <anchorfile>class_p4_1_1_front_end_policy.html</anchorfile>
      <anchor>aa8659c971164d1f31b8512563bca43a2</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::FunctionCall</name>
    <filename>class_p4_1_1_function_call.html</filename>
    <base>P4::MethodInstance</base>
  </compound>
  <compound kind="class">
    <name>P4::FunctionsInliner</name>
    <filename>class_p4_1_1_functions_inliner.html</filename>
    <base>P4::AbstractInliner&lt; FunctionsInlineList, FunctionsInlineWorkList &gt;</base>
  </compound>
  <compound kind="struct">
    <name>P4::FunctionSpecialization</name>
    <filename>struct_p4_1_1_function_specialization.html</filename>
    <member kind="variable">
      <type>const IR::Node *</type>
      <name>insertBefore</name>
      <anchorfile>struct_p4_1_1_function_specialization.html</anchorfile>
      <anchor>a4e97b486c1075ebc853ac26d1e59635b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IR::MethodCallExpression *</type>
      <name>invocation</name>
      <anchorfile>struct_p4_1_1_function_specialization.html</anchorfile>
      <anchor>a7f82621d5914996fd7353bb943a70da3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cstring</type>
      <name>name</name>
      <anchorfile>struct_p4_1_1_function_specialization.html</anchorfile>
      <anchor>ae1f16c29e4630726ef0f2aca56ea6deb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IR::Function *</type>
      <name>original</name>
      <anchorfile>struct_p4_1_1_function_specialization.html</anchorfile>
      <anchor>a549e5892ca7777402a996bfc550cf77c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IR::Function *</type>
      <name>specialized</name>
      <anchorfile>struct_p4_1_1_function_specialization.html</anchorfile>
      <anchor>a49538efc286d35a2c0f3fcba2a8fbfc6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4::FunctionSpecializationMap</name>
    <filename>struct_p4_1_1_function_specialization_map.html</filename>
  </compound>
  <compound kind="class">
    <name>P4::GeneralInliner</name>
    <filename>class_p4_1_1_general_inliner.html</filename>
    <base>P4::AbstractInliner&lt; InlineList, InlineSummary &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>inline_subst</name>
      <anchorfile>class_p4_1_1_general_inliner.html</anchorfile>
      <anchor>a5bc6a54a3d9b4fd516735a3a0122f220</anchor>
      <arglist>(P4Block *caller, IR::IndexedVector&lt; IR::Declaration &gt; P4Block::*blockLocals, const P4BlockType *P4Block::*blockType)</arglist>
    </member>
    <member kind="function">
      <type>const IR::Node *</type>
      <name>preorder</name>
      <anchorfile>class_p4_1_1_general_inliner.html</anchorfile>
      <anchor>a9d808b459f36ec0273d601328a4a6348</anchor>
      <arglist>(IR::ParserState *state) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::GlobalActionReplacements</name>
    <filename>class_p4_1_1_global_action_replacements.html</filename>
  </compound>
  <compound kind="class">
    <name>P4::GlobalCopyPropagation</name>
    <filename>class_p4_1_1_global_copy_propagation.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::HandleNoMatch</name>
    <filename>class_p4_1_1_handle_no_match.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::HandleValidityHeaderUnion</name>
    <filename>class_p4_1_1_handle_validity_header_union.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::HasExits</name>
    <filename>class_p4_1_1_has_exits.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::HasTableApply</name>
    <filename>class_p4_1_1_has_table_apply.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::HierarchicalNames</name>
    <filename>class_p4_1_1_hierarchical_names.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::HSIndexContretizer</name>
    <filename>class_p4_1_1_h_s_index_contretizer.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::HSIndexFinder</name>
    <filename>class_p4_1_1_h_s_index_finder.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::HSIndexSimplifier</name>
    <filename>class_p4_1_1_h_s_index_simplifier.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::HSIndexTransform</name>
    <filename>class_p4_1_1_h_s_index_transform.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::IfInParser</name>
    <filename>class_p4_1_1_if_in_parser.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::IHasBlock</name>
    <filename>class_p4_1_1_i_has_block.html</filename>
  </compound>
  <compound kind="class">
    <name>P4::IndexedLocation</name>
    <filename>class_p4_1_1_indexed_location.html</filename>
    <base>P4::StorageLocation</base>
  </compound>
  <compound kind="class">
    <name>P4::Inline</name>
    <filename>class_p4_1_1_inline.html</filename>
    <base>PassRepeated</base>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isAnnotationNoPropagate</name>
      <anchorfile>class_p4_1_1_inline.html</anchorfile>
      <anchor>a14d2ade29f90e7baedc3f3e0e6e31789</anchor>
      <arglist>(cstring name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setAnnotationNoPropagate</name>
      <anchorfile>class_p4_1_1_inline.html</anchorfile>
      <anchor>aa4cf3c57bcf2d840294a9d27f69647de</anchor>
      <arglist>(cstring name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::InlineActions</name>
    <filename>class_p4_1_1_inline_actions.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::InlineDriver</name>
    <filename>class_p4_1_1_inline_driver.html</filename>
    <templarg>class InlineList</templarg>
    <templarg>class InlineWorkList</templarg>
    <base>Visitor</base>
  </compound>
  <compound kind="class">
    <name>P4::InlineFunctions</name>
    <filename>class_p4_1_1_inline_functions.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::InlineList</name>
    <filename>class_p4_1_1_inline_list.html</filename>
  </compound>
  <compound kind="class">
    <name>P4::InlinePass</name>
    <filename>class_p4_1_1_inline_pass.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="struct">
    <name>P4::InlineSummary</name>
    <filename>struct_p4_1_1_inline_summary.html</filename>
    <base>IHasDbPrint</base>
    <class kind="struct">P4::InlineSummary::PerCaller</class>
  </compound>
  <compound kind="struct">
    <name>P4::InlineSummary::PerCaller</name>
    <filename>struct_p4_1_1_inline_summary_1_1_per_caller.html</filename>
    <class kind="struct">P4::InlineSummary::PerCaller::key_equal</class>
    <class kind="struct">P4::InlineSummary::PerCaller::key_hash</class>
    <member kind="typedef">
      <type>std::pair&lt; const IR::MethodCallStatement *, const IR::PathExpression * &gt;</type>
      <name>InlinedInvocationInfo</name>
      <anchorfile>struct_p4_1_1_inline_summary_1_1_per_caller.html</anchorfile>
      <anchor>af3c973a40484f0dc64e2e3a12127c769</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const IR::MethodCallStatement *</type>
      <name>uniqueCaller</name>
      <anchorfile>struct_p4_1_1_inline_summary_1_1_per_caller.html</anchorfile>
      <anchor>a1a447ec67084a4e75395cdbb423dccc7</anchor>
      <arglist>(const IR::Declaration_Instance *instance) const</arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; const IR::MethodCallStatement *, const IR::Declaration_Instance * &gt;</type>
      <name>callToInstance</name>
      <anchorfile>struct_p4_1_1_inline_summary_1_1_per_caller.html</anchorfile>
      <anchor>a8157dbfe1e7522d2f341ed504db67074</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; const IR::Declaration_Instance *, const IR::IContainer * &gt;</type>
      <name>declToCallee</name>
      <anchorfile>struct_p4_1_1_inline_summary_1_1_per_caller.html</anchorfile>
      <anchor>a389ebb63e1408de17c1a32de48a6cc00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unordered_map&lt; const InlinedInvocationInfo, const IR::ID, key_hash, key_equal &gt;</type>
      <name>invocationToState</name>
      <anchorfile>struct_p4_1_1_inline_summary_1_1_per_caller.html</anchorfile>
      <anchor>a3e83f1eb7e5c34ebb51693cb1c88e52e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; const IR::Declaration_Instance *, PerInstanceSubstitutions * &gt;</type>
      <name>substitutions</name>
      <anchorfile>struct_p4_1_1_inline_summary_1_1_per_caller.html</anchorfile>
      <anchor>a9265f95d237e30b33bc9cc0f3898b76b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4::InlineSummary::PerCaller::key_equal</name>
    <filename>struct_p4_1_1_inline_summary_1_1_per_caller_1_1key__equal.html</filename>
  </compound>
  <compound kind="struct">
    <name>P4::InlineSummary::PerCaller::key_hash</name>
    <filename>struct_p4_1_1_inline_summary_1_1_per_caller_1_1key__hash.html</filename>
  </compound>
  <compound kind="class">
    <name>P4::InstanceBase</name>
    <filename>class_p4_1_1_instance_base.html</filename>
    <base>ICastable</base>
    <member kind="variable">
      <type>ParameterSubstitution</type>
      <name>substitution</name>
      <anchorfile>class_p4_1_1_instance_base.html</anchorfile>
      <anchor>a399ebaf2c85626454ff290e7da5d2ed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TypeVariableSubstitution</type>
      <name>typeSubstitution</name>
      <anchorfile>class_p4_1_1_instance_base.html</anchorfile>
      <anchor>a0629ebeb5630db4988f2e1fdc4a03cd8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::InstantiateDirectCalls</name>
    <filename>class_p4_1_1_instantiate_direct_calls.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::Instantiation</name>
    <filename>class_p4_1_1_instantiation.html</filename>
    <base>P4::InstanceBase</base>
  </compound>
  <compound kind="class">
    <name>P4::IOptionPragmaParser</name>
    <filename>class_p4_1_1_i_option_pragma_parser.html</filename>
  </compound>
  <compound kind="class">
    <name>P4::IsLikeLeftValue</name>
    <filename>class_p4_1_1_is_like_left_value.html</filename>
    <base>P4::KeyIsSimple</base>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::IsMask</name>
    <filename>class_p4_1_1_is_mask.html</filename>
    <base>P4::IsLikeLeftValue</base>
  </compound>
  <compound kind="class">
    <name>P4::IsNonConstantArrayIndex</name>
    <filename>class_p4_1_1_is_non_constant_array_index.html</filename>
    <base>P4::KeyIsSimple</base>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::IsValid</name>
    <filename>class_p4_1_1_is_valid.html</filename>
    <base>P4::KeyIsSimple</base>
  </compound>
  <compound kind="class">
    <name>P4::KeyIsSimple</name>
    <filename>class_p4_1_1_key_is_simple.html</filename>
  </compound>
  <compound kind="class">
    <name>P4::KeyNameGenerator</name>
    <filename>class_p4_1_1_key_name_generator.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::KeySideEffect</name>
    <filename>class_p4_1_1_key_side_effect.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::LocalCopyPropagation</name>
    <filename>class_p4_1_1_local_copy_propagation.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::LocalizeActions</name>
    <filename>class_p4_1_1_localize_actions.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::LocalizeAllActions</name>
    <filename>class_p4_1_1_localize_all_actions.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="struct">
    <name>P4::LocationPath</name>
    <filename>struct_p4_1_1_location_path.html</filename>
    <base>IHasDbPrint</base>
    <member kind="function">
      <type>bool</type>
      <name>isPrefix</name>
      <anchorfile>struct_p4_1_1_location_path.html</anchorfile>
      <anchor>ab5866c9f57cedc8da6f9b8ad2fff5cdd</anchor>
      <arglist>(const LocationPath *other) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::LocationSet</name>
    <filename>class_p4_1_1_location_set.html</filename>
    <base>IHasDbPrint</base>
    <member kind="function">
      <type>const LocationSet *</type>
      <name>canonicalize</name>
      <anchorfile>class_p4_1_1_location_set.html</anchorfile>
      <anchor>ae4591c22590a2de50e249a936f490458</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::MethodInstance</name>
    <filename>class_p4_1_1_method_instance.html</filename>
    <base>P4::InstanceBase</base>
    <member kind="function" static="yes">
      <type>static MethodInstance *</type>
      <name>resolve</name>
      <anchorfile>class_p4_1_1_method_instance.html</anchorfile>
      <anchor>a9499378f818842d24e938a7a87d7a5a8</anchor>
      <arglist>(const IR::MethodCallExpression *mce, DeclarationLookup *refMap, TypeMap *typeMap, bool useExpressionType=false, const Visitor::Context *ctxt=nullptr, bool incomplete=false)</arglist>
    </member>
    <member kind="variable">
      <type>const IR::Type_MethodBase *</type>
      <name>actualMethodType</name>
      <anchorfile>class_p4_1_1_method_instance.html</anchorfile>
      <anchor>a653648c4a516374246d360db27ea8f2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IR::IDeclaration *</type>
      <name>object</name>
      <anchorfile>class_p4_1_1_method_instance.html</anchorfile>
      <anchor>af69ff9ec3a921b6742f93d5b6039b08c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IR::Type_MethodBase *</type>
      <name>originalMethodType</name>
      <anchorfile>class_p4_1_1_method_instance.html</anchorfile>
      <anchor>aa2c67c8591b9d135b4277c6560d725b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::MidEndLast</name>
    <filename>class_p4_1_1_mid_end_last.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::MinimalNameGenerator</name>
    <filename>class_p4_1_1_minimal_name_generator.html</filename>
    <base>P4::NameGenerator</base>
    <base>Inspector</base>
    <member kind="function">
      <type>cstring</type>
      <name>newName</name>
      <anchorfile>class_p4_1_1_minimal_name_generator.html</anchorfile>
      <anchor>a2c0567295ae75795db72e47c485256a6</anchor>
      <arglist>(cstring base) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::MissingIdAssigner</name>
    <filename>class_p4_1_1_missing_id_assigner.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::MoveActionsToTables</name>
    <filename>class_p4_1_1_move_actions_to_tables.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::MoveConstructors</name>
    <filename>class_p4_1_1_move_constructors.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::MoveDeclarations</name>
    <filename>class_p4_1_1_move_declarations.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::MoveInitializers</name>
    <filename>class_p4_1_1_move_initializers.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::NameGenerator</name>
    <filename>class_p4_1_1_name_generator.html</filename>
  </compound>
  <compound kind="struct">
    <name>P4::NestedStructMap</name>
    <filename>struct_p4_1_1_nested_struct_map.html</filename>
  </compound>
  <compound kind="class">
    <name>P4::NestedStructs</name>
    <filename>class_p4_1_1_nested_structs.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::OrderArguments</name>
    <filename>class_p4_1_1_order_arguments.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::OrPolicy</name>
    <filename>class_p4_1_1_or_policy.html</filename>
    <base>P4::KeyIsSimple</base>
  </compound>
  <compound kind="class">
    <name>P4::P4COptionPragmaParser</name>
    <filename>class_p4_1_1_p4_c_option_pragma_parser.html</filename>
    <base>P4::IOptionPragmaParser</base>
  </compound>
  <compound kind="class">
    <name>P4::P4CoreLibrary</name>
    <filename>class_p4_1_1_p4_core_library.html</filename>
    <base>Model::Model</base>
  </compound>
  <compound kind="class">
    <name>P4::P4Exception_Model</name>
    <filename>class_p4_1_1_p4_exception___model.html</filename>
    <base>Model::Elem</base>
  </compound>
  <compound kind="class">
    <name>P4::P4ParserDriver</name>
    <filename>class_p4_1_1_p4_parser_driver.html</filename>
    <base>P4::AbstractParserDriver</base>
    <member kind="function" static="yes">
      <type>static const IR::P4Program *</type>
      <name>parse</name>
      <anchorfile>class_p4_1_1_p4_parser_driver.html</anchorfile>
      <anchor>a68c18acb78c4b8f5ef03d41a9cefe46b</anchor>
      <arglist>(std::istream &amp;in, const char *sourceFile, unsigned sourceLine=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const IR::Vector&lt; IR::Expression &gt; *</type>
      <name>parseExpressionList</name>
      <anchorfile>class_p4_1_1_p4_parser_driver.html</anchorfile>
      <anchor>a297110ef1dd25af49f1bddaf4bc0af42</anchor>
      <arglist>(const Util::SourceInfo &amp;srcInfo, const IR::Vector&lt; IR::AnnotationToken &gt; &amp;body)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>onReadErrorDeclaration</name>
      <anchorfile>class_p4_1_1_p4_parser_driver.html</anchorfile>
      <anchor>a07d0ede4498ec83eea9d64b42b7b0be2</anchor>
      <arglist>(IR::Type_Error *error)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IR::Vector&lt; IR::Node &gt; *</type>
      <name>nodes</name>
      <anchorfile>class_p4_1_1_p4_parser_driver.html</anchorfile>
      <anchor>a9206e534d8fb35fb368a87d732187645</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>stringLiteral</name>
      <anchorfile>class_p4_1_1_p4_parser_driver.html</anchorfile>
      <anchor>aeb57bc5fea47bdb995b029d3f8ef13ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Util::ProgramStructure *</type>
      <name>structure</name>
      <anchorfile>class_p4_1_1_p4_parser_driver.html</anchorfile>
      <anchor>a04d165c66c91d9096b61203f104084fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4::P4RuntimeAPI</name>
    <filename>struct_p4_1_1_p4_runtime_a_p_i.html</filename>
    <member kind="function">
      <type>void</type>
      <name>serializeEntriesTo</name>
      <anchorfile>group__control__plane.html</anchorfile>
      <anchor>gaf1876666f715f503d1aa8ab0533fd8bf</anchor>
      <arglist>(std::ostream *destination, P4RuntimeFormat format) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serializeP4InfoTo</name>
      <anchorfile>group__control__plane.html</anchorfile>
      <anchor>ga5689e00f60663216a8931c31c7d235c8</anchor>
      <arglist>(std::ostream *destination, P4RuntimeFormat format) const</arglist>
    </member>
    <member kind="variable">
      <type>const ::p4::v1::WriteRequest *</type>
      <name>entries</name>
      <anchorfile>struct_p4_1_1_p4_runtime_a_p_i.html</anchorfile>
      <anchor>a96c3017c977cd32fb237116db5690869</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ::p4::config::v1::P4Info *</type>
      <name>p4Info</name>
      <anchorfile>struct_p4_1_1_p4_runtime_a_p_i.html</anchorfile>
      <anchor>a0fa7a5026dadcd8f66e7e4d20b2b3eab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::P4RuntimeSerializer</name>
    <filename>class_p4_1_1_p4_runtime_serializer.html</filename>
    <member kind="function">
      <type>P4RuntimeAPI</type>
      <name>generateP4Runtime</name>
      <anchorfile>group__control__plane.html</anchorfile>
      <anchor>gab59a801e20e0f2bd44cb018dff756ece</anchor>
      <arglist>(const IR::P4Program *program, cstring arch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serializeP4RuntimeIfRequired</name>
      <anchorfile>group__control__plane.html</anchorfile>
      <anchor>gaadf17e235b0196f328a96cd9903e4698</anchor>
      <arglist>(const IR::P4Program *program, const CompilerOptions &amp;options)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serializeP4RuntimeIfRequired</name>
      <anchorfile>group__control__plane.html</anchorfile>
      <anchor>gafaec7221d97d1f6e5954d0e0086a2949</anchor>
      <arglist>(const P4RuntimeAPI &amp;p4Runtime, const CompilerOptions &amp;options)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cstring</type>
      <name>resolveArch</name>
      <anchorfile>group__control__plane.html</anchorfile>
      <anchor>ga0e23dbab92b3b90285e1d7ffec8c2a34</anchor>
      <arglist>(const CompilerOptions &amp;options)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::PackageInstantiation</name>
    <filename>class_p4_1_1_package_instantiation.html</filename>
    <base>P4::Instantiation</base>
  </compound>
  <compound kind="class">
    <name>P4::PacketIn</name>
    <filename>class_p4_1_1_packet_in.html</filename>
    <base>Model::Extern_Model</base>
  </compound>
  <compound kind="class">
    <name>P4::PacketOut</name>
    <filename>class_p4_1_1_packet_out.html</filename>
    <base>Model::Extern_Model</base>
  </compound>
  <compound kind="class">
    <name>P4::ParameterSubstitution</name>
    <filename>class_p4_1_1_parameter_substitution.html</filename>
    <base>IHasDbPrint</base>
    <member kind="function">
      <type>Util::Enumerator&lt; const IR::Parameter * &gt; *</type>
      <name>getParametersInArgumentOrder</name>
      <anchorfile>class_p4_1_1_parameter_substitution.html</anchorfile>
      <anchor>a9177c68ddb22a33bb7f66d7aa7fa74c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Util::Enumerator&lt; const IR::Parameter * &gt; *</type>
      <name>getParametersInOrder</name>
      <anchorfile>class_p4_1_1_parameter_substitution.html</anchorfile>
      <anchor>a5c0889dcadb1581e382350015178e363</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>populate</name>
      <anchorfile>class_p4_1_1_parameter_substitution.html</anchorfile>
      <anchor>a1c2d9cac9c934258cd8138dc29e78143</anchor>
      <arglist>(const IR::ParameterList *params, const IR::Vector&lt; IR::Argument &gt; *args)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const IR::Parameter * &gt;</type>
      <name>parameters</name>
      <anchorfile>class_p4_1_1_parameter_substitution.html</anchorfile>
      <anchor>ae3f3831f5f83ed8586877f9841e0f55b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; cstring, const IR::Parameter * &gt;</type>
      <name>parametersByName</name>
      <anchorfile>class_p4_1_1_parameter_substitution.html</anchorfile>
      <anchor>a8590a67b8af7654ec6714c669fb76786</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const IR::ParameterList *</type>
      <name>paramList</name>
      <anchorfile>class_p4_1_1_parameter_substitution.html</anchorfile>
      <anchor>a5ca231b41f3a98a5e6a831c0e7b5e014</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::ParseAnnotationBodies</name>
    <filename>class_p4_1_1_parse_annotation_bodies.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::ParseAnnotations</name>
    <filename>class_p4_1_1_parse_annotations.html</filename>
    <base>Modifier</base>
    <member kind="typedef">
      <type>std::function&lt; bool(IR::Annotation *)</type>
      <name>Handler</name>
      <anchorfile>class_p4_1_1_parse_annotations.html</anchorfile>
      <anchor>ab5695084bdc6930f48dfb155d4749e24</anchor>
      <arglist>)</arglist>
    </member>
    <member kind="typedef">
      <type>std::unordered_map&lt; cstring, Handler &gt;</type>
      <name>HandlerMap</name>
      <anchorfile>class_p4_1_1_parse_annotations.html</anchorfile>
      <anchor>ae3fd617809c1cfc83eadb51c9305da6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParseAnnotations</name>
      <anchorfile>class_p4_1_1_parse_annotations.html</anchorfile>
      <anchor>a2d06720fca4e53da1eb65e2bda05ee29</anchor>
      <arglist>(bool warn=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParseAnnotations</name>
      <anchorfile>class_p4_1_1_parse_annotations.html</anchorfile>
      <anchor>aedb68cb6ec1745ec01ba247b5adae754</anchor>
      <arglist>(const char *targetName, bool includeStandard, HandlerMap handlers, bool warn=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::ParserInfo</name>
    <filename>class_p4_1_1_parser_info.html</filename>
  </compound>
  <compound kind="class">
    <name>P4::ParserInstantiation</name>
    <filename>class_p4_1_1_parser_instantiation.html</filename>
    <base>P4::Instantiation</base>
  </compound>
  <compound kind="class">
    <name>P4::ParserRewriter</name>
    <filename>class_p4_1_1_parser_rewriter.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="struct">
    <name>P4::ParserStateInfo</name>
    <filename>struct_p4_1_1_parser_state_info.html</filename>
  </compound>
  <compound kind="class">
    <name>P4::ParserStructure</name>
    <filename>class_p4_1_1_parser_structure.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>reachableHSUsage</name>
      <anchorfile>class_p4_1_1_parser_structure.html</anchorfile>
      <anchor>a0fbebee9e4d511204d358a4b83b4b425</anchor>
      <arglist>(IR::ID id, const ParserStateInfo *state) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addStateHSUsage</name>
      <anchorfile>class_p4_1_1_parser_structure.html</anchorfile>
      <anchor>ae669cbcad2835788545b1ee7308ddfb0</anchor>
      <arglist>(const IR::ParserState *state, const IR::Expression *expression)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>evaluateReachability</name>
      <anchorfile>class_p4_1_1_parser_structure.html</anchorfile>
      <anchor>ade4477aa4f66919c7beb3d5f5848cd0d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::ParserStructureImpl::ParserStateRewriter</name>
    <filename>class_p4_1_1_parser_structure_impl_1_1_parser_state_rewriter.html</filename>
    <base>Transform</base>
    <member kind="function">
      <type></type>
      <name>ParserStateRewriter</name>
      <anchorfile>class_p4_1_1_parser_structure_impl_1_1_parser_state_rewriter.html</anchorfile>
      <anchor>aca02efdbfacc2d03876a275122dfbfce</anchor>
      <arglist>(ParserStructure *parserStructure, ParserStateInfo *state, ValueMap *valueMap, ReferenceMap *refMap, TypeMap *typeMap, ExpressionEvaluator *afterExec, StatesVisitedMap &amp;visitedStates)</arglist>
    </member>
    <member kind="function">
      <type>IR::Node *</type>
      <name>postorder</name>
      <anchorfile>class_p4_1_1_parser_structure_impl_1_1_parser_state_rewriter.html</anchorfile>
      <anchor>aa097cb418858c36ea5279d6a3d106967</anchor>
      <arglist>(IR::Member *expression)</arglist>
    </member>
    <member kind="function">
      <type>IR::Node *</type>
      <name>postorder</name>
      <anchorfile>class_p4_1_1_parser_structure_impl_1_1_parser_state_rewriter.html</anchorfile>
      <anchor>aff12f73a3f02f69ddad9dfae98f48ade</anchor>
      <arglist>(IR::PathExpression *expression)</arglist>
    </member>
    <member kind="function">
      <type>IR::Node *</type>
      <name>preorder</name>
      <anchorfile>class_p4_1_1_parser_structure_impl_1_1_parser_state_rewriter.html</anchorfile>
      <anchor>aaa76da6838df80f7af1b2c13831b7762</anchor>
      <arglist>(IR::ArrayIndex *expression)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>calledWithNoChanges</name>
      <anchorfile>class_p4_1_1_parser_structure_impl_1_1_parser_state_rewriter.html</anchorfile>
      <anchor>a356d283aa000d52b7b5a4c2e667e359f</anchor>
      <arglist>(IR::ID id, const ParserStateInfo *state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkIndexes</name>
      <anchorfile>class_p4_1_1_parser_structure_impl_1_1_parser_state_rewriter.html</anchorfile>
      <anchor>a153489c1b28e183afe328ddcf2cbb680</anchor>
      <arglist>(const StackVariableIndexMap &amp;prev, const StackVariableIndexMap &amp;cur)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IR::ID</type>
      <name>genNewName</name>
      <anchorfile>class_p4_1_1_parser_structure_impl_1_1_parser_state_rewriter.html</anchorfile>
      <anchor>a1f1a20df8afaa10e339c54d523e3e735</anchor>
      <arglist>(IR::ID id)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>was_called</name>
      <anchorfile>class_p4_1_1_parser_structure_impl_1_1_parser_state_rewriter.html</anchorfile>
      <anchor>a635c761ba888afa99fb1080e2d2a4b78</anchor>
      <arglist>(cstring nm, IR::ID &amp;id)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::ParserStructureImpl::ParserSymbolicInterpreter</name>
    <filename>class_p4_1_1_parser_structure_impl_1_1_parser_symbolic_interpreter.html</filename>
    <member kind="function">
      <type></type>
      <name>ParserSymbolicInterpreter</name>
      <anchorfile>class_p4_1_1_parser_structure_impl_1_1_parser_symbolic_interpreter.html</anchorfile>
      <anchor>a6f768e852a7874baf132d72850fb668c</anchor>
      <arglist>(ParserStructure *structure, ReferenceMap *refMap, TypeMap *typeMap, bool unroll, bool &amp;wasError)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOutOfBound</name>
      <anchorfile>class_p4_1_1_parser_structure_impl_1_1_parser_symbolic_interpreter.html</anchorfile>
      <anchor>a852e46e5deea5e7d121e3e7f9beb34a6</anchor>
      <arglist>(ParserStateInfo *stateInfo, std::unordered_set&lt; cstring &gt; &amp;newStates, bool checkBefore=true, StatOrDeclVector components=StatOrDeclVector())</arglist>
    </member>
    <member kind="function">
      <type>ParserInfo *</type>
      <name>run</name>
      <anchorfile>class_p4_1_1_parser_structure_impl_1_1_parser_symbolic_interpreter.html</anchorfile>
      <anchor>a6fcdb2d53718b1993a4bd53c98032e7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkLoops</name>
      <anchorfile>class_p4_1_1_parser_structure_impl_1_1_parser_symbolic_interpreter.html</anchorfile>
      <anchor>a74ed9800ec8afd21c175edf6ee19e9fa</anchor>
      <arglist>(ParserStateInfo *state) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equStackVariableMap</name>
      <anchorfile>class_p4_1_1_parser_structure_impl_1_1_parser_symbolic_interpreter.html</anchorfile>
      <anchor>ac461b7cdd9a6915f46a661d0ef696a60</anchor>
      <arglist>(const StackVariableMap &amp;l, const StackVariableMap &amp;r) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>EvaluationStateResult</type>
      <name>evaluateState</name>
      <anchorfile>class_p4_1_1_parser_structure_impl_1_1_parser_symbolic_interpreter.html</anchorfile>
      <anchor>a3e5b52180062905336f2975cab25ba6b</anchor>
      <arglist>(ParserStateInfo *state, std::unordered_set&lt; cstring &gt; &amp;newStates)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IR::StatOrDecl *</type>
      <name>executeStatement</name>
      <anchorfile>class_p4_1_1_parser_structure_impl_1_1_parser_symbolic_interpreter.html</anchorfile>
      <anchor>afffc2817538101abd78026b6c9e51399</anchor>
      <arglist>(ParserStateInfo *state, const IR::StatOrDecl *sord, ValueMap *valueMap)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IR::ID</type>
      <name>getNewName</name>
      <anchorfile>class_p4_1_1_parser_structure_impl_1_1_parser_symbolic_interpreter.html</anchorfile>
      <anchor>a72d18f983d4e33367f92460401099e19</anchor>
      <arglist>(ParserStateInfo *state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>reportIfError</name>
      <anchorfile>class_p4_1_1_parser_structure_impl_1_1_parser_symbolic_interpreter.html</anchorfile>
      <anchor>ac0ea4e1609a221c9267b9791716f6f41</anchor>
      <arglist>(const ParserStateInfo *state, SymbolicValue *value) const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>headerValidityChange</name>
      <anchorfile>class_p4_1_1_parser_structure_impl_1_1_parser_symbolic_interpreter.html</anchorfile>
      <anchor>af175d2e7783444110a60d39cc0e12d35</anchor>
      <arglist>(const ValueMap *before, const ValueMap *after)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::ParsersUnroll</name>
    <filename>class_p4_1_1_parsers_unroll.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="struct">
    <name>P4::PerInstanceSubstitutions</name>
    <filename>struct_p4_1_1_per_instance_substitutions.html</filename>
  </compound>
  <compound kind="class">
    <name>P4::Predication</name>
    <filename>class_p4_1_1_predication.html</filename>
    <base>Transform</base>
    <member kind="function">
      <type>const IR::Node *</type>
      <name>preorder</name>
      <anchorfile>class_p4_1_1_predication.html</anchorfile>
      <anchor>a9801838961df8afa3c979b7e619ee09d</anchor>
      <arglist>(IR::AssignmentStatement *statement) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::ProgramMap</name>
    <filename>class_p4_1_1_program_map.html</filename>
    <base>IHasDbPrint</base>
  </compound>
  <compound kind="class">
    <name>P4::ProgramPoint</name>
    <filename>class_p4_1_1_program_point.html</filename>
    <base>IHasDbPrint</base>
    <member kind="function">
      <type>ProgramPoint</type>
      <name>after</name>
      <anchorfile>class_p4_1_1_program_point.html</anchorfile>
      <anchor>ab636885f9b4085a306b69608a89c2752</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static ProgramPoint</type>
      <name>beforeStart</name>
      <anchorfile>class_p4_1_1_program_point.html</anchorfile>
      <anchor>a0286dfece92c3c9dc0b48ab654dfb229</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::ProgramPoints</name>
    <filename>class_p4_1_1_program_points.html</filename>
    <base>IHasDbPrint</base>
  </compound>
  <compound kind="class">
    <name>P4::ReadsWrites</name>
    <filename>class_p4_1_1_reads_writes.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::Reassociation</name>
    <filename>class_p4_1_1_reassociation.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::ReferenceMap</name>
    <filename>class_p4_1_1_reference_map.html</filename>
    <base>P4::ProgramMap</base>
    <base>P4::NameGenerator</base>
    <base>P4::DeclarationLookup</base>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>class_p4_1_1_reference_map.html</anchorfile>
      <anchor>a6a3da8433530c27fd1faaf1745892c1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IR::IDeclaration *</type>
      <name>getDeclaration</name>
      <anchorfile>class_p4_1_1_reference_map.html</anchorfile>
      <anchor>a2caec05c0415b4148ef5a1e4c6b7520c</anchor>
      <arglist>(const IR::Path *path, bool notNull=false) const override</arglist>
    </member>
    <member kind="function">
      <type>const IR::IDeclaration *</type>
      <name>getDeclaration</name>
      <anchorfile>class_p4_1_1_reference_map.html</anchorfile>
      <anchor>a0a58eede0ad392922fdd7cc1c9d90021</anchor>
      <arglist>(const IR::This *pointer, bool notNull=false) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUsed</name>
      <anchorfile>class_p4_1_1_reference_map.html</anchorfile>
      <anchor>af2f1886078ad29023c8df71d9dd8aaf7</anchor>
      <arglist>(const IR::IDeclaration *decl) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isV1</name>
      <anchorfile>class_p4_1_1_reference_map.html</anchorfile>
      <anchor>afe67a5819292e5200fa0dc98c38cf410</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>newName</name>
      <anchorfile>class_p4_1_1_reference_map.html</anchorfile>
      <anchor>a1bc0be2502a76d10589c6530f2356fc9</anchor>
      <arglist>(cstring base) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDeclaration</name>
      <anchorfile>class_p4_1_1_reference_map.html</anchorfile>
      <anchor>a47a00034ce3af258007cee4f25d8fec9</anchor>
      <arglist>(const IR::Path *path, const IR::IDeclaration *decl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDeclaration</name>
      <anchorfile>class_p4_1_1_reference_map.html</anchorfile>
      <anchor>ae82be9d1a6dc5b149a216717b6a1e6de</anchor>
      <arglist>(const IR::This *pointer, const IR::IDeclaration *decl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsV1</name>
      <anchorfile>class_p4_1_1_reference_map.html</anchorfile>
      <anchor>ae48573b255e54df9be1cfd19df1608ed</anchor>
      <arglist>(bool isv1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usedName</name>
      <anchorfile>class_p4_1_1_reference_map.html</anchorfile>
      <anchor>a79c9be4e360d6d7094cfb34a428f4aba</anchor>
      <arglist>(cstring name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::RemoveActionParameters</name>
    <filename>class_p4_1_1_remove_action_parameters.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::RemoveAliases</name>
    <filename>class_p4_1_1_remove_aliases.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::RemoveAllUnusedDeclarations</name>
    <filename>class_p4_1_1_remove_all_unused_declarations.html</filename>
    <base>PassRepeated</base>
  </compound>
  <compound kind="class">
    <name>P4::RemoveAssertAssume</name>
    <filename>class_p4_1_1_remove_assert_assume.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::RemoveComplexComparisons</name>
    <filename>class_p4_1_1_remove_complex_comparisons.html</filename>
    <base>Transform</base>
    <member kind="function" protection="protected">
      <type>const IR::Expression *</type>
      <name>explode</name>
      <anchorfile>class_p4_1_1_remove_complex_comparisons.html</anchorfile>
      <anchor>aa5d4a32b8773c31a4d6b9061df3373af</anchor>
      <arglist>(Util::SourceInfo srcInfo, const IR::Type *leftType, const IR::Expression *left, const IR::Type *rightType, const IR::Expression *right)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::RemoveComplexExpressions</name>
    <filename>class_p4_1_1_remove_complex_expressions.html</filename>
    <base>Transform</base>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::RemoveComplexExpressionsPolicy</name>
    <filename>class_p4_1_1_remove_complex_expressions_policy.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>convert</name>
      <anchorfile>class_p4_1_1_remove_complex_expressions_policy.html</anchorfile>
      <anchor>a5cbb68359555b5c4036c39f5a28449ed</anchor>
      <arglist>(const IR::P4Control *control) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>convert</name>
      <anchorfile>class_p4_1_1_remove_complex_expressions_policy.html</anchorfile>
      <anchor>a5cbb68359555b5c4036c39f5a28449ed</anchor>
      <arglist>(const IR::P4Control *control) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::RemoveDontcareArgs</name>
    <filename>class_p4_1_1_remove_dontcare_args.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::RemoveExits</name>
    <filename>class_p4_1_1_remove_exits.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::RemoveGenericTypes</name>
    <filename>class_p4_1_1_remove_generic_types.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::RemoveHidden</name>
    <filename>class_p4_1_1_remove_hidden.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::RemoveLeftSlices</name>
    <filename>class_p4_1_1_remove_left_slices.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::RemoveMiss</name>
    <filename>class_p4_1_1_remove_miss.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::RemoveNestedStructs</name>
    <filename>class_p4_1_1_remove_nested_structs.html</filename>
    <base>Transform</base>
    <member kind="function">
      <type>const IR::Node *</type>
      <name>postorder</name>
      <anchorfile>class_p4_1_1_remove_nested_structs.html</anchorfile>
      <anchor>aa06d3beae6c2fbf4388c4330fe43f419</anchor>
      <arglist>(IR::Declaration_Variable *decl) override</arglist>
    </member>
    <member kind="function">
      <type>const IR::Node *</type>
      <name>postorder</name>
      <anchorfile>class_p4_1_1_remove_nested_structs.html</anchorfile>
      <anchor>a9ea2767e22b599360413c8e99ff61796</anchor>
      <arglist>(IR::Member *expression) override</arglist>
    </member>
    <member kind="function">
      <type>const IR::Node *</type>
      <name>postorder</name>
      <anchorfile>class_p4_1_1_remove_nested_structs.html</anchorfile>
      <anchor>a607c705aaf4a2f52d7d8c9bd1edf47e4</anchor>
      <arglist>(IR::PathExpression *expression) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::RemoveParserControlFlow</name>
    <filename>class_p4_1_1_remove_parser_control_flow.html</filename>
    <base>PassRepeated</base>
  </compound>
  <compound kind="class">
    <name>P4::RemoveParserIfs</name>
    <filename>class_p4_1_1_remove_parser_ifs.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::RemoveRedundantParsers</name>
    <filename>class_p4_1_1_remove_redundant_parsers.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::RemoveReturns</name>
    <filename>class_p4_1_1_remove_returns.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::RemoveSelectBooleans</name>
    <filename>class_p4_1_1_remove_select_booleans.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::RemoveUnusedActionParameters</name>
    <filename>class_p4_1_1_remove_unused_action_parameters.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::RemoveUnusedDeclarations</name>
    <filename>class_p4_1_1_remove_unused_declarations.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::RemoveUnusedHUDeclarations</name>
    <filename>class_p4_1_1_remove_unused_h_u_declarations.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::RemoveUnusedPolicy</name>
    <filename>class_p4_1_1_remove_unused_policy.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual RemoveUnusedDeclarations *</type>
      <name>getRemoveUnusedDeclarationsPass</name>
      <anchorfile>class_p4_1_1_remove_unused_policy.html</anchorfile>
      <anchor>aafd121df24eabff13a490c67369798e6</anchor>
      <arglist>(const ReferenceMap *refMap, bool warn=false) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::RemoveUselessCasts</name>
    <filename>class_p4_1_1_remove_useless_casts.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::RenameMap</name>
    <filename>class_p4_1_1_rename_map.html</filename>
  </compound>
  <compound kind="class">
    <name>P4::RenameSymbols</name>
    <filename>class_p4_1_1_rename_symbols.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::ReplaceHeaders</name>
    <filename>class_p4_1_1_replace_headers.html</filename>
    <base>Transform</base>
    <base protection="private">P4WriteContext</base>
  </compound>
  <compound kind="class">
    <name>P4::ReplaceLogMsg</name>
    <filename>class_p4_1_1_replace_log_msg.html</filename>
    <base>Transform</base>
    <base protection="private">P4WriteContext</base>
  </compound>
  <compound kind="class">
    <name>P4::ReplacementMap</name>
    <filename>class_p4_1_1_replacement_map.html</filename>
  </compound>
  <compound kind="class">
    <name>P4::ReplaceSelectRange</name>
    <filename>class_p4_1_1_replace_select_range.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::ReplaceStructs</name>
    <filename>class_p4_1_1_replace_structs.html</filename>
    <base>Transform</base>
    <base protection="private">P4WriteContext</base>
  </compound>
  <compound kind="class">
    <name>P4::ReplaceTypeUses</name>
    <filename>class_p4_1_1_replace_type_uses.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::ResetHeaders</name>
    <filename>class_p4_1_1_reset_headers.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::ResolutionContext</name>
    <filename>class_p4_1_1_resolution_context.html</filename>
    <base virtualness="virtual">Visitor</base>
    <base>P4::DeclarationLookup</base>
    <member kind="function">
      <type>auto</type>
      <name>getDeclarations</name>
      <anchorfile>class_p4_1_1_resolution_context.html</anchorfile>
      <anchor>a4d39f8bbd62041ae4ea3e5c23e68fb4d</anchor>
      <arglist>(const IR::INamespace *ns) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>getDeclsByName</name>
      <anchorfile>class_p4_1_1_resolution_context.html</anchorfile>
      <anchor>a4bbf03bffcd5cb923e3d6ca7f22cad34</anchor>
      <arglist>(const IR::INamespace *ns, cstring name) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; const IR::IDeclaration * &gt;</type>
      <name>resolve</name>
      <anchorfile>class_p4_1_1_resolution_context.html</anchorfile>
      <anchor>a07cb29d429d4ca7bc0a40a8d2720b24b</anchor>
      <arglist>(const IR::ID &amp;name, ResolutionType type) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IR::IDeclaration *</type>
      <name>resolvePath</name>
      <anchorfile>class_p4_1_1_resolution_context.html</anchorfile>
      <anchor>a5e5d7d8c797237a746f9dc1e52c1adf5</anchor>
      <arglist>(const IR::Path *path, bool isType) const</arglist>
    </member>
    <member kind="function">
      <type>const IR::Type *</type>
      <name>resolveType</name>
      <anchorfile>class_p4_1_1_resolution_context.html</anchorfile>
      <anchor>a97def7f21070f742509dd15ce1c07a37</anchor>
      <arglist>(const IR::Type *type) const</arglist>
    </member>
    <member kind="function">
      <type>const IR::IDeclaration *</type>
      <name>resolveUnique</name>
      <anchorfile>class_p4_1_1_resolution_context.html</anchorfile>
      <anchor>aa12b9915f218ea60f322e45d67b52ddd</anchor>
      <arglist>(const IR::ID &amp;name, ResolutionType type, const IR::INamespace *=nullptr) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IR::Vector&lt; IR::Argument &gt; *</type>
      <name>methodArguments</name>
      <anchorfile>class_p4_1_1_resolution_context.html</anchorfile>
      <anchor>a6625a30ba38a8c7632d58d84be6ba767</anchor>
      <arglist>(cstring name) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::ResolveReferences</name>
    <filename>class_p4_1_1_resolve_references.html</filename>
    <base>Inspector</base>
    <base protection="private">P4::ResolutionContext</base>
  </compound>
  <compound kind="class">
    <name>P4::RewriteAllParsers</name>
    <filename>class_p4_1_1_rewrite_all_parsers.html</filename>
    <base>Transform</base>
    <member kind="function">
      <type>const IR::Node *</type>
      <name>postorder</name>
      <anchorfile>class_p4_1_1_rewrite_all_parsers.html</anchorfile>
      <anchor>aaba4fdaa246a3ec46e8f5d9ea2c7d62c</anchor>
      <arglist>(IR::P4Parser *parser) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::SameExpression</name>
    <filename>class_p4_1_1_same_expression.html</filename>
  </compound>
  <compound kind="class">
    <name>P4::SaturationElim</name>
    <filename>class_p4_1_1_saturation_elim.html</filename>
    <member kind="function" static="yes">
      <type>static const IR::Mux *</type>
      <name>eliminate</name>
      <anchorfile>class_p4_1_1_saturation_elim.html</anchorfile>
      <anchor>a5701ab48d56d48d7c016b84d51d0d201</anchor>
      <arglist>(const IR::Operation_Binary *binary)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isSaturationOperation</name>
      <anchorfile>class_p4_1_1_saturation_elim.html</anchorfile>
      <anchor>a04a1a853a06cc0182f48d9c0a21be5c1</anchor>
      <arglist>(const IR::Expression *expr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::ScalarValue</name>
    <filename>class_p4_1_1_scalar_value.html</filename>
    <base>P4::SymbolicValue</base>
  </compound>
  <compound kind="class">
    <name>P4::SerEnumInstance</name>
    <filename>class_p4_1_1_ser_enum_instance.html</filename>
    <base>P4::EnumInstance</base>
  </compound>
  <compound kind="class">
    <name>P4::SetHeaders</name>
    <filename>class_p4_1_1_set_headers.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::SetOfLocations</name>
    <filename>class_p4_1_1_set_of_locations.html</filename>
    <base>IHasDbPrint</base>
    <member kind="function">
      <type>const SetOfLocations *</type>
      <name>append</name>
      <anchorfile>class_p4_1_1_set_of_locations.html</anchorfile>
      <anchor>a26b3034ce27d7be5f643c68b7b60f8ae</anchor>
      <arglist>(cstring suffix) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::SideEffectOrdering</name>
    <filename>class_p4_1_1_side_effect_ordering.html</filename>
    <base>PassRepeated</base>
  </compound>
  <compound kind="class">
    <name>P4::SideEffects</name>
    <filename>class_p4_1_1_side_effects.html</filename>
    <base>Inspector</base>
    <member kind="function">
      <type></type>
      <name>SideEffects</name>
      <anchorfile>class_p4_1_1_side_effects.html</anchorfile>
      <anchor>a3750093b33d896d4191c75d7ca70cf4f</anchor>
      <arglist>(ReferenceMap *refMap, TypeMap *typeMap)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>check</name>
      <anchorfile>class_p4_1_1_side_effects.html</anchorfile>
      <anchor>a3713f20dd74ee7adbd0cf03255f14703</anchor>
      <arglist>(const IR::Expression *expression, const Visitor *calledBy, ReferenceMap *refMap, TypeMap *typeMap)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>hasSideEffect</name>
      <anchorfile>class_p4_1_1_side_effects.html</anchorfile>
      <anchor>a4dfb6599fc495384056082c9ca8a5c15</anchor>
      <arglist>(const IR::MethodCallExpression *mce, ReferenceMap *refMap, TypeMap *typeMap)</arglist>
    </member>
    <member kind="variable">
      <type>const IR::Node *</type>
      <name>nodeWithSideEffect</name>
      <anchorfile>class_p4_1_1_side_effects.html</anchorfile>
      <anchor>ac2cb9aae7bf2dabb0ef2f6481d10d800</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>sideEffectCount</name>
      <anchorfile>class_p4_1_1_side_effects.html</anchorfile>
      <anchor>a31985847bb46db197e15624f96e00d64</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::SimpleCallInfo</name>
    <filename>class_p4_1_1_simple_call_info.html</filename>
    <templarg>class Callable</templarg>
    <templarg>class CallNode</templarg>
    <base>IHasDbPrint</base>
  </compound>
  <compound kind="class">
    <name>P4::SimpleEnumInstance</name>
    <filename>class_p4_1_1_simple_enum_instance.html</filename>
    <base>P4::EnumInstance</base>
  </compound>
  <compound kind="class">
    <name>P4::SimpleInlineList</name>
    <filename>class_p4_1_1_simple_inline_list.html</filename>
    <templarg>class Callable</templarg>
    <templarg>class CallInfo</templarg>
    <templarg>class InlineWorkList</templarg>
    <member kind="function">
      <type>InlineWorkList *</type>
      <name>next</name>
      <anchorfile>class_p4_1_1_simple_inline_list.html</anchorfile>
      <anchor>aaaf19c13f6e56f3a2d95fcf7a0a05237</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::SimpleInlineWorkList</name>
    <filename>class_p4_1_1_simple_inline_work_list.html</filename>
    <templarg>class Callable</templarg>
    <templarg>class CallNode</templarg>
    <templarg>class CallInfo</templarg>
    <base>IHasDbPrint</base>
  </compound>
  <compound kind="class">
    <name>P4::SimplifyBitwise</name>
    <filename>class_p4_1_1_simplify_bitwise.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::SimplifyComparisons</name>
    <filename>class_p4_1_1_simplify_comparisons.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::SimplifyControlFlow</name>
    <filename>class_p4_1_1_simplify_control_flow.html</filename>
    <base>PassRepeated</base>
  </compound>
  <compound kind="class">
    <name>P4::SimplifyDefUse</name>
    <filename>class_p4_1_1_simplify_def_use.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::SimplifyKey</name>
    <filename>class_p4_1_1_simplify_key.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::SimplifyParsers</name>
    <filename>class_p4_1_1_simplify_parsers.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::SimplifySelectCases</name>
    <filename>class_p4_1_1_simplify_select_cases.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::SimplifySelectList</name>
    <filename>class_p4_1_1_simplify_select_list.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::SimplifySwitch</name>
    <filename>class_p4_1_1_simplify_switch.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::SingleArgumentSelect</name>
    <filename>class_p4_1_1_single_argument_select.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="struct">
    <name>P4::SpecializationInfo</name>
    <filename>struct_p4_1_1_specialization_info.html</filename>
    <member kind="variable">
      <type>IR::Vector&lt; IR::Argument &gt; *</type>
      <name>constructorArguments</name>
      <anchorfile>struct_p4_1_1_specialization_info.html</anchorfile>
      <anchor>ac17d7bafb19e02ae50e3e58557e34d2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IR::IndexedVector&lt; IR::Declaration &gt; *</type>
      <name>declarations</name>
      <anchorfile>struct_p4_1_1_specialization_info.html</anchorfile>
      <anchor>a42eb56dce3bd0c0f9630c3e003526b89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IR::Node *</type>
      <name>insertBefore</name>
      <anchorfile>struct_p4_1_1_specialization_info.html</anchorfile>
      <anchor>a11ee63dff17360463db405c581e979f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IR::Node *</type>
      <name>invocation</name>
      <anchorfile>struct_p4_1_1_specialization_info.html</anchorfile>
      <anchor>a6b31fa3c61b974d54e51cba63e5d8554</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cstring</type>
      <name>name</name>
      <anchorfile>struct_p4_1_1_specialization_info.html</anchorfile>
      <anchor>a10c17f9072791bdea35d8cec64a1eb5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IR::IContainer *</type>
      <name>specialized</name>
      <anchorfile>struct_p4_1_1_specialization_info.html</anchorfile>
      <anchor>a099f057972bd7fefe90f8e4f51cf03e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IR::Vector&lt; IR::Type &gt; *</type>
      <name>typeArguments</name>
      <anchorfile>struct_p4_1_1_specialization_info.html</anchorfile>
      <anchor>aa4591f2fcc504bdc0ffcab94ab1982c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::SpecializationMap</name>
    <filename>class_p4_1_1_specialization_map.html</filename>
    <member kind="function">
      <type>void</type>
      <name>addSpecialization</name>
      <anchorfile>class_p4_1_1_specialization_map.html</anchorfile>
      <anchor>ae5412633193a5efb790e4ebf61bceca6</anchor>
      <arglist>(const IR::ConstructorCallExpression *invocation, const IR::IContainer *container, const IR::Node *insertion)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSpecialization</name>
      <anchorfile>class_p4_1_1_specialization_map.html</anchorfile>
      <anchor>a321ca951bf7f4809a9ecf1e87ecb1bf8</anchor>
      <arglist>(const IR::Declaration_Instance *invocation, const IR::IContainer *container, const IR::Node *insertion)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::Specialize</name>
    <filename>class_p4_1_1_specialize.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::SpecializeAll</name>
    <filename>class_p4_1_1_specialize_all.html</filename>
    <base>PassRepeated</base>
  </compound>
  <compound kind="class">
    <name>P4::SpecializeFunctions</name>
    <filename>class_p4_1_1_specialize_functions.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::SpecializeGenericFunctions</name>
    <filename>class_p4_1_1_specialize_generic_functions.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::SpecializeGenericTypes</name>
    <filename>class_p4_1_1_specialize_generic_types.html</filename>
    <base>PassRepeated</base>
  </compound>
  <compound kind="class">
    <name>P4::StackVariable</name>
    <filename>class_p4_1_1_stack_variable.html</filename>
    <member kind="function">
      <type></type>
      <name>StackVariable</name>
      <anchorfile>class_p4_1_1_stack_variable.html</anchorfile>
      <anchor>ac628f83a3a12a1d310bbb53ff7825935</anchor>
      <arglist>(const IR::Expression *expr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>repOk</name>
      <anchorfile>class_p4_1_1_stack_variable.html</anchorfile>
      <anchor>a34d72843b7f0eb34dfde2e27f2a3e35c</anchor>
      <arglist>(const IR::Expression *expr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::StackVariableHash</name>
    <filename>class_p4_1_1_stack_variable_hash.html</filename>
  </compound>
  <compound kind="class">
    <name>P4::StaticAssert</name>
    <filename>class_p4_1_1_static_assert.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::StorageFactory</name>
    <filename>class_p4_1_1_storage_factory.html</filename>
  </compound>
  <compound kind="class">
    <name>P4::StorageLocation</name>
    <filename>class_p4_1_1_storage_location.html</filename>
    <base>IHasDbPrint</base>
    <base>ICastable</base>
    <member kind="function">
      <type>const LocationSet *</type>
      <name>getLastIndexField</name>
      <anchorfile>class_p4_1_1_storage_location.html</anchorfile>
      <anchor>a60dbd7f1b979623594239c593719635d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocationSet *</type>
      <name>getValidBits</name>
      <anchorfile>class_p4_1_1_storage_location.html</anchorfile>
      <anchor>ac8c8ca4a93e3c91b4b000a2ba20062ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocationSet *</type>
      <name>removeHeaders</name>
      <anchorfile>class_p4_1_1_storage_location.html</anchorfile>
      <anchor>aa58926a1f7dfa776c16b0636ae3693c5</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::StorageMap</name>
    <filename>class_p4_1_1_storage_map.html</filename>
    <base>IHasDbPrint</base>
  </compound>
  <compound kind="class">
    <name>P4::StrengthReduction</name>
    <filename>class_p4_1_1_strength_reduction.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::StructInitializers</name>
    <filename>class_p4_1_1_struct_initializers.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::StructLocation</name>
    <filename>class_p4_1_1_struct_location.html</filename>
    <base>P4::WithFieldsLocation</base>
  </compound>
  <compound kind="struct">
    <name>P4::StructTypeReplacement</name>
    <filename>struct_p4_1_1_struct_type_replacement.html</filename>
    <templarg>typename T</templarg>
    <base>IHasDbPrint</base>
    <member kind="function">
      <type>const IR::StructExpression *</type>
      <name>explode</name>
      <anchorfile>struct_p4_1_1_struct_type_replacement.html</anchorfile>
      <anchor>ab726ca045e7d9f7708f2ee34cbf01f42</anchor>
      <arglist>(const IR::Expression *root, cstring prefix)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::SubstituteParameters</name>
    <filename>class_p4_1_1_substitute_parameters.html</filename>
    <base>P4::TypeVariableSubstitutionVisitor</base>
  </compound>
  <compound kind="class">
    <name>P4::SubstituteStructures</name>
    <filename>class_p4_1_1_substitute_structures.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::SwitchAddDefault</name>
    <filename>class_p4_1_1_switch_add_default.html</filename>
    <base>Modifier</base>
  </compound>
  <compound kind="class">
    <name>P4::SymbolicArray</name>
    <filename>class_p4_1_1_symbolic_array.html</filename>
    <base>P4::SymbolicValue</base>
  </compound>
  <compound kind="class">
    <name>P4::SymbolicBool</name>
    <filename>class_p4_1_1_symbolic_bool.html</filename>
    <base>P4::ScalarValue</base>
  </compound>
  <compound kind="class">
    <name>P4::SymbolicEnum</name>
    <filename>class_p4_1_1_symbolic_enum.html</filename>
    <base>P4::ScalarValue</base>
  </compound>
  <compound kind="class">
    <name>P4::SymbolicError</name>
    <filename>class_p4_1_1_symbolic_error.html</filename>
    <base>P4::SymbolicValue</base>
  </compound>
  <compound kind="class">
    <name>P4::SymbolicException</name>
    <filename>class_p4_1_1_symbolic_exception.html</filename>
    <base>P4::SymbolicError</base>
  </compound>
  <compound kind="class">
    <name>P4::SymbolicExtern</name>
    <filename>class_p4_1_1_symbolic_extern.html</filename>
    <base>P4::SymbolicValue</base>
  </compound>
  <compound kind="class">
    <name>P4::SymbolicHeader</name>
    <filename>class_p4_1_1_symbolic_header.html</filename>
    <base>P4::SymbolicStruct</base>
  </compound>
  <compound kind="class">
    <name>P4::SymbolicHeaderUnion</name>
    <filename>class_p4_1_1_symbolic_header_union.html</filename>
    <base>P4::SymbolicStruct</base>
  </compound>
  <compound kind="class">
    <name>P4::SymbolicInteger</name>
    <filename>class_p4_1_1_symbolic_integer.html</filename>
    <base>P4::ScalarValue</base>
  </compound>
  <compound kind="class">
    <name>P4::SymbolicPacketIn</name>
    <filename>class_p4_1_1_symbolic_packet_in.html</filename>
    <base>P4::SymbolicExtern</base>
  </compound>
  <compound kind="class">
    <name>P4::SymbolicStaticError</name>
    <filename>class_p4_1_1_symbolic_static_error.html</filename>
    <base>P4::SymbolicError</base>
  </compound>
  <compound kind="class">
    <name>P4::SymbolicStruct</name>
    <filename>class_p4_1_1_symbolic_struct.html</filename>
    <base>P4::SymbolicValue</base>
  </compound>
  <compound kind="class">
    <name>P4::SymbolicTuple</name>
    <filename>class_p4_1_1_symbolic_tuple.html</filename>
    <base>P4::SymbolicValue</base>
  </compound>
  <compound kind="class">
    <name>P4::SymbolicValue</name>
    <filename>class_p4_1_1_symbolic_value.html</filename>
    <base>IHasDbPrint</base>
    <base>ICastable</base>
  </compound>
  <compound kind="class">
    <name>P4::SymbolicValueFactory</name>
    <filename>class_p4_1_1_symbolic_value_factory.html</filename>
  </compound>
  <compound kind="class">
    <name>P4::SymbolicVarbit</name>
    <filename>class_p4_1_1_symbolic_varbit.html</filename>
    <base>P4::ScalarValue</base>
  </compound>
  <compound kind="class">
    <name>P4::SymbolicVoid</name>
    <filename>class_p4_1_1_symbolic_void.html</filename>
    <base>P4::SymbolicValue</base>
  </compound>
  <compound kind="class">
    <name>P4::SymRenameMap</name>
    <filename>class_p4_1_1_sym_rename_map.html</filename>
  </compound>
  <compound kind="class">
    <name>P4::SynthesizeActions</name>
    <filename>class_p4_1_1_synthesize_actions.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::TableApplySolver</name>
    <filename>class_p4_1_1_table_apply_solver.html</filename>
  </compound>
  <compound kind="class">
    <name>P4::TableHit</name>
    <filename>class_p4_1_1_table_hit.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::TableInsertions</name>
    <filename>namespace_p4.html</filename>
    <anchor>class_p4_1_1_table_insertions</anchor>
  </compound>
  <compound kind="class">
    <name>P4::TableKeyNames</name>
    <filename>class_p4_1_1_table_key_names.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::TablesInActions</name>
    <filename>class_p4_1_1_tables_in_actions.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::TablesInKeys</name>
    <filename>class_p4_1_1_tables_in_keys.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::TagGlobalActions</name>
    <filename>class_p4_1_1_tag_global_actions.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::ToP4</name>
    <filename>class_p4_1_1_to_p4.html</filename>
    <base>Inspector</base>
    <member kind="variable">
      <type>cstring</type>
      <name>mainFile</name>
      <anchorfile>class_p4_1_1_to_p4.html</anchorfile>
      <anchor>ad6899bc288b6cf7486d0db40283f83a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::TupleLocation</name>
    <filename>class_p4_1_1_tuple_location.html</filename>
    <base>P4::IndexedLocation</base>
  </compound>
  <compound kind="class">
    <name>P4::TypeChecking</name>
    <filename>class_p4_1_1_type_checking.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::TypeConstraint</name>
    <filename>class_p4_1_1_type_constraint.html</filename>
    <base>IHasDbPrint</base>
    <base>ICastable</base>
    <member kind="function">
      <type>bool</type>
      <name>reportError</name>
      <anchorfile>class_p4_1_1_type_constraint.html</anchorfile>
      <anchor>a0ee16f599d0c1c462799b7b36c781a79</anchor>
      <arglist>(const TypeVariableSubstitution *subst, const char *format, Args &amp;&amp;...args) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const TypeConstraint *</type>
      <name>derivedFrom</name>
      <anchorfile>class_p4_1_1_type_constraint.html</anchorfile>
      <anchor>ad8c58d1c90ae8899160e039aa4eae327</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const IR::Node *</type>
      <name>origin</name>
      <anchorfile>class_p4_1_1_type_constraint.html</anchorfile>
      <anchor>a42620cb00ed24cb05a32f3cb1d740a29</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::TypeConstraints</name>
    <filename>class_p4_1_1_type_constraints.html</filename>
    <base>IHasDbPrint</base>
    <member kind="function">
      <type>bool</type>
      <name>isUnifiableTypeVariable</name>
      <anchorfile>class_p4_1_1_type_constraints.html</anchorfile>
      <anchor>adf275ac5ed02bf832ba4f11860a9baab</anchor>
      <arglist>(const IR::Type *type)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::TypeInference</name>
    <filename>class_p4_1_1_type_inference.html</filename>
    <base>Transform</base>
    <member kind="function">
      <type>const IR::Node *</type>
      <name>postorder</name>
      <anchorfile>class_p4_1_1_type_inference.html</anchorfile>
      <anchor>afc4fb1b9059ab14a3180b0f3b2a9f638</anchor>
      <arglist>(IR::Entry *e) override</arglist>
    </member>
    <member kind="function">
      <type>const IR::Node *</type>
      <name>postorder</name>
      <anchorfile>class_p4_1_1_type_inference.html</anchorfile>
      <anchor>a031ca213c90f9ff9ba53d33b970ba372</anchor>
      <arglist>(IR::Key *key) override</arglist>
    </member>
    <member kind="function">
      <type>const IR::Node *</type>
      <name>preorder</name>
      <anchorfile>class_p4_1_1_type_inference.html</anchorfile>
      <anchor>ae400de0e7aa89fa679fae462929910a6</anchor>
      <arglist>(IR::EntriesList *el) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const IR::Type *</type>
      <name>specialize</name>
      <anchorfile>class_p4_1_1_type_inference.html</anchorfile>
      <anchor>ad850d81528de6b6611efd0052a5225e2</anchor>
      <arglist>(const IR::IMayBeGenericType *type, const IR::Vector&lt; IR::Type &gt; *arguments)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IR::Expression *</type>
      <name>assignment</name>
      <anchorfile>class_p4_1_1_type_inference.html</anchorfile>
      <anchor>afec02e8299991195e70651f4ba25d3c4</anchor>
      <arglist>(const IR::Node *errorPosition, const IR::Type *destType, const IR::Expression *sourceExpression)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const IR::Type *</type>
      <name>canonicalize</name>
      <anchorfile>class_p4_1_1_type_inference.html</anchorfile>
      <anchor>ac8e801dbd3ef4d0cdd40ca8cfab1fbe5</anchor>
      <arglist>(const IR::Type *type)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IR::Type_Bits *</type>
      <name>checkUnderlyingEnumType</name>
      <anchorfile>class_p4_1_1_type_inference.html</anchorfile>
      <anchor>abda500d19fdb4a79735326edc0625b67</anchor>
      <arglist>(const IR::Type *enumType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::pair&lt; const IR::Type *, const IR::Vector&lt; IR::Argument &gt; * &gt;</type>
      <name>containerInstantiation</name>
      <anchorfile>class_p4_1_1_type_inference.html</anchorfile>
      <anchor>a8257037caea2981f6801518783eb3dd0</anchor>
      <arglist>(const IR::Node *node, const IR::Vector&lt; IR::Argument &gt; *args, const IR::IContainer *container)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TypeVariableSubstitution *</type>
      <name>unify</name>
      <anchorfile>class_p4_1_1_type_inference.html</anchorfile>
      <anchor>abc4a49a1316875c586a3a321dbdcd626</anchor>
      <arglist>(const IR::Node *errorPosition, const IR::Type *destType, const IR::Type *srcType, cstring errorFormat=nullptr, std::initializer_list&lt; const IR::Node * &gt; errorArgs={})</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TypeVariableSubstitution *</type>
      <name>unifyCast</name>
      <anchorfile>class_p4_1_1_type_inference.html</anchorfile>
      <anchor>a3e76b9612eefc69815c382bdacf43239</anchor>
      <arglist>(const IR::Node *errorPosition, const IR::Type *destType, const IR::Type *srcType, cstring errorFormat=nullptr, std::initializer_list&lt; const IR::Node * &gt; errorArgs={})</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IR::ActionListElement *</type>
      <name>validateActionInitializer</name>
      <anchorfile>class_p4_1_1_type_inference.html</anchorfile>
      <anchor>a2b9de18381c6b6c3a3aa5075b5e2bc4c</anchor>
      <arglist>(const IR::Expression *actionCall)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>validateFields</name>
      <anchorfile>class_p4_1_1_type_inference.html</anchorfile>
      <anchor>a6ea2109ffba9944fe95bed5e25c41b4f</anchor>
      <arglist>(const IR::Type *type, std::function&lt; bool(const IR::Type *)&gt; checker) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const IR::ActionList *</type>
      <name>currentActionList</name>
      <anchorfile>class_p4_1_1_type_inference.html</anchorfile>
      <anchor>a707807765cad4f39588f25ee2e28330c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4::TypeInference::Comparison</name>
    <filename>class_p4_1_1_type_inference.html</filename>
    <anchor>struct_p4_1_1_type_inference_1_1_comparison</anchor>
  </compound>
  <compound kind="class">
    <name>P4::TypeMap</name>
    <filename>class_p4_1_1_type_map.html</filename>
    <base>P4::ProgramMap</base>
    <member kind="function">
      <type>bool</type>
      <name>equivalent</name>
      <anchorfile>class_p4_1_1_type_map.html</anchorfile>
      <anchor>a0e8c0a2a8e29bd9d9599731ddf6bea30</anchor>
      <arglist>(const IR::Type *left, const IR::Type *right, bool strict=false) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>implicitlyConvertibleTo</name>
      <anchorfile>class_p4_1_1_type_map.html</anchorfile>
      <anchor>a5490f44545e21ef41f39992fb3c8c48a</anchor>
      <arglist>(const IR::Type *from, const IR::Type *to) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>typeIsEmpty</name>
      <anchorfile>class_p4_1_1_type_map.html</anchorfile>
      <anchor>a9029f57640cee4c92cc7a4e3edb7c29c</anchor>
      <arglist>(const IR::Type *type) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>widthBits</name>
      <anchorfile>class_p4_1_1_type_map.html</anchorfile>
      <anchor>a4b838aea045ad78e45f58c7e5fc0bd73</anchor>
      <arglist>(const IR::Type *type, const IR::Node *errorPosition, bool max)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>strictStruct</name>
      <anchorfile>class_p4_1_1_type_map.html</anchorfile>
      <anchor>af4acc926aaca8de78a3ec1edc90626f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::TypeOccursVisitor</name>
    <filename>class_p4_1_1_type_occurs_visitor.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="struct">
    <name>P4::TypeSpecialization</name>
    <filename>struct_p4_1_1_type_specialization.html</filename>
    <base>IHasDbPrint</base>
    <member kind="variable">
      <type>const IR::Vector&lt; IR::Type &gt; *</type>
      <name>argumentTypes</name>
      <anchorfile>struct_p4_1_1_type_specialization.html</anchorfile>
      <anchor>a0d55056c470fda5556a0378a3140a594</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IR::Type_Declaration *</type>
      <name>declaration</name>
      <anchorfile>struct_p4_1_1_type_specialization.html</anchorfile>
      <anchor>a9048f2a01577432158410009998aab6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IR::Node *</type>
      <name>insertion</name>
      <anchorfile>struct_p4_1_1_type_specialization.html</anchorfile>
      <anchor>acee699eb0f8dbdfd5af721777d1e5c23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cstring</type>
      <name>name</name>
      <anchorfile>struct_p4_1_1_type_specialization.html</anchorfile>
      <anchor>abaf11b0c5c265c0e554f203f2835ecbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IR::Type_StructLike *</type>
      <name>replacement</name>
      <anchorfile>struct_p4_1_1_type_specialization.html</anchorfile>
      <anchor>a0e615d303222981f78c72f5b88736f39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IR::Type_Specialized *</type>
      <name>specialized</name>
      <anchorfile>struct_p4_1_1_type_specialization.html</anchorfile>
      <anchor>ab4e081be7c0502e3476dd34252c54ff0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4::TypeSpecializationMap</name>
    <filename>struct_p4_1_1_type_specialization_map.html</filename>
    <base>IHasDbPrint</base>
  </compound>
  <compound kind="class">
    <name>P4::TypeSubstitution</name>
    <filename>class_p4_1_1_type_substitution.html</filename>
    <templarg>class T</templarg>
    <base>IHasDbPrint</base>
    <member kind="function">
      <type>bool</type>
      <name>isIdentity</name>
      <anchorfile>class_p4_1_1_type_substitution.html</anchorfile>
      <anchor>a965b7c90945f5f3f5657d844230154d2</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::TypeSubstitutionVisitor</name>
    <filename>class_p4_1_1_type_substitution_visitor.html</filename>
    <base>P4::TypeVariableSubstitutionVisitor</base>
  </compound>
  <compound kind="class">
    <name>P4::TypeUnification</name>
    <filename>class_p4_1_1_type_unification.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>unify</name>
      <anchorfile>class_p4_1_1_type_unification.html</anchorfile>
      <anchor>a323df5de0794b2ed417822de869f467b</anchor>
      <arglist>(const BinaryConstraint *constraint)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::TypeVariableSubstitution</name>
    <filename>class_p4_1_1_type_variable_substitution.html</filename>
    <base>P4::TypeSubstitution&lt; const IR::ITypeVar * &gt;</base>
    <member kind="function">
      <type>cstring</type>
      <name>compose</name>
      <anchorfile>class_p4_1_1_type_variable_substitution.html</anchorfile>
      <anchor>a7a3904367870eaffde08c6ffb4a1286a</anchor>
      <arglist>(const IR::ITypeVar *var, const IR::Type *substitution)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::TypeVariableSubstitutionVisitor</name>
    <filename>class_p4_1_1_type_variable_substitution_visitor.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::UniqueNames</name>
    <filename>class_p4_1_1_unique_names.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::UniqueParameters</name>
    <filename>class_p4_1_1_unique_parameters.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::UnnestSelectList</name>
    <filename>class_p4_1_1_unnest_select_list.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4::UselessCasts</name>
    <filename>class_p4_1_1_useless_casts.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4::ValidateMatchAnnotations</name>
    <filename>class_p4_1_1_validate_match_annotations.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::ValidateParsedProgram</name>
    <filename>class_p4_1_1_validate_parsed_program.html</filename>
    <base>Inspector</base>
    <member kind="function">
      <type>void</type>
      <name>postorder</name>
      <anchorfile>class_p4_1_1_validate_parsed_program.html</anchorfile>
      <anchor>a150d3ccd0824410ee89a71f7686b1f44</anchor>
      <arglist>(const IR::Annotations *annotations) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postorder</name>
      <anchorfile>class_p4_1_1_validate_parsed_program.html</anchorfile>
      <anchor>a488db09aa21f6b5cfbffdd2f639cfc18</anchor>
      <arglist>(const IR::Constant *c) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postorder</name>
      <anchorfile>class_p4_1_1_validate_parsed_program.html</anchorfile>
      <anchor>af8f0f7956dbd23bca127639cb41df7dc</anchor>
      <arglist>(const IR::ConstructorCallExpression *expression) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postorder</name>
      <anchorfile>class_p4_1_1_validate_parsed_program.html</anchorfile>
      <anchor>a4bcd35cbe149fdd56343d71361ea666c</anchor>
      <arglist>(const IR::Declaration_Constant *decl) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postorder</name>
      <anchorfile>class_p4_1_1_validate_parsed_program.html</anchorfile>
      <anchor>ab2f9cf3d60c745bd9d832ba87d8f986e</anchor>
      <arglist>(const IR::Declaration_Instance *inst) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postorder</name>
      <anchorfile>class_p4_1_1_validate_parsed_program.html</anchorfile>
      <anchor>a4a80db6dc702f22cdf00401ad10259ff</anchor>
      <arglist>(const IR::Declaration_Variable *decl) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postorder</name>
      <anchorfile>class_p4_1_1_validate_parsed_program.html</anchorfile>
      <anchor>a12516c2a621b3264e6cf4824641665bc</anchor>
      <arglist>(const IR::ExitStatement *statement) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postorder</name>
      <anchorfile>class_p4_1_1_validate_parsed_program.html</anchorfile>
      <anchor>a83bf8cd8d7889a8e1f554fcfc7516116</anchor>
      <arglist>(const IR::Method *t) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postorder</name>
      <anchorfile>class_p4_1_1_validate_parsed_program.html</anchorfile>
      <anchor>aa6fb854a0256cbc9e3383c55e1da3da9</anchor>
      <arglist>(const IR::P4Table *t) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postorder</name>
      <anchorfile>class_p4_1_1_validate_parsed_program.html</anchorfile>
      <anchor>afdcf32135e45bbe08f0f8eb89399a88c</anchor>
      <arglist>(const IR::ParserState *s) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postorder</name>
      <anchorfile>class_p4_1_1_validate_parsed_program.html</anchorfile>
      <anchor>a51a6bd49c3d304cfe3cabda6dc2d2041</anchor>
      <arglist>(const IR::ReturnStatement *statement) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postorder</name>
      <anchorfile>class_p4_1_1_validate_parsed_program.html</anchorfile>
      <anchor>ab5ac6819bfbe4fcc142244b5f6ef842b</anchor>
      <arglist>(const IR::StructField *f) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postorder</name>
      <anchorfile>class_p4_1_1_validate_parsed_program.html</anchorfile>
      <anchor>a4784b7ea5f4bd05d7809089839bc3657</anchor>
      <arglist>(const IR::SwitchStatement *statement) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postorder</name>
      <anchorfile>class_p4_1_1_validate_parsed_program.html</anchorfile>
      <anchor>af7883440fe5a1f8ee92ebd3493b546cc</anchor>
      <arglist>(const IR::Type_Bits *type) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::ValidateTableProperties</name>
    <filename>class_p4_1_1_validate_table_properties.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::ValidateValueSets</name>
    <filename>class_p4_1_1_validate_value_sets.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4::ValueMap</name>
    <filename>class_p4_1_1_value_map.html</filename>
    <base>IHasDbPrint</base>
  </compound>
  <compound kind="struct">
    <name>P4::VisitedKey</name>
    <filename>struct_p4_1_1_visited_key.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>struct_p4_1_1_visited_key.html</anchorfile>
      <anchor>a8c50282903400d62eb6f85183183e8aa</anchor>
      <arglist>(const VisitedKey &amp;e) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4::WithFieldsLocation</name>
    <filename>class_p4_1_1_with_fields_location.html</filename>
    <base>P4::StorageLocation</base>
  </compound>
  <compound kind="class">
    <name>P4_14::InlineActions</name>
    <filename>class_p4__14_1_1_inline_actions.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4CConfiguration</name>
    <filename>class_p4_c_configuration.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>maximumArraySize</name>
      <anchorfile>class_p4_c_configuration.html</anchorfile>
      <anchor>a2bb29ef11491076ba8fe0f03226da5b6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>maximumWidthSupported</name>
      <anchorfile>class_p4_c_configuration.html</anchorfile>
      <anchor>ae1b67c9e023f15331740476a0814b698</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4CContext</name>
    <filename>class_p4_c_context.html</filename>
    <base>BaseCompileContext</base>
    <member kind="function">
      <type>DiagnosticAction</type>
      <name>getDefaultInfoDiagnosticAction</name>
      <anchorfile>class_p4_c_context.html</anchorfile>
      <anchor>a42cf2bf0c56e5b31c3ce25377098f4c1</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>DiagnosticAction</type>
      <name>getDefaultWarningDiagnosticAction</name>
      <anchorfile>class_p4_c_context.html</anchorfile>
      <anchor>abf87d1f39d0e3e0a1552905c5fd3405b</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>DiagnosticAction</type>
      <name>getDiagnosticAction</name>
      <anchorfile>class_p4_c_context.html</anchorfile>
      <anchor>a1fc563aa3aeabb4b00d9256f6645fe03</anchor>
      <arglist>(cstring diagnostic, DiagnosticAction defaultAction) final</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ParserOptions &amp;</type>
      <name>options</name>
      <anchorfile>class_p4_c_context.html</anchorfile>
      <anchor>a28481a220dec44ba6745ef5d3c5e82c2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultInfoDiagnosticAction</name>
      <anchorfile>class_p4_c_context.html</anchorfile>
      <anchor>a6a46aafd9a309d092724a46502e809b5</anchor>
      <arglist>(DiagnosticAction action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultWarningDiagnosticAction</name>
      <anchorfile>class_p4_c_context.html</anchorfile>
      <anchor>a4bfe80d5baed595e0ed06df36764dca0</anchor>
      <arglist>(DiagnosticAction action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDiagnosticAction</name>
      <anchorfile>class_p4_c_context.html</anchorfile>
      <anchor>a5443693d2a2680c469254e2d911a391f</anchor>
      <arglist>(cstring diagnostic, DiagnosticAction action)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static P4CContext &amp;</type>
      <name>get</name>
      <anchorfile>class_p4_c_context.html</anchorfile>
      <anchor>a8afb6336f0cb4e29238dab48eb24e4a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const P4CConfiguration &amp;</type>
      <name>getConfig</name>
      <anchorfile>class_p4_c_context.html</anchorfile>
      <anchor>ade8c1cdc5297017704b4f70e1984519c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const P4CConfiguration &amp;</type>
      <name>getConfigImpl</name>
      <anchorfile>class_p4_c_context.html</anchorfile>
      <anchor>ae5b79e2ec7142ba14539463943f505ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isRecognizedDiagnostic</name>
      <anchorfile>class_p4_c_context.html</anchorfile>
      <anchor>a9b9d8dae55e8634e50da6c125c28fa8b</anchor>
      <arglist>(cstring diagnostic)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4CContextWithOptions</name>
    <filename>class_p4_c_context_with_options.html</filename>
    <templarg>typename OptionsType</templarg>
    <base>P4CContext</base>
    <member kind="function">
      <type>OptionsType &amp;</type>
      <name>options</name>
      <anchorfile>class_p4_c_context_with_options.html</anchorfile>
      <anchor>ab265ed22e1254e9cf9defa63bc961af2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static P4CContextWithOptions &amp;</type>
      <name>get</name>
      <anchorfile>class_p4_c_context_with_options.html</anchorfile>
      <anchor>af7aa84d03f6870a747096ecef636b444</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>p4tc_ext_bpf_params</name>
    <filename>structp4tc__ext__bpf__params.html</filename>
  </compound>
  <compound kind="struct">
    <name>p4tc_ext_csum_params</name>
    <filename>structp4tc__ext__csum__params.html</filename>
  </compound>
  <compound kind="struct">
    <name>p4tc_table_entry_act_bpf_params__local</name>
    <filename>structp4tc__table__entry__act__bpf__params____local.html</filename>
  </compound>
  <compound kind="struct">
    <name>p4tc_table_entry_create_bpf_params__local</name>
    <filename>structp4tc__table__entry__create__bpf__params____local.html</filename>
  </compound>
  <compound kind="class">
    <name>P4Test::MidEnd</name>
    <filename>class_p4_test_1_1_mid_end.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4Test::SkipControls</name>
    <filename>class_p4_test_1_1_skip_controls.html</filename>
    <base>P4::ActionSynthesisPolicy</base>
    <member kind="function">
      <type>bool</type>
      <name>convert</name>
      <anchorfile>class_p4_test_1_1_skip_controls.html</anchorfile>
      <anchor>a6fb5eb5e3e831d474c98586d44b59ff3</anchor>
      <arglist>(const Visitor::Context *, const IR::P4Control *control) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4TestOptions</name>
    <filename>class_p4_test_options.html</filename>
    <base>CompilerOptions</base>
  </compound>
  <compound kind="class">
    <name>P4Tools::AbstractExecutionState</name>
    <filename>class_p4_tools_1_1_abstract_execution_state.html</filename>
    <member kind="function">
      <type></type>
      <name>AbstractExecutionState</name>
      <anchorfile>class_p4_tools_1_1_abstract_execution_state.html</anchorfile>
      <anchor>ae6042433159de7abf7b821da7c6b19be</anchor>
      <arglist>(const IR::P4Program *program)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assignStructLike</name>
      <anchorfile>class_p4_tools_1_1_abstract_execution_state.html</anchorfile>
      <anchor>a36b31f7342597d8e4b9c71da85525f02</anchor>
      <arglist>(const IR::StateVariable &amp;left, const IR::Expression *right)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AbstractExecutionState &amp;</type>
      <name>clone</name>
      <anchorfile>class_p4_tools_1_1_abstract_execution_state.html</anchorfile>
      <anchor>af248cb027ee72a595b5c974258f187c2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyIn</name>
      <anchorfile>class_p4_tools_1_1_abstract_execution_state.html</anchorfile>
      <anchor>aeb31f1527b7d5028429d23b6a1cb71fd</anchor>
      <arglist>(const Target &amp;target, const IR::Parameter *internalParam, cstring externalParamName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyOut</name>
      <anchorfile>class_p4_tools_1_1_abstract_execution_state.html</anchorfile>
      <anchor>aac180282640577a582e8fd06eefd6c56</anchor>
      <arglist>(const IR::Parameter *internalParam, cstring externalParamName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>declareVariable</name>
      <anchorfile>class_p4_tools_1_1_abstract_execution_state.html</anchorfile>
      <anchor>a6b889c431b1610d27957dc9dc75aa27a</anchor>
      <arglist>(const Target &amp;target, const IR::Declaration_Variable &amp;declVar)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>class_p4_tools_1_1_abstract_execution_state.html</anchorfile>
      <anchor>a93294a7fe6014e683db0634782b4f352</anchor>
      <arglist>(const IR::StateVariable &amp;var) const</arglist>
    </member>
    <member kind="function">
      <type>const IR::IDeclaration *</type>
      <name>findDecl</name>
      <anchorfile>class_p4_tools_1_1_abstract_execution_state.html</anchorfile>
      <anchor>a533b8c112f8164671523f47fd2b626ac</anchor>
      <arglist>(const IR::Path *path) const</arglist>
    </member>
    <member kind="function">
      <type>const IR::IDeclaration *</type>
      <name>findDecl</name>
      <anchorfile>class_p4_tools_1_1_abstract_execution_state.html</anchorfile>
      <anchor>a0397f385ce624697dcb07157d967867c</anchor>
      <arglist>(const IR::PathExpression *pathExpr) const</arglist>
    </member>
    <member kind="function">
      <type>const IR::P4Table *</type>
      <name>findTable</name>
      <anchorfile>class_p4_tools_1_1_abstract_execution_state.html</anchorfile>
      <anchor>afc462f6b745e10fb4d4f87909fc4972b</anchor>
      <arglist>(const IR::Member *member) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const IR::Expression *</type>
      <name>get</name>
      <anchorfile>class_p4_tools_1_1_abstract_execution_state.html</anchorfile>
      <anchor>a1629bc4115dfb66811ff33514362bb80</anchor>
      <arglist>(const IR::StateVariable &amp;var) const =0</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; IR::StateVariable &gt;</type>
      <name>getFlatFields</name>
      <anchorfile>class_p4_tools_1_1_abstract_execution_state.html</anchorfile>
      <anchor>adcbb46bdfd7ebecea0efd5b2b965ffff</anchor>
      <arglist>(const IR::StateVariable &amp;parent, std::vector&lt; IR::StateVariable &gt; *validVector=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>const NamespaceContext *</type>
      <name>getNamespaceContext</name>
      <anchorfile>class_p4_tools_1_1_abstract_execution_state.html</anchorfile>
      <anchor>a9be027061c15b6037bcf2f10c023f94a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IR::P4Action *</type>
      <name>getP4Action</name>
      <anchorfile>class_p4_tools_1_1_abstract_execution_state.html</anchorfile>
      <anchor>aca0c97b10359a374c9e7141acca0d681</anchor>
      <arglist>(const IR::MethodCallExpression *actionExpr) const</arglist>
    </member>
    <member kind="function">
      <type>const SymbolicEnv &amp;</type>
      <name>getSymbolicEnv</name>
      <anchorfile>class_p4_tools_1_1_abstract_execution_state.html</anchorfile>
      <anchor>ac509042f0030f4ed6e04e080d5aa6dc2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeBlockParams</name>
      <anchorfile>class_p4_tools_1_1_abstract_execution_state.html</anchorfile>
      <anchor>ad56ee96d7a854f6595dd15891eb95011</anchor>
      <arglist>(const Target &amp;target, const IR::Type_Declaration *typeDecl, const std::vector&lt; cstring &gt; *blockParams)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeStructLike</name>
      <anchorfile>class_p4_tools_1_1_abstract_execution_state.html</anchorfile>
      <anchor>a62bcce411a345da919ec6ec5ad1b445d</anchor>
      <arglist>(const Target &amp;target, const IR::StateVariable &amp;targetVar, bool forceTaint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popNamespace</name>
      <anchorfile>class_p4_tools_1_1_abstract_execution_state.html</anchorfile>
      <anchor>aa0f060a3cd7135971566c80139ed6b08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printSymbolicEnv</name>
      <anchorfile>class_p4_tools_1_1_abstract_execution_state.html</anchorfile>
      <anchor>a737e2935fffd4f9c3ef371421966fa6f</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushNamespace</name>
      <anchorfile>class_p4_tools_1_1_abstract_execution_state.html</anchorfile>
      <anchor>a8424247606da28357a59cc3e81a06851</anchor>
      <arglist>(const IR::INamespace *ns)</arglist>
    </member>
    <member kind="function">
      <type>const IR::Type *</type>
      <name>resolveType</name>
      <anchorfile>class_p4_tools_1_1_abstract_execution_state.html</anchorfile>
      <anchor>a844d84cb4d6168e233cc9cf5e7692bac</anchor>
      <arglist>(const IR::Type *type) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set</name>
      <anchorfile>class_p4_tools_1_1_abstract_execution_state.html</anchorfile>
      <anchor>a72fe6e95a5e91b9c46abb27a53c90e0c</anchor>
      <arglist>(const IR::StateVariable &amp;var, const IR::Expression *value)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNamespaceContext</name>
      <anchorfile>class_p4_tools_1_1_abstract_execution_state.html</anchorfile>
      <anchor>a846bf53a499ba71a3f1b322f799c2cca</anchor>
      <arglist>(const NamespaceContext *namespaces)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStructLike</name>
      <anchorfile>class_p4_tools_1_1_abstract_execution_state.html</anchorfile>
      <anchor>a19063185f9b33792929087853868ae56</anchor>
      <arglist>(const IR::StateVariable &amp;targetVar, const IR::StateVariable &amp;sourceVar)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AbstractExecutionState</name>
      <anchorfile>class_p4_tools_1_1_abstract_execution_state.html</anchorfile>
      <anchor>ad2e1edb2b40083cce6cf56b858108f8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AbstractExecutionState</name>
      <anchorfile>class_p4_tools_1_1_abstract_execution_state.html</anchorfile>
      <anchor>a007d44c33c732d0788f6d55cfa5cabcb</anchor>
      <arglist>(const AbstractExecutionState &amp;)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IR::Expression *</type>
      <name>convertToComplexExpression</name>
      <anchorfile>class_p4_tools_1_1_abstract_execution_state.html</anchorfile>
      <anchor>a951dfc44a48bcbfc8e60b93c8338b957</anchor>
      <arglist>(const IR::StateVariable &amp;parent) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AbstractExecutionState &amp;</type>
      <name>operator=</name>
      <anchorfile>class_p4_tools_1_1_abstract_execution_state.html</anchorfile>
      <anchor>a25aeee04b4575fef7ae0399214b0a6db</anchor>
      <arglist>(const AbstractExecutionState &amp;)=default</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::vector&lt; const IR::Expression * &gt;</type>
      <name>flattenComplexExpression</name>
      <anchorfile>class_p4_tools_1_1_abstract_execution_state.html</anchorfile>
      <anchor>aa608a548d91fe6d08057729a670bd4b1</anchor>
      <arglist>(const IR::Expression *inputExpression, std::vector&lt; const IR::Expression * &gt; &amp;flatValids)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SymbolicEnv</type>
      <name>env</name>
      <anchorfile>class_p4_tools_1_1_abstract_execution_state.html</anchorfile>
      <anchor>a3359280ed497ee08d2911bfd42b367d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const NamespaceContext *</type>
      <name>namespaces</name>
      <anchorfile>class_p4_tools_1_1_abstract_execution_state.html</anchorfile>
      <anchor>a60106de905ae20ec2a23e0927b0c829e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::AbstractP4cTool</name>
    <filename>class_p4_tools_1_1_abstract_p4c_tool.html</filename>
    <templarg>class Options</templarg>
    <templarg>typename</templarg>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>class_p4_tools_1_1_abstract_p4c_tool.html</anchorfile>
      <anchor>ab43cf144b1b9fc021722df1d2d44e430</anchor>
      <arglist>(const std::vector&lt; const char * &gt; &amp;args)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>mainImpl</name>
      <anchorfile>class_p4_tools_1_1_abstract_p4c_tool.html</anchorfile>
      <anchor>ae261253445e5b7ff40ca24cec88b3a9f</anchor>
      <arglist>(const CompilerResult &amp;compilerResult)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::AbstractP4cToolOptions</name>
    <filename>class_p4_tools_1_1_abstract_p4c_tool_options.html</filename>
    <base protection="protected">Util::Options</base>
    <member kind="function">
      <type>std::optional&lt; ICompileContext * &gt;</type>
      <name>process</name>
      <anchorfile>class_p4_tools_1_1_abstract_p4c_tool_options.html</anchorfile>
      <anchor>aae7e5b3aa5cc1bdc631e435ce8a6b29e</anchor>
      <arglist>(const std::vector&lt; const char * &gt; &amp;args)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>disableInformationLogging</name>
      <anchorfile>class_p4_tools_1_1_abstract_p4c_tool_options.html</anchorfile>
      <anchor>ab4a3596445c16f2321461502feeeaa82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::optional&lt; uint32_t &gt;</type>
      <name>seed</name>
      <anchorfile>class_p4_tools_1_1_abstract_p4c_tool_options.html</anchorfile>
      <anchor>a8ad47b8d8cd412344a126b9756ed0d47</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; const char * &gt; *</type>
      <name>process</name>
      <anchorfile>class_p4_tools_1_1_abstract_p4c_tool_options.html</anchorfile>
      <anchor>a6317805ca731d8a2b89edcacc61b5518</anchor>
      <arglist>(int argc, char *const argv[]) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>validateOptions</name>
      <anchorfile>class_p4_tools_1_1_abstract_p4c_tool_options.html</anchorfile>
      <anchor>adfb27682966551c069b5c65f6945b490</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::tuple&lt; int, char ** &gt;</type>
      <name>convertArgs</name>
      <anchorfile>class_p4_tools_1_1_abstract_p4c_tool_options.html</anchorfile>
      <anchor>a75511f9d8cb67be093e5c68e5c221b6d</anchor>
      <arglist>(const std::vector&lt; const char * &gt; &amp;args)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const char * &gt;</type>
      <name>compilerArgs</name>
      <anchorfile>class_p4_tools_1_1_abstract_p4c_tool_options.html</anchorfile>
      <anchor>a52bfb2d232245e98e027420d1ee176b7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::AbstractRepCheckedNode</name>
    <filename>class_p4_tools_1_1_abstract_rep_checked_node.html</filename>
    <templarg>class Self</templarg>
    <templarg>class Node</templarg>
    <base>ICastable</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>AbstractRepCheckedNode</name>
      <anchorfile>class_p4_tools_1_1_abstract_rep_checked_node.html</anchorfile>
      <anchor>a074d8d209b8230a20f078a0100d49b51</anchor>
      <arglist>(const Node *node, std::string classDesc)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::ArchSpec</name>
    <filename>class_p4_tools_1_1_arch_spec.html</filename>
    <member kind="function">
      <type>const ArchMember *</type>
      <name>getArchMember</name>
      <anchorfile>class_p4_tools_1_1_arch_spec.html</anchorfile>
      <anchor>aa57de11d1e844af74c983ce830c72d60</anchor>
      <arglist>(size_t blockIndex) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getArchVectorSize</name>
      <anchorfile>class_p4_tools_1_1_arch_spec.html</anchorfile>
      <anchor>a1595753627f5d0961517664bd8e75313</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getBlockIndex</name>
      <anchorfile>class_p4_tools_1_1_arch_spec.html</anchorfile>
      <anchor>a77b3c19191c03bcf628e43a83750f792</anchor>
      <arglist>(cstring blockName) const</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>getPackageName</name>
      <anchorfile>class_p4_tools_1_1_arch_spec.html</anchorfile>
      <anchor>a10db3bac5f5f60f4aaac80611ca9abce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>getParamName</name>
      <anchorfile>class_p4_tools_1_1_arch_spec.html</anchorfile>
      <anchor>aed16ef4909c3a49fbfaa7d56db31b9d4</anchor>
      <arglist>(cstring blockName, size_t paramIndex) const</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>getParamName</name>
      <anchorfile>class_p4_tools_1_1_arch_spec.html</anchorfile>
      <anchor>ac4910a5241083ec079fbea1c319adb20</anchor>
      <arglist>(size_t blockIndex, size_t paramIndex) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4Tools::ArchSpec::ArchMember</name>
    <filename>class_p4_tools_1_1_arch_spec.html</filename>
    <anchor>struct_p4_tools_1_1_arch_spec_1_1_arch_member</anchor>
  </compound>
  <compound kind="class">
    <name>P4Tools::CompileContext</name>
    <filename>class_p4_tools_1_1_compile_context.html</filename>
    <templarg>typename OptionsType</templarg>
    <base virtualness="virtual">P4CContext</base>
    <member kind="function">
      <type>OptionsType &amp;</type>
      <name>options</name>
      <anchorfile>class_p4_tools_1_1_compile_context.html</anchorfile>
      <anchor>a1673937f7f54e10968c399f3571ad7d0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CompileContext &amp;</type>
      <name>get</name>
      <anchorfile>class_p4_tools_1_1_compile_context.html</anchorfile>
      <anchor>a8bac1927ac3bd7538cd234bf7b03a7a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const CompilerConfiguration &amp;</type>
      <name>getConfigImpl</name>
      <anchorfile>class_p4_tools_1_1_compile_context.html</anchorfile>
      <anchor>a128e4429f94df75e2fef9118d567c383</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::CompilerConfiguration</name>
    <filename>class_p4_tools_1_1_compiler_configuration.html</filename>
    <base>DefaultP4CConfiguration</base>
    <member kind="function">
      <type>int</type>
      <name>maximumWidthSupported</name>
      <anchorfile>class_p4_tools_1_1_compiler_configuration.html</anchorfile>
      <anchor>afbb3babb24c9634340cdf4e3ac01415e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CompilerConfiguration &amp;</type>
      <name>get</name>
      <anchorfile>class_p4_tools_1_1_compiler_configuration.html</anchorfile>
      <anchor>a8ab9545de037d6d5ebf21ea6f420b92f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::CompilerResult</name>
    <filename>class_p4_tools_1_1_compiler_result.html</filename>
    <base>ICastable</base>
    <member kind="function">
      <type>const IR::P4Program &amp;</type>
      <name>getProgram</name>
      <anchorfile>class_p4_tools_1_1_compiler_result.html</anchorfile>
      <anchor>a9c5bf1899633d0a9226195afdeab4aff</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::CompilerTarget</name>
    <filename>class_p4_tools_1_1_compiler_target.html</filename>
    <base>P4Tools::Target</base>
    <member kind="function" static="yes">
      <type>static std::vector&lt; const char * &gt; *</type>
      <name>initCompiler</name>
      <anchorfile>class_p4_tools_1_1_compiler_target.html</anchorfile>
      <anchor>aeb875f36ffebfde47a43a536b2853c50</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ICompileContext *</type>
      <name>makeContext</name>
      <anchorfile>class_p4_tools_1_1_compiler_target.html</anchorfile>
      <anchor>abc4eb15eeda5f663e8afa8bdc6dce37e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CompilerResultOrError</type>
      <name>runCompiler</name>
      <anchorfile>class_p4_tools_1_1_compiler_target.html</anchorfile>
      <anchor>a3808b792cdea7a8f7e4dfa473642bc6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CompilerResultOrError</type>
      <name>runCompiler</name>
      <anchorfile>class_p4_tools_1_1_compiler_target.html</anchorfile>
      <anchor>a7880fec35dda2a2e15b90bbab62d7bd1</anchor>
      <arglist>(const std::string &amp;source)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::vector&lt; const char * &gt; *</type>
      <name>initCompilerImpl</name>
      <anchorfile>class_p4_tools_1_1_compiler_target.html</anchorfile>
      <anchor>a118f0813b5f2dfb493750eeba8b85511</anchor>
      <arglist>(int argc, char **argv) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ICompileContext *</type>
      <name>makeContextImpl</name>
      <anchorfile>class_p4_tools_1_1_compiler_target.html</anchorfile>
      <anchor>a3263adc76da5f613d135e16d1784663d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual P4::FrontEnd</type>
      <name>mkFrontEnd</name>
      <anchorfile>class_p4_tools_1_1_compiler_target.html</anchorfile>
      <anchor>ad484e1d0e41d71477d7832e0635fc0f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MidEnd</type>
      <name>mkMidEnd</name>
      <anchorfile>class_p4_tools_1_1_compiler_target.html</anchorfile>
      <anchor>a6bf3148ffe19b0dc27ed1679220726a7</anchor>
      <arglist>(const CompilerOptions &amp;options) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CompilerResultOrError</type>
      <name>runCompilerImpl</name>
      <anchorfile>class_p4_tools_1_1_compiler_target.html</anchorfile>
      <anchor>ae34c97d213639c6b730254339b6bda33</anchor>
      <arglist>(const IR::P4Program *) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IR::P4Program *</type>
      <name>runFrontend</name>
      <anchorfile>class_p4_tools_1_1_compiler_target.html</anchorfile>
      <anchor>abac4bcb78fc971e5a4a7112280a74e6e</anchor>
      <arglist>(const IR::P4Program *program) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IR::P4Program *</type>
      <name>runMidEnd</name>
      <anchorfile>class_p4_tools_1_1_compiler_target.html</anchorfile>
      <anchor>ab72690dfec0041136a3dd5f0e170cc53</anchor>
      <arglist>(const IR::P4Program *program) const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const IR::P4Program *</type>
      <name>runParser</name>
      <anchorfile>class_p4_tools_1_1_compiler_target.html</anchorfile>
      <anchor>a9fc57af2a6e3bb107a0dbc6a6c6ce448</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::ConvertStructExpr</name>
    <filename>class_p4_tools_1_1_convert_struct_expr.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4Tools::ConvertVarbits</name>
    <filename>class_p4_tools_1_1_convert_varbits.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4Tools::ExtendedCallGraph</name>
    <filename>class_p4_tools_1_1_extended_call_graph.html</filename>
    <templarg>class T</templarg>
    <base>P4::CallGraph&lt; T &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>addToHash</name>
      <anchorfile>class_p4_tools_1_1_extended_call_graph.html</anchorfile>
      <anchor>a6d60573a447f39d515be7a7c8799d20b</anchor>
      <arglist>(T vertex, IR::ID name)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4Tools::FormatOptions</name>
    <filename>namespace_p4_tools.html</filename>
    <anchor>struct_p4_tools_1_1_format_options</anchor>
    <member kind="variable">
      <type>bool</type>
      <name>padOutput</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>acb77ecdf32c4767401b64c7df0562ab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>usePrefix</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>acad4cf753436869430db93cc24251ea3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>useSeparator</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>ade98b986787b295e0b115a6d5f76aa0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>useUpperCaseHex</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>ae1421e55e9f21ef413e6f39f231c0261</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::HSIndexToMember</name>
    <filename>class_p4_tools_1_1_h_s_index_to_member.html</filename>
    <base>Transform</base>
    <member kind="function" static="yes">
      <type>static const IR::ArrayIndex *</type>
      <name>produceStackIndex</name>
      <anchorfile>class_p4_tools_1_1_h_s_index_to_member.html</anchorfile>
      <anchor>a32cb0970d2aa9f50270830714b92385e</anchor>
      <arglist>(const IR::Type *type, const IR::Expression *expression, size_t arrayIndex)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4Tools::InheritedCompilerOptionSpec</name>
    <filename>namespace_p4_tools.html</filename>
    <anchor>struct_p4_tools_1_1_inherited_compiler_option_spec</anchor>
    <member kind="variable">
      <type>const char *</type>
      <name>argName</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>a2f4286c677a4b5fe693867b2cc0eeb44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>description</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>a274903dabdae46870dd7b3c03620e864</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::optional&lt; std::function&lt; bool(const char *)&gt;</type>
      <name>handler</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>a9a0df738c18dffb09ee4165c69c0bcd7</anchor>
      <arglist>)</arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>option</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>a5d688974ea93e3258c0f46c89ba6878a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::MaskBuilder</name>
    <filename>class_p4_tools_1_1_mask_builder.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4Tools::MidEnd</name>
    <filename>class_p4_tools_1_1_mid_end.html</filename>
    <base>PassManager</base>
    <member kind="function">
      <type>void</type>
      <name>addDefaultPasses</name>
      <anchorfile>class_p4_tools_1_1_mid_end.html</anchorfile>
      <anchor>a6c834478b1483979617584e2dddea59b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>P4::ReferenceMap *</type>
      <name>getRefMap</name>
      <anchorfile>class_p4_tools_1_1_mid_end.html</anchorfile>
      <anchor>aa634bc56e499f9d426fa7f76312eab94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>P4::TypeMap *</type>
      <name>getTypeMap</name>
      <anchorfile>class_p4_tools_1_1_mid_end.html</anchorfile>
      <anchor>ade2597e6045602b353ea7066c4bf2fcf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>localCopyPropPolicy</name>
      <anchorfile>class_p4_tools_1_1_mid_end.html</anchorfile>
      <anchor>a558cf633752c114ba3ffec9e2ac0dc12</anchor>
      <arglist>(const Visitor::Context *ctx, const IR::Expression *expr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Visitor *</type>
      <name>mkConvertEnums</name>
      <anchorfile>class_p4_tools_1_1_mid_end.html</anchorfile>
      <anchor>aa15d6e0b2c20eeefd74cbf922a85ce90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual P4::ChooseEnumRepresentation *</type>
      <name>mkConvertEnumsPolicy</name>
      <anchorfile>class_p4_tools_1_1_mid_end.html</anchorfile>
      <anchor>a15806895b4b0f9cda7046409b3e4b50b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual P4::ChooseErrorRepresentation *</type>
      <name>mkConvertErrorPolicy</name>
      <anchorfile>class_p4_tools_1_1_mid_end.html</anchorfile>
      <anchor>af8c34866180f501789b8411625299809</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Visitor *</type>
      <name>mkConvertErrors</name>
      <anchorfile>class_p4_tools_1_1_mid_end.html</anchorfile>
      <anchor>a16129daf5cbd878e146c898e8297bfdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Visitor *</type>
      <name>mkConvertKeys</name>
      <anchorfile>class_p4_tools_1_1_mid_end.html</anchorfile>
      <anchor>abf13406e2a7745e704b1737f8b98c833</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::Model</name>
    <filename>class_p4_tools_1_1_model.html</filename>
    <member kind="function">
      <type></type>
      <name>Model</name>
      <anchorfile>class_p4_tools_1_1_model.html</anchorfile>
      <anchor>a2b24f50a790aa1b1ef3276bdd98d9915</anchor>
      <arglist>(SymbolicMapping symbolicMap)</arglist>
    </member>
    <member kind="function">
      <type>const IR::Literal *</type>
      <name>evaluate</name>
      <anchorfile>class_p4_tools_1_1_model.html</anchorfile>
      <anchor>a47083f6b1e6ee29bcba9251bc1ff15d8</anchor>
      <arglist>(const IR::Expression *expr, bool doComplete, ExpressionMap *resolvedExpressions=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>const IR::Expression *</type>
      <name>get</name>
      <anchorfile>class_p4_tools_1_1_model.html</anchorfile>
      <anchor>a13fe8c63a8ad7d5efac7e3d4edb49af1</anchor>
      <arglist>(const IR::SymbolicVariable *var, bool checked) const</arglist>
    </member>
    <member kind="function">
      <type>const SymbolicMapping &amp;</type>
      <name>getSymbolicMap</name>
      <anchorfile>class_p4_tools_1_1_model.html</anchorfile>
      <anchor>a7768a9e44f358c28e87b1fb7e88dd7d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mergeMap</name>
      <anchorfile>class_p4_tools_1_1_model.html</anchorfile>
      <anchor>ab993ba53135c1f71bcbace17314bf1e6</anchor>
      <arglist>(const SymbolicMapping &amp;sourceMap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>class_p4_tools_1_1_model.html</anchorfile>
      <anchor>a32919a3920e5de1c07357823e04c810e</anchor>
      <arglist>(const IR::SymbolicVariable *var, const IR::Expression *val)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::NamespaceContext</name>
    <filename>class_p4_tools_1_1_namespace_context.html</filename>
    <member kind="function">
      <type>const IR::IDeclaration *</type>
      <name>findDecl</name>
      <anchorfile>class_p4_tools_1_1_namespace_context.html</anchorfile>
      <anchor>a08521681b43b95a87274750fad6fd9e6</anchor>
      <arglist>(const IR::Path *path) const</arglist>
    </member>
    <member kind="function">
      <type>const std::set&lt; cstring &gt; &amp;</type>
      <name>getUsedNames</name>
      <anchorfile>class_p4_tools_1_1_namespace_context.html</anchorfile>
      <anchor>a8a0a16a9bc2c495c07ddf29301331fb4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const NamespaceContext *</type>
      <name>pop</name>
      <anchorfile>class_p4_tools_1_1_namespace_context.html</anchorfile>
      <anchor>a8ed4be6234506ebb28e1f77c99729b20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const NamespaceContext *</type>
      <name>push</name>
      <anchorfile>class_p4_tools_1_1_namespace_context.html</anchorfile>
      <anchor>a323b218b282b72db0cb92867790255d2</anchor>
      <arglist>(const IR::INamespace *ns) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NamespaceContext *</type>
      <name>Empty</name>
      <anchorfile>class_p4_tools_1_1_namespace_context.html</anchorfile>
      <anchor>ac5981636d5dd002b7cdf9db6e291d701</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Constants</name>
    <filename>class_p4_tools_1_1_p4_constants.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>MATCH_KIND_EXACT</name>
      <anchorfile>class_p4_tools_1_1_p4_constants.html</anchorfile>
      <anchor>a16c5a40a8b438765006e9786902dc5b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>MATCH_KIND_LPM</name>
      <anchorfile>class_p4_tools_1_1_p4_constants.html</anchorfile>
      <anchor>a1397ef40bfcae7fbb3918031aa65e4cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>MATCH_KIND_TERNARY</name>
      <anchorfile>class_p4_tools_1_1_p4_constants.html</anchorfile>
      <anchor>ab9dcc3676c036e72aa4b2ec372cdfc6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>NO_ERROR</name>
      <anchorfile>class_p4_tools_1_1_p4_constants.html</anchorfile>
      <anchor>a7bf6b003cec72975b4b57686415ff918</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>PARSER_ERROR_HEADER_TOO_SHORT</name>
      <anchorfile>class_p4_tools_1_1_p4_constants.html</anchorfile>
      <anchor>a068886e251db4e4b460bb320b251f537</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>PARSER_ERROR_INVALID_ARGUMENT</name>
      <anchorfile>class_p4_tools_1_1_p4_constants.html</anchorfile>
      <anchor>a73e8488f1f35aaf47e02ba4b8199d22d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>PARSER_ERROR_NO_MATCH</name>
      <anchorfile>class_p4_tools_1_1_p4_constants.html</anchorfile>
      <anchor>aab1d15e4277f7d80ce3105b894c0e2f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>PARSER_ERROR_PACKET_TOO_SHORT</name>
      <anchorfile>class_p4_tools_1_1_p4_constants.html</anchorfile>
      <anchor>a539b5ab975e25e5b0d71f62c2ea873cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>PARSER_ERROR_STACK_OUT_OF_BOUNDS</name>
      <anchorfile>class_p4_tools_1_1_p4_constants.html</anchorfile>
      <anchor>a7db12d29174179d83bc474e48e58701c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>PARSER_ERROR_TIMEOUT</name>
      <anchorfile>class_p4_tools_1_1_p4_constants.html</anchorfile>
      <anchor>ae7747caa44b9b472bc8d3a49280944a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4ProgramDCGCreator</name>
    <filename>class_p4_tools_1_1_p4_program_d_c_g_creator.html</filename>
    <base>Inspector</base>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addEdge</name>
      <anchorfile>class_p4_tools_1_1_p4_program_d_c_g_creator.html</anchorfile>
      <anchor>a590e6e859ff40c8288f35c58045373a8</anchor>
      <arglist>(const DCGVertexType *vertex, IR::ID vertexName=IR::ID())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::AbstractStepper</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_abstract_stepper.html</filename>
    <base>Inspector</base>
    <member kind="function">
      <type>bool</type>
      <name>preorder</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_abstract_stepper.html</anchorfile>
      <anchor>a439fd20600e52d58f5b4868e90b7f410</anchor>
      <arglist>(const IR::Node *) override</arglist>
    </member>
    <member kind="function">
      <type>Result</type>
      <name>step</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_abstract_stepper.html</anchorfile>
      <anchor>ac0af0cbd97998a1730ed93d482221033</anchor>
      <arglist>(const IR::Node *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>declareBaseType</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_abstract_stepper.html</anchorfile>
      <anchor>a464096d69c6b2676d8fb0885d088c38c</anchor>
      <arglist>(ExecutionState &amp;nextState, const IR::StateVariable &amp;paramPath, const IR::Type_Base *baseType) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>declareStructLike</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_abstract_stepper.html</anchorfile>
      <anchor>a9474ff27a95e1733987fafbe9e4b390a</anchor>
      <arglist>(ExecutionState &amp;nextState, const IR::StateVariable &amp;parentExpr, bool forceTaint=false) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IR::Literal *</type>
      <name>evaluateExpression</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_abstract_stepper.html</anchorfile>
      <anchor>a8da76c09ac851000ab8457e130b2387f</anchor>
      <arglist>(const IR::Expression *expr, std::optional&lt; const IR::Expression * &gt; cond) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual std::string</type>
      <name>getClassName</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_abstract_stepper.html</anchorfile>
      <anchor>a290cf6baa09365cc4ffca7173b1aa07d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>logStep</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_abstract_stepper.html</anchorfile>
      <anchor>aa59745a0f830475e8c0c09fdb76b5957</anchor>
      <arglist>(const IR::Node *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setHeaderValidity</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_abstract_stepper.html</anchorfile>
      <anchor>ad4c66adede8e589eee6e8b03b5c5fb02</anchor>
      <arglist>(const IR::StateVariable &amp;headerRef, bool validity, ExecutionState &amp;state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setTargetUninitialized</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_abstract_stepper.html</anchorfile>
      <anchor>a85927389b181283d7807a72fd2928cd5</anchor>
      <arglist>(ExecutionState &amp;nextState, const IR::StateVariable &amp;ref, bool forceTaint) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>stepGetHeaderValidity</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_abstract_stepper.html</anchorfile>
      <anchor>a9b47e07ca419e4321f6e2b6c2594058d</anchor>
      <arglist>(const IR::StateVariable &amp;headerRef)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>stepSetHeaderValidity</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_abstract_stepper.html</anchorfile>
      <anchor>aef0162fac370a55928b72c2ec9564f86</anchor>
      <arglist>(const IR::StateVariable &amp;headerRef, bool validity)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>stepStackPushPopFront</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_abstract_stepper.html</anchorfile>
      <anchor>a2a72c62fd737e5195a696110ef5a2bf7</anchor>
      <arglist>(const IR::Expression *stackRef, const IR::Vector&lt; IR::Argument &gt; *args, bool isPush=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>stepSymbolicValue</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_abstract_stepper.html</anchorfile>
      <anchor>a703fe5dd0786f3bcd185892eded834a2</anchor>
      <arglist>(const IR::Node *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>stepToException</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_abstract_stepper.html</anchorfile>
      <anchor>a26d2913d751745d4a33df25233b46d97</anchor>
      <arglist>(Continuation::Exception)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>checkMemberInvariant</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_abstract_stepper.html</anchorfile>
      <anchor>ad42af989c6247af4d724c26fb0ca5f6f</anchor>
      <arglist>(const IR::Node *node)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>stepToListSubexpr</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_abstract_stepper.html</anchorfile>
      <anchor>a1b6f28c1e7935846db2e82d283d3d127</anchor>
      <arglist>(const IR::BaseListExpression *subexpr, SmallStepEvaluator::Result &amp;result, const ExecutionState &amp;state, std::function&lt; const Continuation::Command(const IR::BaseListExpression *)&gt; rebuildCmd)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>stepToStructSubexpr</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_abstract_stepper.html</anchorfile>
      <anchor>ad243a716c809cf4858f2a2484821451f</anchor>
      <arglist>(const IR::StructExpression *subexpr, SmallStepEvaluator::Result &amp;result, const ExecutionState &amp;state, std::function&lt; const Continuation::Command(const IR::StructExpression *)&gt; rebuildCmd)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>stepToSubexpr</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_abstract_stepper.html</anchorfile>
      <anchor>ab079a992e228db4583ae69f47e206b9f</anchor>
      <arglist>(const IR::Expression *subexpr, SmallStepEvaluator::Result &amp;result, const ExecutionState &amp;state, std::function&lt; const Continuation::Command(const Continuation::Parameter *)&gt; rebuildCmd)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ProgramInfo &amp;</type>
      <name>programInfo</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_abstract_stepper.html</anchorfile>
      <anchor>a75ac740842f5f24e6d47e96fd00be20b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Result</type>
      <name>result</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_abstract_stepper.html</anchorfile>
      <anchor>af6b58f5be8c2ff4d7620131c4d42087e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AbstractSolver &amp;</type>
      <name>solver</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_abstract_stepper.html</anchorfile>
      <anchor>ac641164c76bc655adb62b802c39ebf36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExecutionState &amp;</type>
      <name>state</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_abstract_stepper.html</anchorfile>
      <anchor>a1afb2a2c9ef71943a5e998ba5fa63229</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4Tools::P4Testgen::AbstractTest</name>
    <filename>struct_p4_tools_1_1_p4_testgen_1_1_abstract_test.html</filename>
    <base>ICastable</base>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::ActionArg</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_action_arg.html</filename>
    <base>P4Tools::P4Testgen::TestObject</base>
    <member kind="function">
      <type>const ActionArg *</type>
      <name>evaluate</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_action_arg.html</anchorfile>
      <anchor>a5341ceba449bb2a62cd642f23c01a680</anchor>
      <arglist>(const Model &amp;model, bool doComplete) const override</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>getActionParamName</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_action_arg.html</anchorfile>
      <anchor>a6d64d62bc0c5c059b8aa2f0f65fee503</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IR::Constant *</type>
      <name>getEvaluatedValue</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_action_arg.html</anchorfile>
      <anchor>a063c820ef1a3df569dec5f6d63bddb7e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>getObjectName</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_action_arg.html</anchorfile>
      <anchor>abb1c967fe3b0ea1b1d937327726000e6</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::ActionCall</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_action_call.html</filename>
    <base>P4Tools::P4Testgen::TestObject</base>
    <member kind="function">
      <type>const ActionCall *</type>
      <name>evaluate</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_action_call.html</anchorfile>
      <anchor>a6ea1c1c23ff58242f0bc1470a829cb15</anchor>
      <arglist>(const Model &amp;model, bool doComplete) const override</arglist>
    </member>
    <member kind="function">
      <type>const IR::P4Action *</type>
      <name>getAction</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_action_call.html</anchorfile>
      <anchor>aec22141f309a20a4ee5cbe56544b42c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>getActionName</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_action_call.html</anchorfile>
      <anchor>a955b158c7c080382ae3bcfa2b051ee8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; ActionArg &gt; *</type>
      <name>getArgs</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_action_call.html</anchorfile>
      <anchor>ac62ca4a691c75607977746d8e410e02e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>getObjectName</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_action_call.html</anchorfile>
      <anchor>aeffc61978f10ae9c6bfb6ee446f249e6</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Bmv2::AssertsParser</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_asserts_parser.html</filename>
    <base>Transform</base>
    <member kind="function" static="yes">
      <type>static std::vector&lt; const IR::Expression * &gt;</type>
      <name>genIRStructs</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_asserts_parser.html</anchorfile>
      <anchor>a74d849b786fde611d3af0437bb48b211</anchor>
      <arglist>(cstring tableName, cstring restrictionString, const IdenitifierTypeMap &amp;typeMap)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Bmv2::Bmv2Concolic</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_concolic.html</filename>
    <base>P4Tools::P4Testgen::Concolic</base>
    <member kind="function" static="yes">
      <type>static const ConcolicMethodImpls::ImplList *</type>
      <name>getBmv2ConcolicMethodImpls</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_concolic.html</anchorfile>
      <anchor>a99c11c109828f63a09e60a7f5432f8d6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Bmv2::BMv2Constants</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_b_mv2_constants.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>CloneType</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_b_mv2_constants.html</anchorfile>
      <anchor>acb7664f5f63d38f4149489d3ad1fc817</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>METER_COLOR</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_b_mv2_constants.html</anchorfile>
      <anchor>a4f601b6cec60ab91ae9c43c8cd067b4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr uint16_t</type>
      <name>CLONE_SESSION_ID_MIN</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_b_mv2_constants.html</anchorfile>
      <anchor>a6b5d7f4161872dd329e73be5fb7fa7f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>MATCH_KIND_OPT</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_b_mv2_constants.html</anchorfile>
      <anchor>a64515644eb8a1e7ce202f3908c251d5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>MATCH_KIND_RANGE</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_b_mv2_constants.html</anchorfile>
      <anchor>a386737cc182e284f0e8c9ddb4ee3e48b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>MATCH_KIND_SELECTOR</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_b_mv2_constants.html</anchorfile>
      <anchor>adf362eee9ca25639152845fb64b5d03d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr uint64_t</type>
      <name>PKT_INSTANCE_TYPE_NORMAL</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_b_mv2_constants.html</anchorfile>
      <anchor>a7327dcf5d84a2c2d0930d21cc2d8bfb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>PORT_BIT_WIDTH</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_b_mv2_constants.html</anchorfile>
      <anchor>a95ae3d7b5e0df2f1e4e11ce2ee21ebe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>STF_MIN_PKT_SIZE</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_b_mv2_constants.html</anchorfile>
      <anchor>a974f4194fc80e6a06cabd30d28f0b420</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Bmv2::Bmv2TestBackend</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_test_backend.html</filename>
    <base>P4Tools::P4Testgen::TestBackEnd</base>
    <member kind="function">
      <type>const TestSpec *</type>
      <name>createTestSpec</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_test_backend.html</anchorfile>
      <anchor>a5e15378e21f13c059d2a63d55bea9694</anchor>
      <arglist>(const ExecutionState *executionState, const Model *finalModel, const TestInfo &amp;testInfo) override</arglist>
    </member>
    <member kind="function">
      <type>TestBackEnd::TestInfo</type>
      <name>produceTestInfo</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_test_backend.html</anchorfile>
      <anchor>af2d0aec1ca5404e6361287dc662cab2b</anchor>
      <arglist>(const ExecutionState *executionState, const Model *finalModel, const IR::Expression *outputPacketExpr, const IR::Expression *outputPortExpr, const std::vector&lt; std::reference_wrapper&lt; const TraceEvent &gt; &gt; *programTraces) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Bmv2::Bmv2TestFramework</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_test_framework.html</filename>
    <base>P4Tools::P4Testgen::TestFramework</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual inja::json</type>
      <name>getClone</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_test_framework.html</anchorfile>
      <anchor>a564987bf0d993b54fe810657d25623c2</anchor>
      <arglist>(const TestObjectMap &amp;cloneSpecs) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual inja::json</type>
      <name>getControlPlane</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_test_framework.html</anchorfile>
      <anchor>ace0eec633f57e3fdf9fcb32e32370eb4</anchor>
      <arglist>(const TestSpec *testSpec) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual inja::json</type>
      <name>getControlPlaneForTable</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_test_framework.html</anchorfile>
      <anchor>a99da2d38fc14a6a1814ad0e255f8b0b8</anchor>
      <arglist>(const TableMatchMap &amp;matches, const std::vector&lt; ActionArg &gt; &amp;args) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual inja::json</type>
      <name>getControlPlaneTable</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_test_framework.html</anchorfile>
      <anchor>a9eb31f1407e251dd5c9b37182d017831</anchor>
      <arglist>(const TableConfig &amp;tblConfig) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual inja::json</type>
      <name>getExpectedPacket</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_test_framework.html</anchorfile>
      <anchor>a9f9beba1630e09d38639e2c96a96a9a8</anchor>
      <arglist>(const TestSpec *testSpec) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual inja::json::array_t</type>
      <name>getMeter</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_test_framework.html</anchorfile>
      <anchor>a69d6282d296f643302233f13de55ee35</anchor>
      <arglist>(const TestObjectMap &amp;meterValues) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual inja::json</type>
      <name>getSend</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_test_framework.html</anchorfile>
      <anchor>a32026222851714c77203154f2b412a84</anchor>
      <arglist>(const TestSpec *testSpec) const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::string</type>
      <name>formatHexExpressionWithSeparators</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_test_framework.html</anchorfile>
      <anchor>af9c02687e0fa1167acbdf24f36ba873c</anchor>
      <arglist>(const IR::Expression &amp;expr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Bmv2::Bmv2V1ModelActionProfile</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_action_profile.html</filename>
    <base>P4Tools::P4Testgen::TestObject</base>
    <member kind="function">
      <type>void</type>
      <name>addToActionMap</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_action_profile.html</anchorfile>
      <anchor>abecbb1603514775b174fb04803d524aa</anchor>
      <arglist>(cstring actionName, std::vector&lt; ActionArg &gt; actionArgs)</arglist>
    </member>
    <member kind="function">
      <type>const Bmv2V1ModelActionProfile *</type>
      <name>evaluate</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_action_profile.html</anchorfile>
      <anchor>ab3fb0a1c2646df63cb739d3ebc4f71ed</anchor>
      <arglist>(const Model &amp;model, bool doComplete) const override</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getActionMapSize</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_action_profile.html</anchorfile>
      <anchor>a3eab7e373f6436127990e64117122d74</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::pair&lt; cstring, std::vector&lt; ActionArg &gt; &gt; &gt; *</type>
      <name>getActions</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_action_profile.html</anchorfile>
      <anchor>a11a26ce9c34df2a33c1345b1193242e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>getObjectName</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_action_profile.html</anchorfile>
      <anchor>a38cb933b4a512851b432ceebfc23098e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const IR::IDeclaration *</type>
      <name>getProfileDecl</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_action_profile.html</anchorfile>
      <anchor>a869e05fd8d062b24c6489db15d852c82</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Bmv2::Bmv2V1ModelActionSelector</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_action_selector.html</filename>
    <base>P4Tools::P4Testgen::TestObject</base>
    <member kind="function">
      <type>const Bmv2V1ModelActionSelector *</type>
      <name>evaluate</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_action_selector.html</anchorfile>
      <anchor>a84701a84200a17a808b96f2aa670f6e2</anchor>
      <arglist>(const Model &amp;model, bool doComplete) const override</arglist>
    </member>
    <member kind="function">
      <type>const Bmv2V1ModelActionProfile *</type>
      <name>getActionProfile</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_action_selector.html</anchorfile>
      <anchor>a208c4ef7b2581f5c4a7592373d879ed7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>getObjectName</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_action_selector.html</anchorfile>
      <anchor>a960da255adfb7ed27c7a9e6aca89287d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const IR::IDeclaration *</type>
      <name>getSelectorDecl</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_action_selector.html</anchorfile>
      <anchor>afdee5c3db53d3d7a75c65adc8f764868</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Bmv2::Bmv2V1ModelCloneInfo</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_clone_info.html</filename>
    <base>P4Tools::P4Testgen::TestObject</base>
    <member kind="function">
      <type>const Bmv2V1ModelCloneInfo *</type>
      <name>evaluate</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_clone_info.html</anchorfile>
      <anchor>ab230c9f23981d908e7ebfbe247938558</anchor>
      <arglist>(const Model &amp;model, bool doComplete) const override</arglist>
    </member>
    <member kind="function">
      <type>const ExecutionState &amp;</type>
      <name>getClonedState</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_clone_info.html</anchorfile>
      <anchor>ab7d418c7472f54cc5e5d90aadf01dc6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BMv2Constants::CloneType</type>
      <name>getCloneType</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_clone_info.html</anchorfile>
      <anchor>a998f0836d0d1c68cd754a78293272e93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>getObjectName</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_clone_info.html</anchorfile>
      <anchor>acdaa602546a47b3d673f037425e4ee43</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; int &gt;</type>
      <name>getPreserveIndex</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_clone_info.html</anchorfile>
      <anchor>a810981be5a1bab1cd87a6d5196903f62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IR::Expression *</type>
      <name>getSessionId</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_clone_info.html</anchorfile>
      <anchor>aba90e429661469f6ab11cd48c8f41cf9</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Bmv2::Bmv2V1ModelCloneSpec</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_clone_spec.html</filename>
    <base>P4Tools::P4Testgen::TestObject</base>
    <member kind="function">
      <type>const Bmv2V1ModelCloneSpec *</type>
      <name>evaluate</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_clone_spec.html</anchorfile>
      <anchor>a4f90b87c8a6b6e21029416b17b75e687</anchor>
      <arglist>(const Model &amp;model, bool doComplete) const override</arglist>
    </member>
    <member kind="function">
      <type>const IR::Expression *</type>
      <name>getClonePort</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_clone_spec.html</anchorfile>
      <anchor>a3412bd9ada02947ef005b22f5017612b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IR::Constant *</type>
      <name>getEvaluatedClonePort</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_clone_spec.html</anchorfile>
      <anchor>ac3d7b56e3308ae1944b7d18652a1b9c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IR::Constant *</type>
      <name>getEvaluatedSessionId</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_clone_spec.html</anchorfile>
      <anchor>a770967006eb3bc633c1507fdf49414a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>getObjectName</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_clone_spec.html</anchorfile>
      <anchor>aa38dc63990cbb32dd517c1d63b42d82b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const IR::Expression *</type>
      <name>getSessionId</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_clone_spec.html</anchorfile>
      <anchor>ac58640109a4b1584efc865b83131e8b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isClonedPacket</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_clone_spec.html</anchorfile>
      <anchor>a874aae3d60e491030c3f0b6690945967</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Bmv2::Bmv2V1ModelCmdStepper</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_cmd_stepper.html</filename>
    <base>P4Tools::P4Testgen::CmdStepper</base>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>getClassName</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_cmd_stepper.html</anchorfile>
      <anchor>a7f9beba3e7efc89fa7afe993f02cbf7f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::map&lt; Continuation::Exception, Continuation &gt;</type>
      <name>getExceptionHandlers</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_cmd_stepper.html</anchorfile>
      <anchor>a4e63da70ac1b82a99eb3d79b6112171a</anchor>
      <arglist>(const IR::P4Parser *parser, Continuation::Body normalContinuation, const ExecutionState &amp;nextState) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initializeTargetEnvironment</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_cmd_stepper.html</anchorfile>
      <anchor>a50bce38d18f59b4530b21e659cf6e4d6</anchor>
      <arglist>(ExecutionState &amp;nextState) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::optional&lt; const Constraint * &gt;</type>
      <name>startParserImpl</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_cmd_stepper.html</anchorfile>
      <anchor>a3b7510e8d0d76a7e07e1958d74994c8d</anchor>
      <arglist>(const IR::P4Parser *parser, ExecutionState &amp;nextState) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Bmv2::BMv2V1ModelCompilerResult</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_b_mv2_v1_model_compiler_result.html</filename>
    <base>P4Tools::P4Testgen::TestgenCompilerResult</base>
    <member kind="function">
      <type>const DirectExternMap &amp;</type>
      <name>getDirectExternMap</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_b_mv2_v1_model_compiler_result.html</anchorfile>
      <anchor>ab7d640891d60228abd4792688e12fcd6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstraintsVector</type>
      <name>getP4ConstraintsRestrictions</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_b_mv2_v1_model_compiler_result.html</anchorfile>
      <anchor>a8fdbc3208041ed39ee60ffe5d6b74838</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const P4::P4RuntimeAPI &amp;</type>
      <name>getP4RuntimeApi</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_b_mv2_v1_model_compiler_result.html</anchorfile>
      <anchor>abd83d6b12ece7797e4ae1852b4486bb9</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Bmv2::Bmv2V1ModelCompilerTarget</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_compiler_target.html</filename>
    <base>P4Tools::P4Testgen::TestgenCompilerTarget</base>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>make</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_compiler_target.html</anchorfile>
      <anchor>ae1726d82fd7c3f261947e68d1a26c642</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Bmv2::Bmv2V1ModelExprStepper</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_expr_stepper.html</filename>
    <base>P4Tools::P4Testgen::ExprStepper</base>
    <member kind="function">
      <type>void</type>
      <name>evalExternMethodCall</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_expr_stepper.html</anchorfile>
      <anchor>ae4647b41712825e4377a5da69af612a6</anchor>
      <arglist>(const IR::MethodCallExpression *call, const IR::Expression *receiver, IR::ID name, const IR::Vector&lt; IR::Argument &gt; *args, ExecutionState &amp;state) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>getClassName</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_expr_stepper.html</anchorfile>
      <anchor>afb1aa8f79933f93b12a245fad728837f</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Bmv2::Bmv2V1ModelMeterValue</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_meter_value.html</filename>
    <base>P4Tools::P4Testgen::Bmv2::IndexMap</base>
    <member kind="function">
      <type>const Bmv2V1ModelMeterValue *</type>
      <name>evaluate</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_meter_value.html</anchorfile>
      <anchor>a30c7d4869900c7d1a755e555e8fe66b6</anchor>
      <arglist>(const Model &amp;model, bool doComplete) const override</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>getObjectName</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_meter_value.html</anchorfile>
      <anchor>a414cfbb025c0c93187e28a487b156d11</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDirectMeter</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_meter_value.html</anchorfile>
      <anchor>a00bef06f73ab62e82190b2820b4dcf10</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Bmv2::Bmv2V1ModelProgramInfo</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_program_info.html</filename>
    <base>P4Tools::P4Testgen::ProgramInfo</base>
    <member kind="function">
      <type></type>
      <name>Bmv2V1ModelProgramInfo</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_program_info.html</anchorfile>
      <anchor>a4d0720f9353be22cfbd5a72769143a26</anchor>
      <arglist>(const BMv2V1ModelCompilerResult &amp;compilerResult, ordered_map&lt; cstring, const IR::Type_Declaration * &gt; inputBlocks, std::map&lt; int, int &gt; declIdToGress)</arglist>
    </member>
    <member kind="function">
      <type>const IR::Expression *</type>
      <name>dropIsActive</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_program_info.html</anchorfile>
      <anchor>a8aa87e3612121ea1c2adf27333b368d5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const ArchSpec &amp;</type>
      <name>getArchSpec</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_program_info.html</anchorfile>
      <anchor>a2d3bf9844c46561631dc7679e7793ed6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const IR::PathExpression *</type>
      <name>getBlockParam</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_program_info.html</anchorfile>
      <anchor>a25a33332480820739c3ab29435bad0f8</anchor>
      <arglist>(cstring blockLabel, size_t paramIndex) const</arglist>
    </member>
    <member kind="function">
      <type>const BMv2V1ModelCompilerResult &amp;</type>
      <name>getCompilerResult</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_program_info.html</anchorfile>
      <anchor>a48fca65b0746f7d9128b7e6db50fbcc8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGress</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_program_info.html</anchorfile>
      <anchor>a066144e5cad38bfcbbe86dc577822b29</anchor>
      <arglist>(const IR::Type_Declaration *) const</arglist>
    </member>
    <member kind="function">
      <type>P4::P4RuntimeAPI</type>
      <name>getP4RuntimeAPI</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_program_info.html</anchorfile>
      <anchor>ace1c13073d0a30f6e0e9b595e64f8ce7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ordered_map&lt; cstring, const IR::Type_Declaration * &gt; *</type>
      <name>getProgrammableBlocks</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_program_info.html</anchorfile>
      <anchor>ad997bf24abcebc9c4b9835fb1b28d78f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IR::P4Table *</type>
      <name>getTableofDirectExtern</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_program_info.html</anchorfile>
      <anchor>a3e302fd927bcdef219ed6bef8309ee66</anchor>
      <arglist>(const IR::IDeclaration *directExternDecl) const</arglist>
    </member>
    <member kind="function">
      <type>const IR::StateVariable &amp;</type>
      <name>getTargetInputPortVar</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_program_info.html</anchorfile>
      <anchor>a53efb3e36cc26b841e9021c0f9363a07</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const IR::StateVariable &amp;</type>
      <name>getTargetOutputPortVar</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_program_info.html</anchorfile>
      <anchor>aea3b2bbfae1a0a897c63cd3682788c2c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const IR::Member *</type>
      <name>getParserParamVar</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_program_info.html</anchorfile>
      <anchor>a090c52adedd8889629661bed828827e4</anchor>
      <arglist>(const IR::P4Parser *parser, const IR::Type *type, size_t paramIndex, cstring paramLabel)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const IR::Expression *</type>
      <name>getPortConstraint</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_program_info.html</anchorfile>
      <anchor>a1c041fcfaaf30ca8cb8a9ac23c6db12b</anchor>
      <arglist>(const IR::StateVariable &amp;portVar, const std::vector&lt; std::pair&lt; int, int &gt; &gt; &amp;permittedPortRanges)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArchSpec</type>
      <name>ARCH_SPEC</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_program_info.html</anchorfile>
      <anchor>a7fc6d22de047deee7ead92c183e85f8f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Bmv2::Bmv2V1ModelRegisterValue</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_register_value.html</filename>
    <base>P4Tools::P4Testgen::Bmv2::IndexMap</base>
    <member kind="function">
      <type>const Bmv2V1ModelRegisterValue *</type>
      <name>evaluate</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_register_value.html</anchorfile>
      <anchor>a33f5e25d49f64aec7484978a1e12e838</anchor>
      <arglist>(const Model &amp;model, bool doComplete) const override</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>getObjectName</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_register_value.html</anchorfile>
      <anchor>a729e17543919fad620db86d10bde3242</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Bmv2::Bmv2V1ModelTableStepper</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_table_stepper.html</filename>
    <base>P4Tools::P4Testgen::TableStepper</base>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkTargetProperties</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_table_stepper.html</anchorfile>
      <anchor>aedd34e7c4308db6038117d24780472ab</anchor>
      <arglist>(const std::vector&lt; const IR::ActionListElement * &gt; &amp;tableActionList) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IR::Expression *</type>
      <name>computeTargetMatchType</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_table_stepper.html</anchorfile>
      <anchor>a9c3391f3be41d40a5eb0d927b186dae4</anchor>
      <arglist>(const TableUtils::KeyProperties &amp;keyProperties, TableMatchMap *matches, const IR::Expression *hitCondition) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>evalTargetTable</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_table_stepper.html</anchorfile>
      <anchor>a0970daeea3f9b7ae76fb5ec1a51f15cd</anchor>
      <arglist>(const std::vector&lt; const IR::ActionListElement * &gt; &amp;tableActionList) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Bmv2::Bmv2V1ModelTestgenTarget</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_testgen_target.html</filename>
    <base>P4Tools::P4Testgen::TestgenTarget</base>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>make</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_testgen_target.html</anchorfile>
      <anchor>a68a2df3183d6295a42063ece6bbedd1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Bmv2V1ModelCmdStepper *</type>
      <name>getCmdStepperImpl</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_testgen_target.html</anchorfile>
      <anchor>a59059d23dad32da86c323902578099dd</anchor>
      <arglist>(ExecutionState &amp;state, AbstractSolver &amp;solver, const ProgramInfo &amp;programInfo) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Bmv2V1ModelExprStepper *</type>
      <name>getExprStepperImpl</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_testgen_target.html</anchorfile>
      <anchor>abdc4347c63ae036e9c0ef78b3d2ee93e</anchor>
      <arglist>(ExecutionState &amp;state, AbstractSolver &amp;solver, const ProgramInfo &amp;programInfo) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Bmv2TestBackend *</type>
      <name>getTestBackendImpl</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_testgen_target.html</anchorfile>
      <anchor>af97db6a20af8d29395e4e53c29fec174</anchor>
      <arglist>(const ProgramInfo &amp;programInfo, const TestBackendConfiguration &amp;testBackendConfiguration, SymbolicExecutor &amp;symbex) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Bmv2V1ModelProgramInfo *</type>
      <name>produceProgramInfoImpl</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_bmv2_v1_model_testgen_target.html</anchorfile>
      <anchor>a02d62927075468c5b34518799f6c6a60</anchor>
      <arglist>(const CompilerResult &amp;compilerResult, const IR::Declaration_Instance *mainDecl) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Bmv2::IndexExpression</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_index_expression.html</filename>
    <base>P4Tools::P4Testgen::TestObject</base>
    <member kind="function">
      <type>const IndexExpression *</type>
      <name>evaluate</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_index_expression.html</anchorfile>
      <anchor>a4019cad21003b4160af31dc41d3ef5c0</anchor>
      <arglist>(const Model &amp;model, bool doComplete) const override</arglist>
    </member>
    <member kind="function">
      <type>const IR::Constant *</type>
      <name>getEvaluatedIndex</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_index_expression.html</anchorfile>
      <anchor>ae97610801f0f193302b4da33ee714e6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IR::Constant *</type>
      <name>getEvaluatedValue</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_index_expression.html</anchorfile>
      <anchor>abe15b742934decb7350d46fb984a5a8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IR::Expression *</type>
      <name>getIndex</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_index_expression.html</anchorfile>
      <anchor>a7f4068b3a87bbdcfeb5615652b77bc8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>getObjectName</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_index_expression.html</anchorfile>
      <anchor>a9424cb0afa7e15e2441b6816fa04e519</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const IR::Expression *</type>
      <name>getValue</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_index_expression.html</anchorfile>
      <anchor>a2a74a9aa0ffc16d24dbe27f21578e3f9</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Bmv2::IndexMap</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_index_map.html</filename>
    <base>P4Tools::P4Testgen::TestObject</base>
    <member kind="function">
      <type>const IR::Constant *</type>
      <name>getEvaluatedInitialValue</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_index_map.html</anchorfile>
      <anchor>aeb8f52f89ba2cc41f05f0f6026110f7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IR::Expression *</type>
      <name>getInitialValue</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_index_map.html</anchorfile>
      <anchor>a73f45b62b6bebac18a779d6803e92cb5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IR::Expression *</type>
      <name>getValueAtIndex</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_index_map.html</anchorfile>
      <anchor>aa50394fb3cce55577fc523395a1912e4</anchor>
      <arglist>(const IR::Expression *index) const</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; big_int, std::pair&lt; int, const IR::Constant * &gt; &gt;</type>
      <name>unravelMap</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_index_map.html</anchorfile>
      <anchor>a04dd931e87da3ca92cec9842ae95e4db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeToIndex</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_index_map.html</anchorfile>
      <anchor>a5a8567e0436d81c1eb571ca1697887fb</anchor>
      <arglist>(const IR::Expression *index, const IR::Expression *value)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IndexExpression &gt;</type>
      <name>indexConditions</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_index_map.html</anchorfile>
      <anchor>ae32cfea886b2f60e7320c82723f696bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const IR::Expression *</type>
      <name>initialValue</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_index_map.html</anchorfile>
      <anchor>a50bfe7558c17a7a0dcd8e51008e11495</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Bmv2::Lexer</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_lexer.html</filename>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Bmv2::MapDirectExterns</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_map_direct_externs.html</filename>
    <base>Inspector</base>
    <member kind="function">
      <type>const DirectExternMap &amp;</type>
      <name>getDirectExternMap</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_map_direct_externs.html</anchorfile>
      <anchor>abeda3aff369d1b243185171e6987799d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Bmv2::Metadata</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_metadata.html</filename>
    <base>P4Tools::P4Testgen::Bmv2::Bmv2TestFramework</base>
    <member kind="function">
      <type>void</type>
      <name>writeTestToFile</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_metadata.html</anchorfile>
      <anchor>a1ac21ab09007494bfb19f8342eb17e65</anchor>
      <arglist>(const TestSpec *spec, cstring selectedBranches, size_t testId, float currentCoverage) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Bmv2::MetadataCollection</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_metadata_collection.html</filename>
    <base>P4Tools::P4Testgen::TestObject</base>
    <member kind="function">
      <type>void</type>
      <name>addMetaDataField</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_metadata_collection.html</anchorfile>
      <anchor>a275012f78f0dab1c25bc5ffa9c489cbf</anchor>
      <arglist>(cstring name, const IR::Literal *metadataField)</arglist>
    </member>
    <member kind="function">
      <type>const MetadataCollection *</type>
      <name>evaluate</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_metadata_collection.html</anchorfile>
      <anchor>a0407825fa0f8f238e43a534d9f0f67ac</anchor>
      <arglist>(const Model &amp;, bool doComplete) const override</arglist>
    </member>
    <member kind="function">
      <type>const IR::Literal *</type>
      <name>getMetadataField</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_metadata_collection.html</anchorfile>
      <anchor>a36a45895651cd2641ba476a14918e546</anchor>
      <arglist>(cstring name)</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; cstring, const IR::Literal * &gt; &amp;</type>
      <name>getMetadataFields</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_metadata_collection.html</anchorfile>
      <anchor>a0fa075293ac8413a6347d98ff15718c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>getObjectName</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_metadata_collection.html</anchorfile>
      <anchor>a733ef9ecc3472e448370513fdb29cb72</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Bmv2::Optional</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_optional.html</filename>
    <base>P4Tools::P4Testgen::TableMatch</base>
    <member kind="function">
      <type>bool</type>
      <name>addAsExactMatch</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_optional.html</anchorfile>
      <anchor>ac0476a5892777b7169b9c86553b4537c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Optional *</type>
      <name>evaluate</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_optional.html</anchorfile>
      <anchor>af7948240bdf4825e164e0a10e849275f</anchor>
      <arglist>(const Model &amp;model, bool doComplete) const override</arglist>
    </member>
    <member kind="function">
      <type>const IR::Constant *</type>
      <name>getEvaluatedValue</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_optional.html</anchorfile>
      <anchor>ae715d8f5399b492189ae6341df81a581</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>getObjectName</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_optional.html</anchorfile>
      <anchor>abf07309250697534387b3146cb35b45a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Bmv2::PropagateP4RuntimeTranslation</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_propagate_p4_runtime_translation.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Bmv2::Protobuf</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_protobuf.html</filename>
    <base>P4Tools::P4Testgen::Bmv2::Bmv2TestFramework</base>
    <member kind="function">
      <type>AbstractTestReferenceOrError</type>
      <name>produceTest</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_protobuf.html</anchorfile>
      <anchor>af5c2f22cba9a60709a7fec4a32c47f87</anchor>
      <arglist>(const TestSpec *testSpec, cstring selectedBranches, size_t testIdx, float currentCoverage) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeTestToFile</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_protobuf.html</anchorfile>
      <anchor>ae9ec9c53bcc9683c1e54f068d1c274c3</anchor>
      <arglist>(const TestSpec *testSpec, cstring selectedBranches, size_t testId, float currentCoverage) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Bmv2::ProtobufIr</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_protobuf_ir.html</filename>
    <base>P4Tools::P4Testgen::Bmv2::Bmv2TestFramework</base>
    <member kind="function">
      <type>AbstractTestReferenceOrError</type>
      <name>produceTest</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_protobuf_ir.html</anchorfile>
      <anchor>ab6a1aa03d4aa013b15cd1c0cae332f93</anchor>
      <arglist>(const TestSpec *testSpec, cstring selectedBranches, size_t testIdx, float currentCoverage) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeTestToFile</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_protobuf_ir.html</anchorfile>
      <anchor>af2bcf7682c933f43547a461cea5152d1</anchor>
      <arglist>(const TestSpec *testSpec, cstring selectedBranches, size_t testId, float currentCoverage) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4Tools::P4Testgen::Bmv2::ProtobufIrTest</name>
    <filename>struct_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_protobuf_ir_test.html</filename>
    <base>P4Tools::P4Testgen::AbstractTest</base>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getFormattedTest</name>
      <anchorfile>struct_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_protobuf_ir_test.html</anchorfile>
      <anchor>aff561d4dc30324e2b524789e51385eb5</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4Tools::P4Testgen::Bmv2::ProtobufTest</name>
    <filename>struct_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_protobuf_test.html</filename>
    <base>P4Tools::P4Testgen::AbstractTest</base>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getFormattedTest</name>
      <anchorfile>struct_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_protobuf_test.html</anchorfile>
      <anchor>a04536aec064f95380cf36723a807a067</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Bmv2::PTF</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_p_t_f.html</filename>
    <base>P4Tools::P4Testgen::Bmv2::Bmv2TestFramework</base>
    <member kind="function">
      <type>void</type>
      <name>writeTestToFile</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_p_t_f.html</anchorfile>
      <anchor>aea82a9ad510f9f24807877ed030d57b9</anchor>
      <arglist>(const TestSpec *spec, cstring selectedBranches, size_t testId, float currentCoverage) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Bmv2::Range</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_range.html</filename>
    <base>P4Tools::P4Testgen::TableMatch</base>
    <member kind="function">
      <type>const Range *</type>
      <name>evaluate</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_range.html</anchorfile>
      <anchor>aef5750636b745d3aa32b109de0d870d6</anchor>
      <arglist>(const Model &amp;model, bool doComplete) const override</arglist>
    </member>
    <member kind="function">
      <type>const IR::Constant *</type>
      <name>getEvaluatedHigh</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_range.html</anchorfile>
      <anchor>a82f3fd491137f3a9bafaa2373e459408</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IR::Constant *</type>
      <name>getEvaluatedLow</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_range.html</anchorfile>
      <anchor>a92b4d58ca428fdec3895a153afa1dccc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>getObjectName</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_range.html</anchorfile>
      <anchor>ab350c24f693a0dc28c11783148fd2ddc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Bmv2::RefersToParser</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_refers_to_parser.html</filename>
    <base>Inspector</base>
    <member kind="function">
      <type>ConstraintsVector</type>
      <name>getRestrictionsVector</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_refers_to_parser.html</anchorfile>
      <anchor>a28dc3f79b9964fe4be00b7109a5bdc11</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Bmv2::STF</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_s_t_f.html</filename>
    <base>P4Tools::P4Testgen::Bmv2::Bmv2TestFramework</base>
    <member kind="function">
      <type>void</type>
      <name>writeTestToFile</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_s_t_f.html</anchorfile>
      <anchor>ab6e7caeb35d0184a645d668b0576c001</anchor>
      <arglist>(const TestSpec *spec, cstring selectedBranches, size_t testId, float currentCoverage) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Bmv2::Token</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_token.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>is</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_token.html</anchorfile>
      <anchor>aa40158ba296ea5f5a7039882609bc62b</anchor>
      <arglist>(Kind kind) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNot</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_token.html</anchorfile>
      <anchor>a2c7186be0fe1c5c46edf2cf65f5a8541</anchor>
      <arglist>(Kind kind) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOneOf</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_token.html</anchorfile>
      <anchor>aade21485cadcbda7b2d99530431c81a5</anchor>
      <arglist>(Kind k1, Kind k2) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Kind</type>
      <name>kind</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_token.html</anchorfile>
      <anchor>ae1239f703e23ac0fc8099b72231d7e34</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>kind</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_token.html</anchorfile>
      <anchor>af47078ac1f5b0679167d9b7a2cc0f7fc</anchor>
      <arglist>(Kind kind) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::string_view</type>
      <name>lexeme</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_token.html</anchorfile>
      <anchor>a669a11818f725f1accb85bbbd6a94a9a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lexeme</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_bmv2_1_1_token.html</anchorfile>
      <anchor>a657046c2e3dc39b9b17b8f750f7a44b4</anchor>
      <arglist>(std::string_view lexeme) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::CmdStepper</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_cmd_stepper.html</filename>
    <base>P4Tools::P4Testgen::AbstractStepper</base>
    <member kind="function">
      <type>bool</type>
      <name>preorder</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_cmd_stepper.html</anchorfile>
      <anchor>a9dd9b518bec13dde1804e8433a145d23</anchor>
      <arglist>(const IR::P4Program *program) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>preorder</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_cmd_stepper.html</anchorfile>
      <anchor>a2533564c2fea964d812c8aef499cb959</anchor>
      <arglist>(const IR::SwitchStatement *switchStatement) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual std::map&lt; Continuation::Exception, Continuation &gt;</type>
      <name>getExceptionHandlers</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_cmd_stepper.html</anchorfile>
      <anchor>a11cd51cf592730da3708547da46611d2</anchor>
      <arglist>(const IR::P4Parser *parser, Continuation::Body normalContinuation, const ExecutionState &amp;state) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>initializeTargetEnvironment</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_cmd_stepper.html</anchorfile>
      <anchor>afd930fca315f20e327a9867c8f2abe47</anchor>
      <arglist>(ExecutionState &amp;state) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Constraint *</type>
      <name>startParser</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_cmd_stepper.html</anchorfile>
      <anchor>a65e699e62710bb63f4bedad3f2c19a42</anchor>
      <arglist>(const IR::P4Parser *parser, ExecutionState &amp;state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual std::optional&lt; const Constraint * &gt;</type>
      <name>startParserImpl</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_cmd_stepper.html</anchorfile>
      <anchor>aa205ed1c777728e5759681975522bd6b</anchor>
      <arglist>(const IR::P4Parser *parser, ExecutionState &amp;state) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::CommandVisitor</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_command_visitor.html</filename>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Concolic</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_concolic.html</filename>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::ConcolicMethodImpls</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_concolic_method_impls.html</filename>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::ConcolicResolver</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_concolic_resolver.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Continuation</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_continuation.html</filename>
    <class kind="class">P4Tools::P4Testgen::Continuation::Body</class>
    <class kind="struct">P4Tools::P4Testgen::Continuation::Guard</class>
    <class kind="class">P4Tools::P4Testgen::Continuation::Parameter</class>
    <class kind="struct">P4Tools::P4Testgen::Continuation::PropertyUpdate</class>
    <class kind="struct">P4Tools::P4Testgen::Continuation::Return</class>
    <member kind="enumeration">
      <type></type>
      <name>Exception</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_continuation.html</anchorfile>
      <anchor>abf987646a8aeb7258e38692c57b52942</anchor>
      <arglist></arglist>
      <enumvalue file="class_p4_tools_1_1_p4_testgen_1_1_continuation.html" anchor="abf987646a8aeb7258e38692c57b52942afef46e5063ce3dc78b8ae64fa474241d">Exit</enumvalue>
      <enumvalue file="class_p4_tools_1_1_p4_testgen_1_1_continuation.html" anchor="abf987646a8aeb7258e38692c57b52942ac8b77721c677e0429241a9250972122d">NoMatch</enumvalue>
      <enumvalue file="class_p4_tools_1_1_p4_testgen_1_1_continuation.html" anchor="abf987646a8aeb7258e38692c57b52942ad98ac12774fca5c3cbaffe276840c55f">Reject</enumvalue>
      <enumvalue file="class_p4_tools_1_1_p4_testgen_1_1_continuation.html" anchor="abf987646a8aeb7258e38692c57b52942a3e679cff5b3a6f6f8f32aead541a0a12">Drop</enumvalue>
      <enumvalue file="class_p4_tools_1_1_p4_testgen_1_1_continuation.html" anchor="abf987646a8aeb7258e38692c57b52942a21b21f9ae0165b78d1303cca26cacca9">PacketTooShort</enumvalue>
      <enumvalue file="class_p4_tools_1_1_p4_testgen_1_1_continuation.html" anchor="abf987646a8aeb7258e38692c57b52942a727b63583e01fa2b3952dab580c84dc2">Abort</enumvalue>
    </member>
    <member kind="typedef">
      <type>std::variant&lt; cstring, uint64_t, int64_t, bool, const IR::Expression * &gt;</type>
      <name>PropertyValue</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_continuation.html</anchorfile>
      <anchor>a23690f771c6c47b012980d5138e1627f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Continuation</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_continuation.html</anchorfile>
      <anchor>a9e1c90edca7e255819d6641474a071f2</anchor>
      <arglist>(Body body)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Continuation</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_continuation.html</anchorfile>
      <anchor>a5ad12ec3aced745071cf3072e768e604</anchor>
      <arglist>(std::optional&lt; const Parameter * &gt; parameterOpt, Body body)</arglist>
    </member>
    <member kind="function">
      <type>Body</type>
      <name>apply</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_continuation.html</anchorfile>
      <anchor>a5a8be33f16aa19bc86e0b327815c4838</anchor>
      <arglist>(std::optional&lt; const IR::Node * &gt; value_opt) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Parameter *</type>
      <name>genParameter</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_continuation.html</anchorfile>
      <anchor>ad728a16718927dd802050b4158c7faa3</anchor>
      <arglist>(const IR::Type *type, cstring name, const NamespaceContext *ctx)</arglist>
    </member>
    <member kind="variable">
      <type>std::optional&lt; const IR::PathExpression * &gt;</type>
      <name>parameterOpt</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_continuation.html</anchorfile>
      <anchor>afe668276e2a0ac043c31b85f5589741f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_continuation.html</anchorfile>
      <anchor>a298e1780793ff9ab695906820b00634e</anchor>
      <arglist>(std::ostream &amp;out, const Exception value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Continuation::Body</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_continuation_1_1_body.html</filename>
    <member kind="function">
      <type></type>
      <name>Body</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_continuation_1_1_body.html</anchorfile>
      <anchor>a5c175f23f269163858d7090bb6365e7f</anchor>
      <arglist>(const std::vector&lt; Command &gt; &amp;cmds)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Body</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_continuation_1_1_body.html</anchorfile>
      <anchor>aecd7cf85c9aa485d6c29bdc0674d380f</anchor>
      <arglist>(std::initializer_list&lt; Command &gt; cmds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_continuation_1_1_body.html</anchorfile>
      <anchor>a0ae93da36a33d37dd4c453de719dc21e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_continuation_1_1_body.html</anchorfile>
      <anchor>aeb5102bca5e4716fdf6a364b2b7f8cd2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Command</type>
      <name>next</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_continuation_1_1_body.html</anchorfile>
      <anchor>a1387daaba8a0ae066adffdafd34573da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_continuation_1_1_body.html</anchorfile>
      <anchor>a93b27deb731a3107654052f0e845d6f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_continuation_1_1_body.html</anchorfile>
      <anchor>a1e7e8ab0f1d2afd72770c187c5d85ed5</anchor>
      <arglist>(Command cmd)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4Tools::P4Testgen::Continuation::Guard</name>
    <filename>struct_p4_tools_1_1_p4_testgen_1_1_continuation_1_1_guard.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>struct_p4_tools_1_1_p4_testgen_1_1_continuation_1_1_guard.html</anchorfile>
      <anchor>a9544bd6c8559b72d8a1241ed4961d673</anchor>
      <arglist>(const Guard &amp;other) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Continuation::Parameter</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_continuation_1_1_parameter.html</filename>
  </compound>
  <compound kind="struct">
    <name>P4Tools::P4Testgen::Continuation::PropertyUpdate</name>
    <filename>struct_p4_tools_1_1_p4_testgen_1_1_continuation_1_1_property_update.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>struct_p4_tools_1_1_p4_testgen_1_1_continuation_1_1_property_update.html</anchorfile>
      <anchor>ab7a6962b814f969d40ad64c51c4f07a7</anchor>
      <arglist>(const PropertyUpdate &amp;other) const</arglist>
    </member>
    <member kind="variable">
      <type>PropertyValue</type>
      <name>property</name>
      <anchorfile>struct_p4_tools_1_1_p4_testgen_1_1_continuation_1_1_property_update.html</anchorfile>
      <anchor>a13b162cbda7bf9114c8c20be110be9ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cstring</type>
      <name>propertyName</name>
      <anchorfile>struct_p4_tools_1_1_p4_testgen_1_1_continuation_1_1_property_update.html</anchorfile>
      <anchor>a0b1f87a9c9c35fa82d803f283ff6e222</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4Tools::P4Testgen::Continuation::Return</name>
    <filename>struct_p4_tools_1_1_p4_testgen_1_1_continuation_1_1_return.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>struct_p4_tools_1_1_p4_testgen_1_1_continuation_1_1_return.html</anchorfile>
      <anchor>a23a6042a7d0d7cea76c93cebc5256e92</anchor>
      <arglist>(const Return &amp;other) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::CoverableNodesScanner</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_coverable_nodes_scanner.html</filename>
    <base>Inspector</base>
    <member kind="function">
      <type>const P4::Coverage::CoverageSet &amp;</type>
      <name>getCoverableNodes</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_coverable_nodes_scanner.html</anchorfile>
      <anchor>a3132d4df7849810ee2f514b84cfac29c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateNodeCoverage</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_coverable_nodes_scanner.html</anchorfile>
      <anchor>a66e4bcc3f0c796c5104cf75bd21a33a9</anchor>
      <arglist>(const IR::Node *node, P4::Coverage::CoverageSet &amp;nodes)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::DepthFirstSearch</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_depth_first_search.html</filename>
    <base>P4Tools::P4Testgen::SymbolicExecutor</base>
    <member kind="function">
      <type></type>
      <name>DepthFirstSearch</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_depth_first_search.html</anchorfile>
      <anchor>aed5c51df44ff004e7333a0e4dc8fd8d4</anchor>
      <arglist>(AbstractSolver &amp;solver, const ProgramInfo &amp;programInfo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runImpl</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_depth_first_search.html</anchorfile>
      <anchor>aad312c67a871a53e8d37d328b63b5d29</anchor>
      <arglist>(const Callback &amp;callBack, ExecutionStateReference executionState) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::EBPF::EBPFCmdStepper</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_e_b_p_f_1_1_e_b_p_f_cmd_stepper.html</filename>
    <base>P4Tools::P4Testgen::CmdStepper</base>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>getClassName</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_e_b_p_f_1_1_e_b_p_f_cmd_stepper.html</anchorfile>
      <anchor>a2ee679fd499a23a0706b03533616cb79</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::map&lt; Continuation::Exception, Continuation &gt;</type>
      <name>getExceptionHandlers</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_e_b_p_f_1_1_e_b_p_f_cmd_stepper.html</anchorfile>
      <anchor>ac0fe0c600a046b9de953431d39b4e0f2</anchor>
      <arglist>(const IR::P4Parser *parser, Continuation::Body normalContinuation, const ExecutionState &amp;nextState) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initializeTargetEnvironment</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_e_b_p_f_1_1_e_b_p_f_cmd_stepper.html</anchorfile>
      <anchor>ab54691b155ab4bbca8b86973f5313b60</anchor>
      <arglist>(ExecutionState &amp;nextState) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::optional&lt; const Constraint * &gt;</type>
      <name>startParserImpl</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_e_b_p_f_1_1_e_b_p_f_cmd_stepper.html</anchorfile>
      <anchor>a82cc5323350058f0494cbecbfa1987d4</anchor>
      <arglist>(const IR::P4Parser *parser, ExecutionState &amp;nextState) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::EBPF::EBPFCompilerTarget</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_e_b_p_f_1_1_e_b_p_f_compiler_target.html</filename>
    <base>P4Tools::P4Testgen::TestgenCompilerTarget</base>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>make</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_e_b_p_f_1_1_e_b_p_f_compiler_target.html</anchorfile>
      <anchor>a2dd8c266fc9f1feffcfbe2b66c0d7d29</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::EBPF::EBPFConcolic</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_e_b_p_f_1_1_e_b_p_f_concolic.html</filename>
    <base>P4Tools::P4Testgen::Concolic</base>
    <member kind="function" static="yes">
      <type>static const ConcolicMethodImpls::ImplList *</type>
      <name>getEBPFConcolicMethodImpls</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_e_b_p_f_1_1_e_b_p_f_concolic.html</anchorfile>
      <anchor>aa7fb46b6741656985db2972b5ecd2c29</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::EBPF::EBPFConstants</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_e_b_p_f_1_1_e_b_p_f_constants.html</filename>
    <member kind="variable" static="yes">
      <type>static const IR::PathExpression</type>
      <name>ACCEPT_VAR</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_e_b_p_f_1_1_e_b_p_f_constants.html</anchorfile>
      <anchor>a78d4ef180dc4c9c31eae610d5112caa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>PORT_BIT_WIDTH</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_e_b_p_f_1_1_e_b_p_f_constants.html</anchorfile>
      <anchor>a12d31bdf42b1d894548f3b113b9c57b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::EBPF::EBPFExprStepper</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_e_b_p_f_1_1_e_b_p_f_expr_stepper.html</filename>
    <base>P4Tools::P4Testgen::ExprStepper</base>
    <member kind="function">
      <type>void</type>
      <name>evalExternMethodCall</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_e_b_p_f_1_1_e_b_p_f_expr_stepper.html</anchorfile>
      <anchor>a70cc61947c895f7bfa75f455d40abc98</anchor>
      <arglist>(const IR::MethodCallExpression *call, const IR::Expression *receiver, IR::ID name, const IR::Vector&lt; IR::Argument &gt; *args, ExecutionState &amp;state) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const IR::MethodCallStatement *</type>
      <name>produceEmitCall</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_e_b_p_f_1_1_e_b_p_f_expr_stepper.html</anchorfile>
      <anchor>a77d9735511f7a0c37f6c77d618b4747d</anchor>
      <arglist>(const IR::Member *fieldLabel)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>getClassName</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_e_b_p_f_1_1_e_b_p_f_expr_stepper.html</anchorfile>
      <anchor>a89f8ba0d48cdad184f8c7e2bc26b3afd</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::EBPF::EBPFProgramInfo</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_e_b_p_f_1_1_e_b_p_f_program_info.html</filename>
    <base>P4Tools::P4Testgen::ProgramInfo</base>
    <member kind="function">
      <type></type>
      <name>EBPFProgramInfo</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_e_b_p_f_1_1_e_b_p_f_program_info.html</anchorfile>
      <anchor>a1e233aa2685741bdadf75f5c99a7958d</anchor>
      <arglist>(const TestgenCompilerResult &amp;compilerResult, ordered_map&lt; cstring, const IR::Type_Declaration * &gt; inputBlocks)</arglist>
    </member>
    <member kind="function">
      <type>const IR::Expression *</type>
      <name>dropIsActive</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_e_b_p_f_1_1_e_b_p_f_program_info.html</anchorfile>
      <anchor>a615b5db2cd83851f5bc9e2f87c4e7c73</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const ArchSpec &amp;</type>
      <name>getArchSpec</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_e_b_p_f_1_1_e_b_p_f_program_info.html</anchorfile>
      <anchor>a9c6e554c21b7f7d38ffe0c24bf294bc1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const ordered_map&lt; cstring, const IR::Type_Declaration * &gt; *</type>
      <name>getProgrammableBlocks</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_e_b_p_f_1_1_e_b_p_f_program_info.html</anchorfile>
      <anchor>a5c9f18038b338125f0b7dd5f1b4fbd84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IR::StateVariable &amp;</type>
      <name>getTargetInputPortVar</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_e_b_p_f_1_1_e_b_p_f_program_info.html</anchorfile>
      <anchor>ae3626e6f052ed088f1e595573aaed0d0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const IR::StateVariable &amp;</type>
      <name>getTargetOutputPortVar</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_e_b_p_f_1_1_e_b_p_f_program_info.html</anchorfile>
      <anchor>ac06be7c0e57be464936a7d53bc321b1a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArchSpec</type>
      <name>ARCH_SPEC</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_e_b_p_f_1_1_e_b_p_f_program_info.html</anchorfile>
      <anchor>a11bac27abe66799ad8049d6a64e42660</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::EBPF::EBPFTableStepper</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_e_b_p_f_1_1_e_b_p_f_table_stepper.html</filename>
    <base>P4Tools::P4Testgen::TableStepper</base>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkTargetProperties</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_e_b_p_f_1_1_e_b_p_f_table_stepper.html</anchorfile>
      <anchor>ac8ffb7c1e36da80582cd46228feaefa9</anchor>
      <arglist>(const std::vector&lt; const IR::ActionListElement * &gt; &amp;tableActionList) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>evalTargetTable</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_e_b_p_f_1_1_e_b_p_f_table_stepper.html</anchorfile>
      <anchor>aa5744a6f937418438bfebf345dfb618c</anchor>
      <arglist>(const std::vector&lt; const IR::ActionListElement * &gt; &amp;tableActionList) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::EBPF::EBPFTestBackend</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_e_b_p_f_1_1_e_b_p_f_test_backend.html</filename>
    <base>P4Tools::P4Testgen::TestBackEnd</base>
    <member kind="function">
      <type>const TestSpec *</type>
      <name>createTestSpec</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_e_b_p_f_1_1_e_b_p_f_test_backend.html</anchorfile>
      <anchor>a4c4d15cc612af5e41dcd41aefe2fe42a</anchor>
      <arglist>(const ExecutionState *executionState, const Model *finalModel, const TestInfo &amp;testInfo) override</arglist>
    </member>
    <member kind="function">
      <type>TestBackEnd::TestInfo</type>
      <name>produceTestInfo</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_e_b_p_f_1_1_e_b_p_f_test_backend.html</anchorfile>
      <anchor>a6e0234f93966bf268da433dc1fc8ef9b</anchor>
      <arglist>(const ExecutionState *executionState, const Model *finalModel, const IR::Expression *outputPacketExpr, const IR::Expression *outputPortExpr, const std::vector&lt; std::reference_wrapper&lt; const TraceEvent &gt; &gt; *programTraces) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::EBPF::EBPFTestgenTarget</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_e_b_p_f_1_1_e_b_p_f_testgen_target.html</filename>
    <base>P4Tools::P4Testgen::TestgenTarget</base>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>make</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_e_b_p_f_1_1_e_b_p_f_testgen_target.html</anchorfile>
      <anchor>a5770e634a2b8b68725ab2eff6458c36b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>EBPFCmdStepper *</type>
      <name>getCmdStepperImpl</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_e_b_p_f_1_1_e_b_p_f_testgen_target.html</anchorfile>
      <anchor>af8556c6e617a4333ce2e5754c03f4cf4</anchor>
      <arglist>(ExecutionState &amp;state, AbstractSolver &amp;solver, const ProgramInfo &amp;programInfo) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>EBPFExprStepper *</type>
      <name>getExprStepperImpl</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_e_b_p_f_1_1_e_b_p_f_testgen_target.html</anchorfile>
      <anchor>ac1975a820411e3707d08304d6367a816</anchor>
      <arglist>(ExecutionState &amp;state, AbstractSolver &amp;solver, const ProgramInfo &amp;programInfo) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>EBPFTestBackend *</type>
      <name>getTestBackendImpl</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_e_b_p_f_1_1_e_b_p_f_testgen_target.html</anchorfile>
      <anchor>a80b5e0d7826bc9fcf93917aaaf84e868</anchor>
      <arglist>(const ProgramInfo &amp;programInfo, const TestBackendConfiguration &amp;testBackendConfiguration, SymbolicExecutor &amp;symbex) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const EBPFProgramInfo *</type>
      <name>produceProgramInfoImpl</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_e_b_p_f_1_1_e_b_p_f_testgen_target.html</anchorfile>
      <anchor>a6a95c972a0542c3c5adc46a3bf166d63</anchor>
      <arglist>(const CompilerResult &amp;compilerResult, const IR::Declaration_Instance *mainDecl) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::EBPF::STF</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_e_b_p_f_1_1_s_t_f.html</filename>
    <base>P4Tools::P4Testgen::TestFramework</base>
    <member kind="function">
      <type>void</type>
      <name>writeTestToFile</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_e_b_p_f_1_1_s_t_f.html</anchorfile>
      <anchor>ab7c2d2698111884fde4ea01939720c85</anchor>
      <arglist>(const TestSpec *spec, cstring selectedBranches, size_t testId, float currentCoverage) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Exact</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_exact.html</filename>
    <base>P4Tools::P4Testgen::TableMatch</base>
    <member kind="function">
      <type>const Exact *</type>
      <name>evaluate</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_exact.html</anchorfile>
      <anchor>a90a80e4f24861709ad16933d8152ad5e</anchor>
      <arglist>(const Model &amp;model, bool doComplete) const override</arglist>
    </member>
    <member kind="function">
      <type>const IR::Constant *</type>
      <name>getEvaluatedValue</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_exact.html</anchorfile>
      <anchor>a5cbff6a2bfc3245f7315393801e62a0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>getObjectName</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_exact.html</anchorfile>
      <anchor>a385620183df2475711846f63acca727f</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::ExecutionState</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</filename>
    <base>P4Tools::AbstractExecutionState</base>
    <class kind="class">P4Tools::P4Testgen::ExecutionState::StackFrame</class>
    <member kind="function">
      <type></type>
      <name>ExecutionState</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>af7e185e4ba44f5edb6ceaafc06f1ed6e</anchor>
      <arglist>(ExecutionState &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>a2bb4c449af6c0957495ff8cf2b1bbfcf</anchor>
      <arglist>(const TraceEvent &amp;event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTestObject</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>a6d7d8bbe4f68ca6089bbf0de6c7dcd25</anchor>
      <arglist>(cstring category, cstring objectLabel, const TestObject *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendToEmitBuffer</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>a3ee6c94e1cd1d02e6608d3d201876094</anchor>
      <arglist>(const IR::Expression *expr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendToInputPacket</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>afef478eb4ffb7c691f594860bcc165dc</anchor>
      <arglist>(const IR::Expression *expr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendToPacketBuffer</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>a5666a725fdfba2c7acd0478303ef038b</anchor>
      <arglist>(const IR::Expression *expr)</arglist>
    </member>
    <member kind="function">
      <type>ExecutionState &amp;</type>
      <name>clone</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>a4ed86e281acf98c0838465454d5c20ce</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteTestObject</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>a8e7d313023eb5f92d76b93879dfa701b</anchor>
      <arglist>(cstring category, cstring objectLabel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteTestObjectCategory</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>a742de9a0b29016c5c8a219586b94569a</anchor>
      <arglist>(cstring category)</arglist>
    </member>
    <member kind="function">
      <type>const IR::Expression *</type>
      <name>get</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>a1000b229a90e30f621259e77d90c98e9</anchor>
      <arglist>(const IR::StateVariable &amp;var) const override</arglist>
    </member>
    <member kind="function">
      <type>const Continuation::Body &amp;</type>
      <name>getBody</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>a431cac71ebd1f1c0da262b18f68f5104</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IR::StateVariable &amp;</type>
      <name>getCurrentParserErrorLabel</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>af43144101bb8cba5cbce21b45875b05b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IR::Expression *</type>
      <name>getEmitBuffer</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>aece12852a44319bcae88746c447b62ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IR::Expression *</type>
      <name>getInputPacket</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>aae473cd44b17a4ce0d27df28cf4f0121</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getInputPacketCursor</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>ae03e0ad354f9f6fbd5610450bb3d78ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getInputPacketSize</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>a9d81b5348e55fdf18f3464254f6b86d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; const Continuation::Command &gt;</type>
      <name>getNextCmd</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>ad43276576c11adb91f936fbac7549d75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IR::Expression *</type>
      <name>getPacketBuffer</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>a320af4a93de7cb627caebb4ea4d5c52c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPacketBufferSize</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>a959f2acdd028bcbd07cf2a1473502ab2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const IR::Expression * &gt; &amp;</type>
      <name>getPathConstraint</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>aaa62a54b40989298b68f9a7afb832b38</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getProperty</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>a590340133d279c6123ef51a217939e2f</anchor>
      <arglist>(cstring propertyName) const</arglist>
    </member>
    <member kind="function">
      <type>ReachabilityEngineState *</type>
      <name>getReachabilityEngineState</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>a1cd9226fe23be1e85de1fcd70e1be5df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; uint64_t &gt; &amp;</type>
      <name>getSelectedBranches</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>a7af30acbf2c646ea2a2f44db5ea15e1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::stack&lt; std::reference_wrapper&lt; const StackFrame &gt; &gt; &amp;</type>
      <name>getStack</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>ae83efc833125f66fa4116a69b24953ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>getTestObject</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>a1a744cf5fe6ae4b2a94993ab55b9c0f0</anchor>
      <arglist>(cstring category, cstring objectLabel) const</arglist>
    </member>
    <member kind="function">
      <type>const TestObject *</type>
      <name>getTestObject</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>a9dcb5e0abd1c023e155662eb1f03e19d</anchor>
      <arglist>(cstring category, cstring objectLabel, bool checked) const</arglist>
    </member>
    <member kind="function">
      <type>TestObjectMap</type>
      <name>getTestObjectCategory</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>afe042f41fe356efba76a43f0121f6fd2</anchor>
      <arglist>(cstring category) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::reference_wrapper&lt; const TraceEvent &gt; &gt; &amp;</type>
      <name>getTrace</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>a05fb02e373f990f5f83a4ccedd7e04f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const P4::Coverage::CoverageSet &amp;</type>
      <name>getVisited</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>a013e3009af9517eff9fbdc3cf24971bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleException</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>a5324cbeda60b81bb570001515628923c</anchor>
      <arglist>(Continuation::Exception e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasProperty</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>afb68ab24b52cf531ae80307385c46208</anchor>
      <arglist>(cstring propertyName) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTerminal</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>a39d9b61589ce73575f9b1fdbe1100e33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markVisited</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>ad66d84c9f94782d916f53ea68ac67d8b</anchor>
      <arglist>(const IR::Node *node)</arglist>
    </member>
    <member kind="function">
      <type>const IR::Expression *</type>
      <name>peekPacketBuffer</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>aad08572c5a8f85220b70b6871e466b68</anchor>
      <arglist>(int amount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popBody</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>a9ef736e93407d01f6428e065b12cc499</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popContinuation</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>a359b0dd2a78ba6f6232f248222fe4f0c</anchor>
      <arglist>(std::optional&lt; const IR::Node * &gt; argument_opt=std::nullopt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prependToInputPacket</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>a132f29716a68501d424b85cf192ba68b</anchor>
      <arglist>(const IR::Expression *expr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prependToPacketBuffer</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>aecd000f9a21f18ac95307c30b48f48a2</anchor>
      <arglist>(const IR::Expression *expr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushBranchDecision</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>a2e1b18bce89850cc00219d96ba698600</anchor>
      <arglist>(uint64_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushContinuation</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>a46fa0170ae410125dbd3d62797d34f99</anchor>
      <arglist>(const StackFrame &amp;frame)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushCurrentContinuation</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>a4c907eaa5400c1fa89186f1398aeced1</anchor>
      <arglist>(StackFrame::ExceptionHandlers handlers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushCurrentContinuation</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>a6deae6941074525202ccf96b46340ee4</anchor>
      <arglist>(std::optional&lt; const IR::Type * &gt; parameterType_opt=std::nullopt, StackFrame::ExceptionHandlers={})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushPathConstraint</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>a480d3d2eed86c51bcaf2f80386134db9</anchor>
      <arglist>(const IR::Expression *e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceBody</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>a8bf617d11514d99d6ab19ecb865e2d2f</anchor>
      <arglist>(const Continuation::Body &amp;body)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceTopBody</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>ad81e655cdb561dbbe58997dca1495042</anchor>
      <arglist>(const Continuation::Command &amp;cmd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceTopBody</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>a46a6ec808d76d362efc07e4fdb68963a</anchor>
      <arglist>(const std::vector&lt; const N * &gt; *nodes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceTopBody</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>a8b3ac8cb3aaee5fbc86ddba04c61ec41</anchor>
      <arglist>(const std::vector&lt; Continuation::Command &gt; *cmds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceTopBody</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>aa1fe7432f10323b71cf08f57a3fe8e21</anchor>
      <arglist>(std::initializer_list&lt; Continuation::Command &gt; cmds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetEmitBuffer</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>aa2137dac5ee6e29c970e4a0a7e331d2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetPacketBuffer</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>a637122d928aaaeca5e1cbd784cbd98ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>a522ee76465029a470c4e8d96f66b5c66</anchor>
      <arglist>(const IR::StateVariable &amp;var, const IR::Expression *value) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParserErrorLabel</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>aacadfa88679a73bc65b0dc5d4b25db49</anchor>
      <arglist>(const IR::StateVariable &amp;parserError)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProperty</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>aed66dac51a0f6a1581ea6fd8d9fd77df</anchor>
      <arglist>(cstring propertyName, Continuation::PropertyValue property)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReachabilityEngineState</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>a5c1dd608226b8856068d9fcdd701eae1</anchor>
      <arglist>(ReachabilityEngineState *newEngineState)</arglist>
    </member>
    <member kind="function">
      <type>const IR::Expression *</type>
      <name>slicePacketBuffer</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>aa508e44c5e28e58a71732efcff6e4058</anchor>
      <arglist>(int amount)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ExecutionState &amp;</type>
      <name>create</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>aa206917fd6bb68988417950e6385ddaa</anchor>
      <arglist>(const IR::P4Program *program)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const IR::SymbolicVariable *</type>
      <name>getInputPacketSizeVar</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>ae22cfd053be3bf784565890bc6a9f4e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getMaxPacketLength</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state.html</anchorfile>
      <anchor>a5925a26e4d3e6d3406175af6d6891c9e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::ExecutionState::StackFrame</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_execution_state_1_1_stack_frame.html</filename>
    <member kind="function">
      <type>const Continuation &amp;</type>
      <name>getContinuation</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state_1_1_stack_frame.html</anchorfile>
      <anchor>a200a8df9f4d03ddc033cc8bc567cdacf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ExceptionHandlers &amp;</type>
      <name>getExceptionHandlers</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state_1_1_stack_frame.html</anchorfile>
      <anchor>a2fd94e5d87cea2becb1a5198947ad87a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const NamespaceContext *</type>
      <name>getNameSpaces</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_execution_state_1_1_stack_frame.html</anchorfile>
      <anchor>afb7fcbabc9c728495a968ce9d9381dfe</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::ExprStepper</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_expr_stepper.html</filename>
    <base>P4Tools::P4Testgen::AbstractStepper</base>
    <member kind="function">
      <type>bool</type>
      <name>preorder</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_expr_stepper.html</anchorfile>
      <anchor>a41d2de2e54d56ee765d2092532f6b097</anchor>
      <arglist>(const IR::P4ValueSet *valueSet) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual PacketCursorAdvanceInfo</type>
      <name>calculateAdvanceExpression</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_expr_stepper.html</anchorfile>
      <anchor>afefb7e9a6cb76bb117b0dc2fa235f097</anchor>
      <arglist>(const ExecutionState &amp;state, const IR::Expression *advanceExpr, const IR::Expression *restrictions) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual PacketCursorAdvanceInfo</type>
      <name>calculateSuccessfulParserAdvance</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_expr_stepper.html</anchorfile>
      <anchor>a3ada398eb08e495cd1dd36d56cab744b</anchor>
      <arglist>(const ExecutionState &amp;state, int advanceSize) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>evalActionCall</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_expr_stepper.html</anchorfile>
      <anchor>afd30078a132cda32afe24e73909c84ab</anchor>
      <arglist>(const IR::P4Action *action, const IR::MethodCallExpression *call)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>evalExternMethodCall</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_expr_stepper.html</anchorfile>
      <anchor>a1539ab62040fc5fc9270e346ed629f30</anchor>
      <arglist>(const IR::MethodCallExpression *call, const IR::Expression *receiver, IR::ID name, const IR::Vector&lt; IR::Argument &gt; *args, ExecutionState &amp;state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>evalInternalExternMethodCall</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_expr_stepper.html</anchorfile>
      <anchor>a3768043928b0b6328f1e090d7466bcb0</anchor>
      <arglist>(const IR::MethodCallExpression *call, const IR::Expression *receiver, IR::ID name, const IR::Vector&lt; IR::Argument &gt; *args, const ExecutionState &amp;state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateCopyIn</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_expr_stepper.html</anchorfile>
      <anchor>a81648bb515b937bc4840889c0765ba24</anchor>
      <arglist>(ExecutionState &amp;nextState, const IR::StateVariable &amp;targetPath, const IR::StateVariable &amp;srcPath, cstring dir, bool forceTaint) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleHitMissActionRun</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_expr_stepper.html</anchorfile>
      <anchor>a08abc5eb0108d4f8702fb1235d11d33f</anchor>
      <arglist>(const IR::Member *member)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>resolveMethodCallArguments</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_expr_stepper.html</anchorfile>
      <anchor>a786f7a7b77e7ee0f4f07845abfd9bfc3</anchor>
      <arglist>(const IR::MethodCallExpression *call)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>stepNoMatch</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_expr_stepper.html</anchorfile>
      <anchor>a77ff6664a401a362a5a57adb0936e411</anchor>
      <arglist>(std::string traceLog, const IR::Expression *condition=nullptr)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::vector&lt; std::pair&lt; IR::StateVariable, const IR::Expression * &gt; &gt;</type>
      <name>setFields</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_expr_stepper.html</anchorfile>
      <anchor>aaeb1f90113bc6de0a540bb168f82cc73</anchor>
      <arglist>(ExecutionState &amp;nextState, const std::vector&lt; IR::StateVariable &gt; &amp;flatFields, int varBitFieldSize)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ExtractUtils</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_expr_stepper.html</anchorfile>
      <anchor>a51eee8d20f0f5600d44137e742c0fcaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>TableStepper</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_expr_stepper.html</anchorfile>
      <anchor>aba1a8a968a6b404da647d91a39c253c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4Tools::P4Testgen::ExprStepper::PacketCursorAdvanceInfo</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_expr_stepper.html</filename>
    <anchor>struct_p4_tools_1_1_p4_testgen_1_1_expr_stepper_1_1_packet_cursor_advance_info</anchor>
    <member kind="variable">
      <type>const IR::Expression *</type>
      <name>advanceCond</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_expr_stepper.html</anchorfile>
      <anchor>a905d5e7511ba45d227dbdfa959aeb9fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IR::Expression *</type>
      <name>advanceFailCond</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_expr_stepper.html</anchorfile>
      <anchor>a44ce30506bbd37594aaf1618f86b0bcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>advanceFailSize</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_expr_stepper.html</anchorfile>
      <anchor>a94e2089ad74a03c502bab23711a21696</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>advanceSize</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_expr_stepper.html</anchorfile>
      <anchor>a3b8b7fdb2e26a1a08c194cd2942deb9e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::ExternMethodImpls</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_extern_method_impls.html</filename>
    <member kind="typedef">
      <type>std::list&lt; std::tuple&lt; cstring, std::vector&lt; cstring &gt;, MethodImpl &gt; &gt;</type>
      <name>ImplList</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_extern_method_impls.html</anchorfile>
      <anchor>a2833450a79e7cef85bd0bfb23bd7698d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const IR::MethodCallExpression *, const IR::Expression *, IR::ID &amp;, const IR::Vector&lt; IR::Argument &gt; *, const ExecutionState &amp;, SmallStepEvaluator::Result &amp;)&gt;</type>
      <name>MethodImpl</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_extern_method_impls.html</anchorfile>
      <anchor>a48c9e68888f12fdbcb293691fb0e3f08</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exec</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_extern_method_impls.html</anchorfile>
      <anchor>ae16f94d80555bc7faa6a3a95b1da1472</anchor>
      <arglist>(const IR::MethodCallExpression *call, const IR::Expression *receiver, IR::ID &amp;name, const IR::Vector&lt; IR::Argument &gt; *args, const ExecutionState &amp;state, SmallStepEvaluator::Result &amp;result) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::FinalState</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_final_state.html</filename>
    <member kind="function">
      <type></type>
      <name>FinalState</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_final_state.html</anchorfile>
      <anchor>ad934f8b0eeaa8bfa296b048232471d66</anchor>
      <arglist>(AbstractSolver &amp;solver, const ExecutionState &amp;finalState)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FinalState</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_final_state.html</anchorfile>
      <anchor>adc20610126c0e15a0c98b7dcf1431056</anchor>
      <arglist>(AbstractSolver &amp;solver, const ExecutionState &amp;finalState, const Model &amp;finalModel)</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; std::reference_wrapper&lt; const FinalState &gt; &gt;</type>
      <name>computeConcolicState</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_final_state.html</anchorfile>
      <anchor>a16d112cb9256c323234365669ace060c</anchor>
      <arglist>(const ConcolicVariableMap &amp;resolvedConcolicVariables) const</arglist>
    </member>
    <member kind="function">
      <type>const ExecutionState *</type>
      <name>getExecutionState</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_final_state.html</anchorfile>
      <anchor>a77d8abc5e3208b4e3b2a7fe01544ea4f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Model &amp;</type>
      <name>getFinalModel</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_final_state.html</anchorfile>
      <anchor>aa87660206399716133f6964c191ab6b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AbstractSolver &amp;</type>
      <name>getSolver</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_final_state.html</anchorfile>
      <anchor>afd55c57c4288c74a1c579d8020017d18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::reference_wrapper&lt; const TraceEvent &gt; &gt; *</type>
      <name>getTraces</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_final_state.html</anchorfile>
      <anchor>a2c8b14e0f20f1d39a84d4f17ef9c4ac4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const P4::Coverage::CoverageSet &amp;</type>
      <name>getVisited</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_final_state.html</anchorfile>
      <anchor>a0660cc5213e274f2743f8c577cb78a64</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::GreedyNodeSelection</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_greedy_node_selection.html</filename>
    <base>P4Tools::P4Testgen::SymbolicExecutor</base>
    <member kind="function">
      <type></type>
      <name>GreedyNodeSelection</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_greedy_node_selection.html</anchorfile>
      <anchor>abec316f990628459ece3cd2392ff3fdf</anchor>
      <arglist>(AbstractSolver &amp;solver, const ProgramInfo &amp;programInfo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runImpl</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_greedy_node_selection.html</anchorfile>
      <anchor>a6e42e6fe07f2aab1cde56b8999a48ee8</anchor>
      <arglist>(const Callback &amp;callBack, ExecutionStateReference state) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::LPM</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_l_p_m.html</filename>
    <base>P4Tools::P4Testgen::TableMatch</base>
    <member kind="function">
      <type>const LPM *</type>
      <name>evaluate</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_l_p_m.html</anchorfile>
      <anchor>aa64767b349eef196bc9b48e601cee379</anchor>
      <arglist>(const Model &amp;model, bool doComplete) const override</arglist>
    </member>
    <member kind="function">
      <type>const IR::Constant *</type>
      <name>getEvaluatedPrefixLength</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_l_p_m.html</anchorfile>
      <anchor>ab20fbfc78dbe7a2c2aeac97dc0fc1155</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IR::Constant *</type>
      <name>getEvaluatedValue</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_l_p_m.html</anchorfile>
      <anchor>aed37eb6bda37c68f0da58d92107c0b1f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>getObjectName</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_l_p_m.html</anchorfile>
      <anchor>a23a5292ef8aeeea2a2c94a923945b57f</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Packet</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_packet.html</filename>
    <base>P4Tools::P4Testgen::TestObject</base>
    <member kind="function">
      <type>const Packet *</type>
      <name>evaluate</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_packet.html</anchorfile>
      <anchor>ae1c8aa2e4fbe9cef163e00448b66926a</anchor>
      <arglist>(const Model &amp;model, bool doComplete) const override</arglist>
    </member>
    <member kind="function">
      <type>const IR::Constant *</type>
      <name>getEvaluatedPayload</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_packet.html</anchorfile>
      <anchor>a5094e5312278513985c33b66dc215196</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IR::Constant *</type>
      <name>getEvaluatedPayloadMask</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_packet.html</anchorfile>
      <anchor>af7b37954b3669e1f89ff70ffb2d0e085</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>getObjectName</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_packet.html</anchorfile>
      <anchor>ac12c63eff592ff32e0edaf1611395bab</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPort</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_packet.html</anchorfile>
      <anchor>a4a75db9ef1639587c6423792808c991b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::PacketVars</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_packet_vars.html</filename>
    <member kind="variable" static="yes">
      <type>static const IR::Member</type>
      <name>EMIT_BUFFER_LABEL</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_packet_vars.html</anchorfile>
      <anchor>a396a5b23ba1ed649c57b410fafb48f06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IR::Member</type>
      <name>INPUT_PACKET_LABEL</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_packet_vars.html</anchorfile>
      <anchor>adf57de10dfa6b1d0b9e4472c0dca5e3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IR::Member</type>
      <name>PACKET_BUFFER_LABEL</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_packet_vars.html</anchorfile>
      <anchor>a8e1bca92e1261f551868e134f0409907</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IR::Type_Bits</type>
      <name>PACKET_SIZE_VAR_TYPE</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_packet_vars.html</anchorfile>
      <anchor>a3605f8f5d651acaeead15b355e6ea7bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IR::SymbolicVariable</type>
      <name>PAYLOAD_SYMBOL</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_packet_vars.html</anchorfile>
      <anchor>a5976be560a00c362414f994d6622a6c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Pna::Metadata</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_metadata.html</filename>
    <base>P4Tools::P4Testgen::TestFramework</base>
    <member kind="function">
      <type>void</type>
      <name>writeTestToFile</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_metadata.html</anchorfile>
      <anchor>a4c050f088f3bb1d4de333b3312e806c7</anchor>
      <arglist>(const TestSpec *spec, cstring selectedBranches, size_t testId, float currentCoverage) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Pna::MetadataCollection</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_metadata_collection.html</filename>
    <base>P4Tools::P4Testgen::TestObject</base>
    <member kind="function">
      <type>const MetadataCollection *</type>
      <name>evaluate</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_metadata_collection.html</anchorfile>
      <anchor>a76cfb41e5084a11243c434242167db48</anchor>
      <arglist>(const Model &amp;, bool doComplete) const override</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; cstring, const IR::Literal * &gt; &amp;</type>
      <name>getMetadataFields</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_metadata_collection.html</anchorfile>
      <anchor>a69f5b1a92915666ede68fbd35c51d139</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>getObjectName</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_metadata_collection.html</anchorfile>
      <anchor>a87be619918000abbd8cf918edf2c1b9a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Pna::Optional</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_optional.html</filename>
    <base>P4Tools::P4Testgen::TableMatch</base>
    <member kind="function">
      <type>bool</type>
      <name>addAsExactMatch</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_optional.html</anchorfile>
      <anchor>a5d7ede1a1e3fffcdf9f4fa518f8132ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Optional *</type>
      <name>evaluate</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_optional.html</anchorfile>
      <anchor>a3a51d512556c03c5f6be014ae5dd0331</anchor>
      <arglist>(const Model &amp;model, bool doComplete) const override</arglist>
    </member>
    <member kind="function">
      <type>const IR::Constant *</type>
      <name>getEvaluatedValue</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_optional.html</anchorfile>
      <anchor>abfeceb37393ad5cd7be8998686938494</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>getObjectName</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_optional.html</anchorfile>
      <anchor>a688a426f3f6d1fe65cb63e7859ca1a61</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Pna::PnaConstants</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_constants.html</filename>
    <member kind="variable" static="yes">
      <type>static const IR::Member</type>
      <name>DROP_VAR</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_constants.html</anchorfile>
      <anchor>a44972f6bd6a47c2a4f1d512f39787c85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>MATCH_KIND_OPT</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_constants.html</anchorfile>
      <anchor>a392823e02f6c761cc72f12ccf2877547</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>MATCH_KIND_RANGE</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_constants.html</anchorfile>
      <anchor>a1c7a3e48e5640dcc14547cb3bcf7d8ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>MATCH_KIND_SELECTOR</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_constants.html</anchorfile>
      <anchor>a4d4b965bee69a161baa3ffe989486bec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IR::Member</type>
      <name>OUTPUT_PORT_VAR</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_constants.html</anchorfile>
      <anchor>a3ef2cf55d0c53920abeb7d6fa3b81784</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const IR::Member</type>
      <name>PARSER_ERROR</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_constants.html</anchorfile>
      <anchor>a66f0847fbfba4fa89a4622bb541bb148</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>PORT_BIT_WIDTH</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_constants.html</anchorfile>
      <anchor>a80ac04effbe6e9e1f896a6efba6eb64f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Pna::PnaDpdkActionProfile</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_action_profile.html</filename>
    <base>P4Tools::P4Testgen::TestObject</base>
    <member kind="function">
      <type>void</type>
      <name>addToActionMap</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_action_profile.html</anchorfile>
      <anchor>a0cd6aa60e7aff3a5fdfc79797449d909</anchor>
      <arglist>(cstring actionName, std::vector&lt; ActionArg &gt; actionArgs)</arglist>
    </member>
    <member kind="function">
      <type>const PnaDpdkActionProfile *</type>
      <name>evaluate</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_action_profile.html</anchorfile>
      <anchor>ab9fe0f9f5a3a0d223bf6d6e2a62fd3a6</anchor>
      <arglist>(const Model &amp;model, bool doComplete) const override</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getActionMapSize</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_action_profile.html</anchorfile>
      <anchor>ae5e54d437ee2311676436ca0a112756c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::pair&lt; cstring, std::vector&lt; ActionArg &gt; &gt; &gt; *</type>
      <name>getActions</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_action_profile.html</anchorfile>
      <anchor>a36d7a3b89c52b98cf0d39b43ad6eea7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>getObjectName</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_action_profile.html</anchorfile>
      <anchor>a67a66de7e53092ab8b4c52da76ea6b3f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const IR::IDeclaration *</type>
      <name>getProfileDecl</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_action_profile.html</anchorfile>
      <anchor>ab9de8d7f934248fe2c8e108a39b61655</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Pna::PnaDpdkActionSelector</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_action_selector.html</filename>
    <base>P4Tools::P4Testgen::TestObject</base>
    <member kind="function">
      <type>const PnaDpdkActionSelector *</type>
      <name>evaluate</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_action_selector.html</anchorfile>
      <anchor>a089f588d9ee9b50b7dad9e45370c3d48</anchor>
      <arglist>(const Model &amp;model, bool doComplete) const override</arglist>
    </member>
    <member kind="function">
      <type>const PnaDpdkActionProfile *</type>
      <name>getActionProfile</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_action_selector.html</anchorfile>
      <anchor>a4b18ca7d931495288b5f773263006869</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>getObjectName</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_action_selector.html</anchorfile>
      <anchor>a9105f9f417779375afda9dc721d2d862</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const IR::IDeclaration *</type>
      <name>getSelectorDecl</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_action_selector.html</anchorfile>
      <anchor>aaf03d83e32d6298379522614befc49ee</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Pna::PnaDpdkCmdStepper</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_cmd_stepper.html</filename>
    <base>P4Tools::P4Testgen::Pna::SharedPnaCmdStepper</base>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>getClassName</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_cmd_stepper.html</anchorfile>
      <anchor>a312c1dab60bc79bedca41cd062beaf02</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::map&lt; Continuation::Exception, Continuation &gt;</type>
      <name>getExceptionHandlers</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_cmd_stepper.html</anchorfile>
      <anchor>ab97920504fd408fd579af3980ac007d8</anchor>
      <arglist>(const IR::P4Parser *parser, Continuation::Body normalContinuation, const ExecutionState &amp;state) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initializeTargetEnvironment</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_cmd_stepper.html</anchorfile>
      <anchor>a00f3a1435ad0c3c8a0fb877dd17708c6</anchor>
      <arglist>(ExecutionState &amp;nextState) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::optional&lt; const Constraint * &gt;</type>
      <name>startParserImpl</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_cmd_stepper.html</anchorfile>
      <anchor>a044ab4b9c7937985101bc3c13a931b8b</anchor>
      <arglist>(const IR::P4Parser *parser, ExecutionState &amp;state) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Pna::PnaDpdkCompilerTarget</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_compiler_target.html</filename>
    <base>P4Tools::P4Testgen::TestgenCompilerTarget</base>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>make</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_compiler_target.html</anchorfile>
      <anchor>a2795c6528821cb0376e422e7d91a15a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Pna::PnaDpdkConcolic</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_concolic.html</filename>
    <base>P4Tools::P4Testgen::Concolic</base>
    <member kind="function" static="yes">
      <type>static const ConcolicMethodImpls::ImplList *</type>
      <name>getPnaDpdkConcolicMethodImpls</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_concolic.html</anchorfile>
      <anchor>ad63b37049d7202dc7a813bd7ba0ec3af</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Pna::PnaDpdkExprStepper</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_expr_stepper.html</filename>
    <base>P4Tools::P4Testgen::Pna::SharedPnaExprStepper</base>
    <member kind="function">
      <type>void</type>
      <name>evalExternMethodCall</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_expr_stepper.html</anchorfile>
      <anchor>a6420bf9e00e030522a7b594c437fac16</anchor>
      <arglist>(const IR::MethodCallExpression *call, const IR::Expression *receiver, IR::ID name, const IR::Vector&lt; IR::Argument &gt; *args, ExecutionState &amp;state) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>getClassName</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_expr_stepper.html</anchorfile>
      <anchor>a3404123a7ba4b8b1318fedef1dd35bb3</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Pna::PnaDpdkProgramInfo</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_program_info.html</filename>
    <base>P4Tools::P4Testgen::Pna::SharedPnaProgramInfo</base>
    <member kind="function">
      <type></type>
      <name>PnaDpdkProgramInfo</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_program_info.html</anchorfile>
      <anchor>a75b661091e341b1a9ce5c3ed9883aade</anchor>
      <arglist>(const TestgenCompilerResult &amp;compilerResult, ordered_map&lt; cstring, const IR::Type_Declaration * &gt; inputBlocks)</arglist>
    </member>
    <member kind="function">
      <type>const ArchSpec &amp;</type>
      <name>getArchSpec</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_program_info.html</anchorfile>
      <anchor>ac77ea879cfedab58ae9872603f5be810</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ArchSpec</type>
      <name>ARCH_SPEC</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_program_info.html</anchorfile>
      <anchor>a7da509b7cc8ea5485d75dde6d0788525</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Pna::PnaDpdkRegisterCondition</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_register_condition.html</filename>
    <base>P4Tools::P4Testgen::TestObject</base>
    <member kind="function">
      <type>const PnaDpdkRegisterCondition *</type>
      <name>evaluate</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_register_condition.html</anchorfile>
      <anchor>a2500ad3573eb5e4d9103cedd6ba3d848</anchor>
      <arglist>(const Model &amp;model, bool doComplete) const override</arglist>
    </member>
    <member kind="function">
      <type>const IR::Constant *</type>
      <name>getEvaluatedIndex</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_register_condition.html</anchorfile>
      <anchor>ab6978209129e0f85cd343031791553ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IR::Constant *</type>
      <name>getEvaluatedValue</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_register_condition.html</anchorfile>
      <anchor>a79efedfba89f04ce0943041bd835d37e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>getObjectName</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_register_condition.html</anchorfile>
      <anchor>a52bd26ac4a21d385906f841a1875d27f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable">
      <type>const IR::Expression *</type>
      <name>index</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_register_condition.html</anchorfile>
      <anchor>afe52b206672d2b319ef339dc3c94d694</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IR::Expression *</type>
      <name>value</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_register_condition.html</anchorfile>
      <anchor>afa4d4e14ad0ec3e91a51480f2ead59d4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Pna::PnaDpdkRegisterValue</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_register_value.html</filename>
    <base>P4Tools::P4Testgen::TestObject</base>
    <member kind="function">
      <type>void</type>
      <name>addRegisterCondition</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_register_value.html</anchorfile>
      <anchor>ac88fc9525f35c1f274bbf24dcf333982</anchor>
      <arglist>(PnaDpdkRegisterCondition cond)</arglist>
    </member>
    <member kind="function">
      <type>const PnaDpdkRegisterValue *</type>
      <name>evaluate</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_register_value.html</anchorfile>
      <anchor>a9344233f5d94f5bc59fa9d3bb67ef3a4</anchor>
      <arglist>(const Model &amp;model, bool doComplete) const override</arglist>
    </member>
    <member kind="function">
      <type>const IR::Expression *</type>
      <name>getCurrentValue</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_register_value.html</anchorfile>
      <anchor>a319a2f3f9330ebd4b8a731ae5eb0fb8f</anchor>
      <arglist>(const IR::Expression *index) const</arglist>
    </member>
    <member kind="function">
      <type>const IR::Constant *</type>
      <name>getEvaluatedValue</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_register_value.html</anchorfile>
      <anchor>a76644c3a3e2c324bb9b1957a47a607a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IR::Expression *</type>
      <name>getInitialValue</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_register_value.html</anchorfile>
      <anchor>a9f168870bcfdbe082ce05b1db9c5cf8d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>getObjectName</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_register_value.html</anchorfile>
      <anchor>a988e160b3268154866c42c6a69e9013e</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Pna::PnaDpdkTableStepper</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_table_stepper.html</filename>
    <base>P4Tools::P4Testgen::Pna::SharedPnaTableStepper</base>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Pna::PnaDpdkTestgenTarget</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_testgen_target.html</filename>
    <base>P4Tools::P4Testgen::TestgenTarget</base>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>make</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_testgen_target.html</anchorfile>
      <anchor>a24a6185a90acb976d79bab0bd25ee7ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PnaDpdkCmdStepper *</type>
      <name>getCmdStepperImpl</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_testgen_target.html</anchorfile>
      <anchor>aab4002335b2fd77e91e537d91bd2440b</anchor>
      <arglist>(ExecutionState &amp;state, AbstractSolver &amp;solver, const ProgramInfo &amp;programInfo) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PnaDpdkExprStepper *</type>
      <name>getExprStepperImpl</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_testgen_target.html</anchorfile>
      <anchor>a9dab0ca633718bd4b936d6dc7b66ee17</anchor>
      <arglist>(ExecutionState &amp;state, AbstractSolver &amp;solver, const ProgramInfo &amp;programInfo) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PnaTestBackend *</type>
      <name>getTestBackendImpl</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_testgen_target.html</anchorfile>
      <anchor>a3865351fe29ff86c9b08362edb1815f8</anchor>
      <arglist>(const ProgramInfo &amp;programInfo, const TestBackendConfiguration &amp;testBackendConfiguration, SymbolicExecutor &amp;symbex) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const PnaDpdkProgramInfo *</type>
      <name>produceProgramInfoImpl</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_dpdk_testgen_target.html</anchorfile>
      <anchor>afbe63a6699744ad49a90dc41018d6dcd</anchor>
      <arglist>(const CompilerResult &amp;compilerResult, const IR::Declaration_Instance *mainDecl) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Pna::PnaSymbolicVars</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_symbolic_vars.html</filename>
    <member kind="variable" static="yes">
      <type>static const IR::SymbolicVariable</type>
      <name>DIRECTION</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_symbolic_vars.html</anchorfile>
      <anchor>a04ce10ed948902d50ec2c1d42b1772fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Pna::PnaTestBackend</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_test_backend.html</filename>
    <base>P4Tools::P4Testgen::TestBackEnd</base>
    <member kind="function">
      <type>const TestSpec *</type>
      <name>createTestSpec</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_test_backend.html</anchorfile>
      <anchor>afa777a6d766ad4393ff2034342e88c93</anchor>
      <arglist>(const ExecutionState *executionState, const Model *finalModel, const TestInfo &amp;testInfo) override</arglist>
    </member>
    <member kind="function">
      <type>TestBackEnd::TestInfo</type>
      <name>produceTestInfo</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_pna_test_backend.html</anchorfile>
      <anchor>a33fbad2a37bb33cb8399689acc98e5b5</anchor>
      <arglist>(const ExecutionState *executionState, const Model *finalModel, const IR::Expression *outputPacketExpr, const IR::Expression *outputPortExpr, const std::vector&lt; std::reference_wrapper&lt; const TraceEvent &gt; &gt; *programTraces) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Pna::PTF</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_p_t_f.html</filename>
    <base>P4Tools::P4Testgen::TestFramework</base>
    <member kind="function">
      <type>void</type>
      <name>writeTestToFile</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_p_t_f.html</anchorfile>
      <anchor>a7df52e5e85ee59c460ee13928d4e4e6b</anchor>
      <arglist>(const TestSpec *spec, cstring selectedBranches, size_t testId, float currentCoverage) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Pna::Range</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_range.html</filename>
    <base>P4Tools::P4Testgen::TableMatch</base>
    <member kind="function">
      <type>const Range *</type>
      <name>evaluate</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_range.html</anchorfile>
      <anchor>af5f9ec69c9c5b6eac65e2ee5d2f646b2</anchor>
      <arglist>(const Model &amp;model, bool doComplete) const override</arglist>
    </member>
    <member kind="function">
      <type>const IR::Constant *</type>
      <name>getEvaluatedHigh</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_range.html</anchorfile>
      <anchor>ac1ff6304e8bc285f4731861020fe7e71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IR::Constant *</type>
      <name>getEvaluatedLow</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_range.html</anchorfile>
      <anchor>aa0bf8924b7834cc8f691ef989247001a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>getObjectName</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_range.html</anchorfile>
      <anchor>a0bed3a402145edfa6059efbfd63cc933</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Pna::SharedPnaCmdStepper</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_shared_pna_cmd_stepper.html</filename>
    <base>P4Tools::P4Testgen::CmdStepper</base>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Pna::SharedPnaExprStepper</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_shared_pna_expr_stepper.html</filename>
    <base>P4Tools::P4Testgen::ExprStepper</base>
    <member kind="function">
      <type>void</type>
      <name>evalExternMethodCall</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_shared_pna_expr_stepper.html</anchorfile>
      <anchor>afa361e62ec26947d110fe5f05e8abfc2</anchor>
      <arglist>(const IR::MethodCallExpression *call, const IR::Expression *receiver, IR::ID name, const IR::Vector&lt; IR::Argument &gt; *args, ExecutionState &amp;state) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Pna::SharedPnaProgramInfo</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_shared_pna_program_info.html</filename>
    <base>P4Tools::P4Testgen::ProgramInfo</base>
    <member kind="function">
      <type>const IR::Expression *</type>
      <name>dropIsActive</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_shared_pna_program_info.html</anchorfile>
      <anchor>a95a829830d6bf967c7ed6174682313d8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const IR::PathExpression *</type>
      <name>getBlockParam</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_shared_pna_program_info.html</anchorfile>
      <anchor>ac52e3f6bd2ef6398aa59883d77293e42</anchor>
      <arglist>(cstring blockLabel, size_t paramIndex) const</arglist>
    </member>
    <member kind="function">
      <type>const ordered_map&lt; cstring, const IR::Type_Declaration * &gt; *</type>
      <name>getProgrammableBlocks</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_shared_pna_program_info.html</anchorfile>
      <anchor>a6582c02c1af1bc054b1a2c26ce2ecd24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IR::StateVariable &amp;</type>
      <name>getTargetInputPortVar</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_shared_pna_program_info.html</anchorfile>
      <anchor>a9dab7377e1a4ded8ab68aa2197301325</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const IR::StateVariable &amp;</type>
      <name>getTargetOutputPortVar</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_shared_pna_program_info.html</anchorfile>
      <anchor>a92f56f53e4801e02fbe199e0daf06965</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Pna::SharedPnaTableStepper</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_shared_pna_table_stepper.html</filename>
    <base>P4Tools::P4Testgen::TableStepper</base>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>TableImplementation</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_shared_pna_table_stepper.html</anchorfile>
      <anchor>a72a514ec6cf62f409e671b1f97bade09</anchor>
      <arglist></arglist>
      <enumvalue file="class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_shared_pna_table_stepper.html" anchor="a72a514ec6cf62f409e671b1f97bade09ac00f0c4675b91fb8b918e4079a0b1bac">standard</enumvalue>
      <enumvalue file="class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_shared_pna_table_stepper.html" anchor="a72a514ec6cf62f409e671b1f97bade09a5b3c32009797feb79096d52e56a56b82">selector</enumvalue>
      <enumvalue file="class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_shared_pna_table_stepper.html" anchor="a72a514ec6cf62f409e671b1f97bade09a7d97481b1fe66f4b51db90da7e794d9f">profile</enumvalue>
      <enumvalue file="class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_shared_pna_table_stepper.html" anchor="a72a514ec6cf62f409e671b1f97bade09a617ac08757d38a5a7ed91c224f0e90a0">constant</enumvalue>
      <enumvalue file="class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_shared_pna_table_stepper.html" anchor="a72a514ec6cf62f409e671b1f97bade09a08b43519a7e36ee4c6c5615d1663bcfd">skip</enumvalue>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkForActionProfile</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_shared_pna_table_stepper.html</anchorfile>
      <anchor>a654f2e57cbce2053f7d55ef7c9b2657d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkForActionSelector</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_shared_pna_table_stepper.html</anchorfile>
      <anchor>a82e66010841dcb86076ac3675fa77281</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkTargetProperties</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_shared_pna_table_stepper.html</anchorfile>
      <anchor>a9cb67997551c6a09db88fd999f5076a3</anchor>
      <arglist>(const std::vector&lt; const IR::ActionListElement * &gt; &amp;tableActionList) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IR::Expression *</type>
      <name>computeTargetMatchType</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_shared_pna_table_stepper.html</anchorfile>
      <anchor>a2356a7d58f7026c5327adcda11e2fcac</anchor>
      <arglist>(const TableUtils::KeyProperties &amp;keyProperties, TableMatchMap *matches, const IR::Expression *hitCondition) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>evalTableActionProfile</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_shared_pna_table_stepper.html</anchorfile>
      <anchor>a425360ab2fec39c4f58627f53d40652d</anchor>
      <arglist>(const std::vector&lt; const IR::ActionListElement * &gt; &amp;tableActionList)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>evalTableActionSelector</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_shared_pna_table_stepper.html</anchorfile>
      <anchor>a8f94134367d64ead044d2167b20f8be5</anchor>
      <arglist>(const std::vector&lt; const IR::ActionListElement * &gt; &amp;tableActionList)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>evalTargetTable</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_shared_pna_table_stepper.html</anchorfile>
      <anchor>a3d385f37a4872d888628b3e45d1d781e</anchor>
      <arglist>(const std::vector&lt; const IR::ActionListElement * &gt; &amp;tableActionList) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4Tools::P4Testgen::Pna::SharedPnaTableStepper::SharedPnaProperties</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_shared_pna_table_stepper.html</filename>
    <anchor>struct_p4_tools_1_1_p4_testgen_1_1_pna_1_1_shared_pna_table_stepper_1_1_shared_pna_properties</anchor>
    <member kind="variable">
      <type>const PnaDpdkActionProfile *</type>
      <name>actionProfile</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_shared_pna_table_stepper.html</anchorfile>
      <anchor>a105b84ac9bceeac2a2bb136bc09896ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PnaDpdkActionSelector *</type>
      <name>actionSelector</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_shared_pna_table_stepper.html</anchorfile>
      <anchor>a949a541f02e77566352ad102e722b748</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; const IR::Expression * &gt;</type>
      <name>actionSelectorKeys</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_shared_pna_table_stepper.html</anchorfile>
      <anchor>a5cffd5b5a4d3bd0535850638a7326724</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>addProfileToState</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_shared_pna_table_stepper.html</anchorfile>
      <anchor>ae51989f7acd1cf4e95ab6aa66c491329</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TableImplementation</type>
      <name>implementaton</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_pna_1_1_shared_pna_table_stepper.html</anchorfile>
      <anchor>ab54ec380d94322e4dbd63585f2a8f852</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::ProgramInfo</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_program_info.html</filename>
    <base>ICastable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const IR::Expression *</type>
      <name>createTargetUninitialized</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_program_info.html</anchorfile>
      <anchor>abffaa2aab44d335472a2f8c91b82ba60</anchor>
      <arglist>(const IR::Type *type, bool forceTaint) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const IR::Expression *</type>
      <name>dropIsActive</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_program_info.html</anchorfile>
      <anchor>a40644d4d6fec5e2dddeea6dace0ac3c8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const ArchSpec &amp;</type>
      <name>getArchSpec</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_program_info.html</anchorfile>
      <anchor>a1648de855abd984eb8e105855a8d0bef</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>const NodesCallGraph &amp;</type>
      <name>getCallGraph</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_program_info.html</anchorfile>
      <anchor>a0c38ffa949f74819883f6083679dfe30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>getCanonicalBlockName</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_program_info.html</anchorfile>
      <anchor>a72cfc18fb32ed5cdd1bbba1e1437feff</anchor>
      <arglist>(cstring programBlockName) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TestgenCompilerResult &amp;</type>
      <name>getCompilerResult</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_program_info.html</anchorfile>
      <anchor>aefc475ab64a2c84197a88681e9557772</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ConcolicMethodImpls *</type>
      <name>getConcolicMethodImpls</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_program_info.html</anchorfile>
      <anchor>a14c006517ff8239efdf9c29c4b3745cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const P4::Coverage::CoverageSet &amp;</type>
      <name>getCoverableNodes</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_program_info.html</anchorfile>
      <anchor>a8ec756939e49ce6611c9737b38fa14f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IR::P4Program &amp;</type>
      <name>getP4Program</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_program_info.html</anchorfile>
      <anchor>ab842018c3b7f056534311faf296778e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Continuation::Command &gt; *</type>
      <name>getPipelineSequence</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_program_info.html</anchorfile>
      <anchor>a1643b26ff35192406234316ff16817a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; const IR::Expression * &gt;</type>
      <name>getTargetConstraints</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_program_info.html</anchorfile>
      <anchor>a4c8b1cbcb5e8f573a88ebe473bfe5b0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const IR::StateVariable &amp;</type>
      <name>getTargetInputPortVar</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_program_info.html</anchorfile>
      <anchor>a55f93bff8b49bfae535611f416fe4cb5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const IR::StateVariable &amp;</type>
      <name>getTargetOutputPortVar</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_program_info.html</anchorfile>
      <anchor>ac5648af1b4bec74fef4f3c065c395f6e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>produceCopyInOutCall</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_program_info.html</anchorfile>
      <anchor>adad6dcb3ac0f8ff972dd243c4480e4e2</anchor>
      <arglist>(const IR::Parameter *param, size_t paramIdx, const ArchSpec::ArchMember *archMember, std::vector&lt; Continuation::Command &gt; *copyIns, std::vector&lt; Continuation::Command &gt; *copyOuts) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ordered_map&lt; cstring, cstring &gt;</type>
      <name>blockMap</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_program_info.html</anchorfile>
      <anchor>aee78be5c093c37ad829efa6f7d7cbbea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConcolicMethodImpls</type>
      <name>concolicMethodImpls</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_program_info.html</anchorfile>
      <anchor>ab21ea62144da986edc7e256a6dce14ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Continuation::Command &gt;</type>
      <name>pipelineSequence</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_program_info.html</anchorfile>
      <anchor>a4225bbde7ff13f4475ce6f3f34b3d56f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::optional&lt; const IR::Expression * &gt;</type>
      <name>targetConstraints</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_program_info.html</anchorfile>
      <anchor>a96e1c45010f17b09fd6f6dbbf50641c6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::RandomBacktrack</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_random_backtrack.html</filename>
    <base>P4Tools::P4Testgen::SymbolicExecutor</base>
    <member kind="function">
      <type></type>
      <name>RandomBacktrack</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_random_backtrack.html</anchorfile>
      <anchor>a938f332d20f9d251f3b08eae99bf114b</anchor>
      <arglist>(AbstractSolver &amp;solver, const ProgramInfo &amp;programInfo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runImpl</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_random_backtrack.html</anchorfile>
      <anchor>a12fd18b474dbbf7495f7ad0bf84b33ee</anchor>
      <arglist>(const Callback &amp;callBack, ExecutionStateReference executionState) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::SelectedBranches</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_selected_branches.html</filename>
    <base>P4Tools::P4Testgen::SymbolicExecutor</base>
    <member kind="function">
      <type></type>
      <name>SelectedBranches</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_selected_branches.html</anchorfile>
      <anchor>af1e0a2365f450c242b8b1f13ae844fd9</anchor>
      <arglist>(AbstractSolver &amp;solver, const ProgramInfo &amp;programInfo, std::string selectedBranchesStr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runImpl</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_selected_branches.html</anchorfile>
      <anchor>ae2966fcba41f59237bc7f241ad23cc53</anchor>
      <arglist>(const Callback &amp;callBack, ExecutionStateReference executionState) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::SmallStepEvaluator</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_small_step_evaluator.html</filename>
    <class kind="struct">P4Tools::P4Testgen::SmallStepEvaluator::Branch</class>
    <member kind="variable" static="yes">
      <type>static constexpr uint64_t</type>
      <name>MAX_GUARD_VIOLATIONS</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_small_step_evaluator.html</anchorfile>
      <anchor>a5d678eda40cc54c90cb440586525d73b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4Tools::P4Testgen::SmallStepEvaluator::Branch</name>
    <filename>struct_p4_tools_1_1_p4_testgen_1_1_small_step_evaluator_1_1_branch.html</filename>
    <member kind="function">
      <type></type>
      <name>Branch</name>
      <anchorfile>struct_p4_tools_1_1_p4_testgen_1_1_small_step_evaluator_1_1_branch.html</anchorfile>
      <anchor>a8394e8f9583e36ebacbbba5c90a480af</anchor>
      <arglist>(ExecutionState &amp;nextState)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Branch</name>
      <anchorfile>struct_p4_tools_1_1_p4_testgen_1_1_small_step_evaluator_1_1_branch.html</anchorfile>
      <anchor>a4416c1a7873f31722a5c1b7351c9d3d6</anchor>
      <arglist>(std::optional&lt; const Constraint * &gt; c, const ExecutionState &amp;prevState, ExecutionState &amp;nextState)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Branch</name>
      <anchorfile>struct_p4_tools_1_1_p4_testgen_1_1_small_step_evaluator_1_1_branch.html</anchorfile>
      <anchor>ab305a536779e8e187608554ea26ce6d1</anchor>
      <arglist>(std::optional&lt; const Constraint * &gt; c, const ExecutionState &amp;prevState, ExecutionState &amp;nextState, P4::Coverage::CoverageSet potentialNodes)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::SymbolicExecutor</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_symbolic_executor.html</filename>
    <member kind="typedef">
      <type>std::function&lt; bool(const FinalState &amp;)&gt;</type>
      <name>Callback</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_symbolic_executor.html</anchorfile>
      <anchor>a14dd8b1aa16b758902735075580621e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const P4::Coverage::CoverageSet &amp;</type>
      <name>getVisitedNodes</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_symbolic_executor.html</anchorfile>
      <anchor>a06af4169c92f36f2f20f96d2d4e6033d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printCurrentTraceAndBranches</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_symbolic_executor.html</anchorfile>
      <anchor>a01cac5bce06b117096d78a7a5efd0f8d</anchor>
      <arglist>(std::ostream &amp;out, const ExecutionState &amp;executionState)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>run</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_symbolic_executor.html</anchorfile>
      <anchor>a20bdd75f26f490059808a2872580945a</anchor>
      <arglist>(const Callback &amp;callBack)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateVisitedNodes</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_symbolic_executor.html</anchorfile>
      <anchor>a48ee99b5f6502892ad6c72077a733207</anchor>
      <arglist>(const P4::Coverage::CoverageSet &amp;newNodes)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>handleTerminalState</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_symbolic_executor.html</anchorfile>
      <anchor>a88c5f5d4061e27c3025239d23c3a001d</anchor>
      <arglist>(const Callback &amp;callback, const ExecutionState &amp;terminalState)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>StepResult</type>
      <name>step</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_symbolic_executor.html</anchorfile>
      <anchor>aad52ca20f80c44d610fdbd89e66413db</anchor>
      <arglist>(ExecutionState &amp;state)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>evaluateBranch</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_symbolic_executor.html</anchorfile>
      <anchor>a24bb18bb5f95be39c2f50c9fc3af89c4</anchor>
      <arglist>(const SymbolicExecutor::Branch &amp;branch, AbstractSolver &amp;solver)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static SymbolicExecutor::Branch</type>
      <name>popRandomBranch</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_symbolic_executor.html</anchorfile>
      <anchor>ae88e6139af4cc10533bed57cec4e830b</anchor>
      <arglist>(std::vector&lt; SymbolicExecutor::Branch &gt; &amp;candidateBranches)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const P4::Coverage::CoverageSet &amp;</type>
      <name>coverableNodes</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_symbolic_executor.html</anchorfile>
      <anchor>a739b6ab60610bb380c3345136b0ad04e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ProgramInfo &amp;</type>
      <name>programInfo</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_symbolic_executor.html</anchorfile>
      <anchor>a1c26937ebfed9ddc35fa9cdfdac1611f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AbstractSolver &amp;</type>
      <name>solver</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_symbolic_executor.html</anchorfile>
      <anchor>a467403adad2a2e60ca714c295cfd839e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P4::Coverage::CoverageSet</type>
      <name>visitedNodes</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_symbolic_executor.html</anchorfile>
      <anchor>ac62c10f2155d5d4b9e6a29d3db5f26e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::TableConfig</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_table_config.html</filename>
    <base>P4Tools::P4Testgen::TestObject</base>
    <member kind="function">
      <type>void</type>
      <name>addTableProperty</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_table_config.html</anchorfile>
      <anchor>acd37fdb53b2463e1e9cd0edc5e10940e</anchor>
      <arglist>(cstring propertyName, const TestObject *property)</arglist>
    </member>
    <member kind="function">
      <type>const TableConfig *</type>
      <name>evaluate</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_table_config.html</anchorfile>
      <anchor>a0a17cef7890b69e63de7271273cf5020</anchor>
      <arglist>(const Model &amp;model, bool doComplete) const override</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>getObjectName</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_table_config.html</anchorfile>
      <anchor>af52db8519822c4f08926d4200fc62b32</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const TestObjectMap *</type>
      <name>getProperties</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_table_config.html</anchorfile>
      <anchor>ab8334e15b9be59db633ebeb935c32a55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const TestObject *</type>
      <name>getProperty</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_table_config.html</anchorfile>
      <anchor>aa5fb306ca3b5ccf7ce58b50c73e1878d</anchor>
      <arglist>(cstring propertyName, bool checked) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; TableRule &gt; *</type>
      <name>getRules</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_table_config.html</anchorfile>
      <anchor>ad20ed5e4885c0073eacc6621cfc38c63</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::TableMatch</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_table_match.html</filename>
    <base>P4Tools::P4Testgen::TestObject</base>
    <member kind="function">
      <type>const IR::KeyElement *</type>
      <name>getKey</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_table_match.html</anchorfile>
      <anchor>adcf65159089554e7402cfcb1554ab8bb</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::TableRule</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_table_rule.html</filename>
    <base>P4Tools::P4Testgen::TestObject</base>
    <member kind="function">
      <type>const TableRule *</type>
      <name>evaluate</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_table_rule.html</anchorfile>
      <anchor>a9d23733ec204291833bea045e1abf728</anchor>
      <arglist>(const Model &amp;model, bool doComplete) const override</arglist>
    </member>
    <member kind="function">
      <type>const ActionCall *</type>
      <name>getActionCall</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_table_rule.html</anchorfile>
      <anchor>af42638374f998bd1ef5bb43e41c786e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const TableMatchMap *</type>
      <name>getMatches</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_table_rule.html</anchorfile>
      <anchor>aed13ae8f997124e25101b1c1077929fd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>getObjectName</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_table_rule.html</anchorfile>
      <anchor>a299d4cc5f0b8c4cb31da60b7c294f436</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPriority</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_table_rule.html</anchorfile>
      <anchor>ac9a4515ebf931311c9f1daea7768967c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTTL</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_table_rule.html</anchorfile>
      <anchor>ad6ddfc6515796cfe62f31edb516e7568</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::TableStepper</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_table_stepper.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>eval</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_table_stepper.html</anchorfile>
      <anchor>ada8c0d1dfc8e99bde4635f86741790dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const IR::StateVariable &amp;</type>
      <name>getTableActionVar</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_table_stepper.html</anchorfile>
      <anchor>ad00e87b1fcd127cc1f21500ad29f5b96</anchor>
      <arglist>(const IR::P4Table *table)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const IR::StateVariable &amp;</type>
      <name>getTableHitVar</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_table_stepper.html</anchorfile>
      <anchor>a35169582aa43e52b8634ad989bfdbea4</anchor>
      <arglist>(const IR::P4Table *table)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const IR::StateVariable &amp;</type>
      <name>getTableStateVariable</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_table_stepper.html</anchorfile>
      <anchor>ac111a94e92616057f2316a458ada466c</anchor>
      <arglist>(const IR::Type *type, const IR::P4Table *table, cstring name, std::optional&lt; int &gt; idx1_opt=std::nullopt, std::optional&lt; int &gt; idx2_opt=std::nullopt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addDefaultAction</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_table_stepper.html</anchorfile>
      <anchor>a7c6dc5b87042e052581926547e4e94aa</anchor>
      <arglist>(std::optional&lt; const IR::Expression * &gt; tableMissCondition)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; const IR::ActionListElement * &gt;</type>
      <name>buildTableActionList</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_table_stepper.html</anchorfile>
      <anchor>a177bc488efb6f357ea2abf5e2c9f8cb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>checkTargetProperties</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_table_stepper.html</anchorfile>
      <anchor>a6abaac11d18ba12681f815ea954369b1</anchor>
      <arglist>(const std::vector&lt; const IR::ActionListElement * &gt; &amp;tableActionList)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IR::Expression *</type>
      <name>computeHit</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_table_stepper.html</anchorfile>
      <anchor>a4cd5b526d02efb306233fb0f5d43ac01</anchor>
      <arglist>(TableMatchMap *matches)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const IR::Expression *</type>
      <name>computeTargetMatchType</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_table_stepper.html</anchorfile>
      <anchor>a1596c00920e9550f080623041c9f95bd</anchor>
      <arglist>(const TableUtils::KeyProperties &amp;keyProperties, TableMatchMap *matches, const IR::Expression *hitCondition)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>evalTableCall</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_table_stepper.html</anchorfile>
      <anchor>a2dd79b99fdfbd260dda6a959f74f113e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IR::Expression *</type>
      <name>evalTableConstEntries</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_table_stepper.html</anchorfile>
      <anchor>a0064055d0e2a657f7e7744e48af33ede</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>evalTableControlEntries</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_table_stepper.html</anchorfile>
      <anchor>ad548a9d4e39172d2d59e54e83830e95c</anchor>
      <arglist>(const std::vector&lt; const IR::ActionListElement * &gt; &amp;tableActionList)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>evalTaintedTable</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_table_stepper.html</anchorfile>
      <anchor>a7be333d7f79caff73b4338b0d5f72176</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>evalTargetTable</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_table_stepper.html</anchorfile>
      <anchor>a4df62931ccacb0e7b92d3928f0648da9</anchor>
      <arglist>(const std::vector&lt; const IR::ActionListElement * &gt; &amp;tableActionList)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const ExecutionState *</type>
      <name>getExecutionState</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_table_stepper.html</anchorfile>
      <anchor>a754cb3d00363af6094c35b27c9680f83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const ProgramInfo *</type>
      <name>getProgramInfo</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_table_stepper.html</anchorfile>
      <anchor>af17a2b99cfe224846960dd61e1145a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ExprStepper::Result</type>
      <name>getResult</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_table_stepper.html</anchorfile>
      <anchor>adbc033e7295bf3286ce9fe36d2ac6a70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IR::StringLiteral *</type>
      <name>getTableActionString</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_table_stepper.html</anchorfile>
      <anchor>a508891e76c07ce5f4658a9051718729c</anchor>
      <arglist>(const IR::MethodCallExpression *actionCall)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>resolveTableKeys</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_table_stepper.html</anchorfile>
      <anchor>af144b0b11eb8f2c96390dc786e84c79b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TableUtils::TableProperties</type>
      <name>properties</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_table_stepper.html</anchorfile>
      <anchor>ac9175100ad076e0f7faa29dcdc2b2c11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExprStepper *</type>
      <name>stepper</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_table_stepper.html</anchorfile>
      <anchor>a16f873dfa8e2bc7f778b746c3a67244a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const IR::P4Table *</type>
      <name>table</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_table_stepper.html</anchorfile>
      <anchor>a77ab7e4884645a72e8b7d36bebfb3ac1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Ternary</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_ternary.html</filename>
    <base>P4Tools::P4Testgen::TableMatch</base>
    <member kind="function">
      <type>const Ternary *</type>
      <name>evaluate</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_ternary.html</anchorfile>
      <anchor>a67e18afc38e7afe735effce0f6f39c4d</anchor>
      <arglist>(const Model &amp;model, bool doComplete) const override</arglist>
    </member>
    <member kind="function">
      <type>const IR::Constant *</type>
      <name>getEvaluatedMask</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_ternary.html</anchorfile>
      <anchor>a5d741b4794ed94a16bc46870ad5105f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IR::Constant *</type>
      <name>getEvaluatedValue</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_ternary.html</anchorfile>
      <anchor>ab0adcb8175251b8f2ada9fcc2599e47b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>getObjectName</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_ternary.html</anchorfile>
      <anchor>a2d43e484e45697d94f9e84197e4e3907</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::TestBackEnd</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_test_back_end.html</filename>
    <member kind="function">
      <type>std::optional&lt; std::reference_wrapper&lt; const FinalState &gt; &gt;</type>
      <name>computeConcolicVariables</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_back_end.html</anchorfile>
      <anchor>aed64c73664502c11fa1925654672a9c3</anchor>
      <arglist>(const FinalState &amp;state) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const TestSpec *</type>
      <name>createTestSpec</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_back_end.html</anchorfile>
      <anchor>ac2d2b08c2f239968d23b782c91427fa5</anchor>
      <arglist>(const ExecutionState *executionState, const Model *finalModel, const TestInfo &amp;testInfo)=0</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getCoverage</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_back_end.html</anchorfile>
      <anchor>a0c4a6d5b38fbb0640af711a5576d5d38</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ProgramInfo &amp;</type>
      <name>getProgramInfo</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_back_end.html</anchorfile>
      <anchor>a9da8d0da672fef6c4440df1154253b5d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const TestBackendConfiguration &amp;</type>
      <name>getTestBackendConfiguration</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_back_end.html</anchorfile>
      <anchor>a605a1984ea05088d2eba7c8bacce7d37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>getTestCount</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_back_end.html</anchorfile>
      <anchor>a3dbd69a27bf1af474e5b2f28bafad802</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const AbstractTestList &amp;</type>
      <name>getTests</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_back_end.html</anchorfile>
      <anchor>a547ebb6c0dca766f1480daf8a971aec4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>printTestInfo</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_back_end.html</anchorfile>
      <anchor>a6b8965ddb78f9dcc0c6cffea49efdd6e</anchor>
      <arglist>(const ExecutionState *executionState, const TestInfo &amp;testInfo, const IR::Expression *outputPortExpr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TestInfo</type>
      <name>produceTestInfo</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_back_end.html</anchorfile>
      <anchor>ad1300e62e5a05bcc3b3eabbe385d3d3e</anchor>
      <arglist>(const ExecutionState *executionState, const Model *finalModel, const IR::Expression *outputPacketExpr, const IR::Expression *outputPortExpr, const std::vector&lt; std::reference_wrapper&lt; const TraceEvent &gt; &gt; *programTraces)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>run</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_back_end.html</anchorfile>
      <anchor>af78132ff3b77f6df73ec41cee6253562</anchor>
      <arglist>(const FinalState &amp;state)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>coverage</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_back_end.html</anchorfile>
      <anchor>a4c481579fb8ab51b36eef04cae88df88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int64_t</type>
      <name>maxTests</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_back_end.html</anchorfile>
      <anchor>a502408ed4bd635c5a5c1b82175c69292</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SymbolicExecutor &amp;</type>
      <name>symbex</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_back_end.html</anchorfile>
      <anchor>abe7e907a4dfd79b4882be693bf232320</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AbstractTestList</type>
      <name>tests</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_back_end.html</anchorfile>
      <anchor>a8dd4e7a9e04d7c7698cbb7cdba14efad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TestFramework *</type>
      <name>testWriter</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_back_end.html</anchorfile>
      <anchor>a774fd4c15da6377188a3be2f4087b405</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4Tools::P4Testgen::TestBackEnd::TestInfo</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_test_back_end.html</filename>
    <anchor>struct_p4_tools_1_1_p4_testgen_1_1_test_back_end_1_1_test_info</anchor>
    <member kind="variable">
      <type>const IR::Constant *</type>
      <name>inputPacket</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_back_end.html</anchorfile>
      <anchor>a1ef371f148803ded0dc9938134471c5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>inputPort</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_back_end.html</anchorfile>
      <anchor>a32604c807b750d4919d18e39ebf99155</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IR::Constant *</type>
      <name>outputPacket</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_back_end.html</anchorfile>
      <anchor>a7a18cf6a559da97502787e691af65661</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>outputPort</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_back_end.html</anchorfile>
      <anchor>ad89141c9a6fea3b9307df8ecc3d18b32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>packetIsDropped</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_back_end.html</anchorfile>
      <anchor>a27d751dbbfa3086c202656e1eb7c146d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IR::Constant *</type>
      <name>packetTaintMask</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_back_end.html</anchorfile>
      <anchor>ab8bf2c07415a957f685765c631c1f2e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::vector&lt; std::reference_wrapper&lt; const TraceEvent &gt; &gt;</type>
      <name>programTraces</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_back_end.html</anchorfile>
      <anchor>abc23de3dfa1e5db5e3bc0989bdd90156</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4Tools::P4Testgen::TestBackendConfiguration</name>
    <filename>struct_p4_tools_1_1_p4_testgen_1_1_test_backend_configuration.html</filename>
    <member kind="variable">
      <type>OptionalFilePath</type>
      <name>fileBasePath</name>
      <anchorfile>struct_p4_tools_1_1_p4_testgen_1_1_test_backend_configuration.html</anchorfile>
      <anchor>a85b763b7c0001f047133851bb68e8f31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64_t</type>
      <name>maxTests</name>
      <anchorfile>struct_p4_tools_1_1_p4_testgen_1_1_test_backend_configuration.html</anchorfile>
      <anchor>a6f7c16976531e58dd8ed636e887a8336</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::optional&lt; unsigned int &gt;</type>
      <name>seed</name>
      <anchorfile>struct_p4_tools_1_1_p4_testgen_1_1_test_backend_configuration.html</anchorfile>
      <anchor>ad39ec6d0f9bf95dbeb0992aaf19d5595</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cstring</type>
      <name>testBaseName</name>
      <anchorfile>struct_p4_tools_1_1_p4_testgen_1_1_test_backend_configuration.html</anchorfile>
      <anchor>aa76e0a95764568708221ff326c66dd99</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::TestFramework</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_test_framework.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>isInFileMode</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_framework.html</anchorfile>
      <anchor>a14a7cebe8d115fc8548fd086bc3d0028</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractTestReferenceOrError</type>
      <name>produceTest</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_framework.html</anchorfile>
      <anchor>a9b211f4ad61c87d1320298176cf642fd</anchor>
      <arglist>(const TestSpec *spec, cstring selectedBranches, size_t testIdx, float currentCoverage)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeTestToFile</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_framework.html</anchorfile>
      <anchor>ac660dff5f21ecfa2b889b6be737addeb</anchor>
      <arglist>(const TestSpec *spec, cstring selectedBranches, size_t testIdx, float currentCoverage)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TestFramework</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_framework.html</anchorfile>
      <anchor>a1d85925cecbef40336a98ea35b032430</anchor>
      <arglist>(const TestBackendConfiguration &amp;testBackendConfiguration)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const TestBackendConfiguration &amp;</type>
      <name>getTestBackendConfiguration</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_framework.html</anchorfile>
      <anchor>a8680c4a19eec018f75c9c8d4c0c8bf15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>checkForDefaultActionOverride</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_framework.html</anchorfile>
      <anchor>a2b345611fc81c532e106d0ed2e69bf4f</anchor>
      <arglist>(inja::json &amp;tblJson, const TableConfig *tblConfig)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>checkForTableActionProfile</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_framework.html</anchorfile>
      <anchor>a06afdebd2f91af2769834b0b732ba5fd</anchor>
      <arglist>(inja::json &amp;tblJson, std::map&lt; cstring, cstring &gt; &amp;apAsMap, const TableConfig *tblConfig)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>collectActionProfileDeclarations</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_framework.html</anchorfile>
      <anchor>a953375ecf816f93f658c165a80568109</anchor>
      <arglist>(const TestSpec *testSpec, inja::json &amp;controlPlaneJson, const std::map&lt; cstring, cstring &gt; &amp;apAsMap)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static inja::json</type>
      <name>getTrace</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_framework.html</anchorfile>
      <anchor>a1b0370e00cca5cfd125ecf424951512f</anchor>
      <arglist>(const TestSpec *testSpec)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::Testgen</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_testgen.html</filename>
    <base>P4Tools::AbstractP4cTool&lt; TestgenOptions &gt;</base>
    <member kind="function" static="yes">
      <type>static std::optional&lt; AbstractTestList &gt;</type>
      <name>generateTests</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen.html</anchorfile>
      <anchor>af6f5d0dabe516a281b9eb3d44293cd6d</anchor>
      <arglist>(const CompilerOptions &amp;options, const TestgenOptions &amp;testgenOptions)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::optional&lt; AbstractTestList &gt;</type>
      <name>generateTests</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen.html</anchorfile>
      <anchor>aedd2c56a04edf4efb3c2352963b2c785</anchor>
      <arglist>(std::string_view program, const CompilerOptions &amp;options, const TestgenOptions &amp;testgenOptions)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>writeTests</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen.html</anchorfile>
      <anchor>aae88bbbd75a743da5908d5d40f2635ed</anchor>
      <arglist>(const CompilerOptions &amp;options, const TestgenOptions &amp;testgenOptions)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>writeTests</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen.html</anchorfile>
      <anchor>a87406ee7a130d42cd4d4931e579c2b3d</anchor>
      <arglist>(std::string_view program, const CompilerOptions &amp;options, const TestgenOptions &amp;testgenOptions)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>mainImpl</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen.html</anchorfile>
      <anchor>ac9945785627d561b71aa2a201326fff4</anchor>
      <arglist>(const CompilerResult &amp;compilerResult) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::TestgenCompilerResult</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_testgen_compiler_result.html</filename>
    <base>P4Tools::CompilerResult</base>
    <member kind="function">
      <type>const NodesCallGraph &amp;</type>
      <name>getCallGraph</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen_compiler_result.html</anchorfile>
      <anchor>aabf6eedd707c50ad5122a0c55b040458</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const P4::Coverage::CoverageSet &amp;</type>
      <name>getCoverableNodes</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen_compiler_result.html</anchorfile>
      <anchor>a2391096ad393060065155a502ce7b170</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::TestgenCompilerTarget</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_testgen_compiler_target.html</filename>
    <base>P4Tools::CompilerTarget</base>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::TestgenOptions</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_testgen_options.html</filename>
    <base>P4Tools::AbstractP4cToolOptions</base>
    <member kind="function" static="yes">
      <type>static TestgenOptions &amp;</type>
      <name>get</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen_options.html</anchorfile>
      <anchor>a6c172f4296af39d0d7b698003c58fd5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>assertionModeEnabled</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen_options.html</anchorfile>
      <anchor>af6465eb043e4e0b4b7448422f996b67b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P4::Coverage::CoverageOptions</type>
      <name>coverageOptions</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen_options.html</anchorfile>
      <anchor>a9481ec3f43e54a2995d703e2955e91ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>dcg</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen_options.html</anchorfile>
      <anchor>a7442031100213c4c7518535912e62bdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>droppedPacketOnly</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen_options.html</anchorfile>
      <anchor>a2b54f41713d74d52028002a76fa444ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enforceAssumptions</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen_options.html</anchorfile>
      <anchor>a12f6f1b66720ea002a40b06b0a69d854</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasCoverageTracking</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen_options.html</anchorfile>
      <anchor>af89bd5b638553b5920512b978c03cea6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>maxPktSize</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen_options.html</anchorfile>
      <anchor>a7551da1289ff8d6ffb81d60f44bfce09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64_t</type>
      <name>maxTests</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen_options.html</anchorfile>
      <anchor>a366663fc814901630ace54d912cceeb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>minCoverage</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen_options.html</anchorfile>
      <anchor>a03c71f6aa2f1e7967d05ee385056b6d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>minPktSize</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen_options.html</anchorfile>
      <anchor>a8bd69cd06856b1404833585a4fddc052</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::optional&lt; std::filesystem::path &gt;</type>
      <name>outputDir</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen_options.html</anchorfile>
      <anchor>a67db548df3eef323f231bf09ae582968</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>outputPacketOnly</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen_options.html</anchorfile>
      <anchor>a374675146bbf2aed8335ee48e936d372</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P4Testgen::PathSelectionPolicy</type>
      <name>pathSelectionPolicy</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen_options.html</anchorfile>
      <anchor>ab8c221e3157e3b9267add6ae96381e34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>pattern</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen_options.html</anchorfile>
      <anchor>afe9b4547dc3264e8e2fdf7c309573802</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::pair&lt; int, int &gt; &gt;</type>
      <name>permittedPortRanges</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen_options.html</anchorfile>
      <anchor>ab1bce660a6bbc4c00a257c35387861ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>selectedBranches</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen_options.html</anchorfile>
      <anchor>a3423db9cea7082c0118eb28777dd2877</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; cstring &gt;</type>
      <name>skippedControlPlaneEntities</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen_options.html</anchorfile>
      <anchor>a71a491c3efb0792ff55e3b361aed43de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>strict</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen_options.html</anchorfile>
      <anchor>ae0b7d8be8959b8d9e696a0ca11a490ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cstring</type>
      <name>testBackend</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen_options.html</anchorfile>
      <anchor>a32c4bc2a24cf3bf76cdb4e0c9af53036</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::optional&lt; cstring &gt;</type>
      <name>testBaseName</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen_options.html</anchorfile>
      <anchor>a77374d11669911e054be643d73c1764b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>trackBranches</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen_options.html</anchorfile>
      <anchor>af1131f677724789884c202d08b707ee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::set&lt; cstring &gt;</type>
      <name>SUPPORTED_STOP_METRICS</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen_options.html</anchorfile>
      <anchor>abdbaa7821788385efd65c772ec1c13b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>validateOptions</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen_options.html</anchorfile>
      <anchor>abde27b75a7f3fb760ac906b96794442f</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::TestgenTarget</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_testgen_target.html</filename>
    <base>P4Tools::Target</base>
    <member kind="function" static="yes">
      <type>static const TestgenTarget &amp;</type>
      <name>get</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen_target.html</anchorfile>
      <anchor>a52350efebeac76c5dc41bb12d7ff27b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CmdStepper *</type>
      <name>getCmdStepper</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen_target.html</anchorfile>
      <anchor>abd056c0b141bb6ae65cc2795224c4476</anchor>
      <arglist>(ExecutionState &amp;state, AbstractSolver &amp;solver, const ProgramInfo &amp;programInfo)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ExprStepper *</type>
      <name>getExprStepper</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen_target.html</anchorfile>
      <anchor>a3fd19490aa57fb10532e7af421003e5e</anchor>
      <arglist>(ExecutionState &amp;state, AbstractSolver &amp;solver, const ProgramInfo &amp;programInfo)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TestBackEnd *</type>
      <name>getTestBackend</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen_target.html</anchorfile>
      <anchor>a0eee58c0e012e8a91c13eddba282dbc2</anchor>
      <arglist>(const ProgramInfo &amp;programInfo, const TestBackendConfiguration &amp;testBackendConfiguration, SymbolicExecutor &amp;symbex)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ProgramInfo *</type>
      <name>produceProgramInfo</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen_target.html</anchorfile>
      <anchor>a685865e81c416965b94474c61ba09007</anchor>
      <arglist>(const CompilerResult &amp;compilerResult)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual CmdStepper *</type>
      <name>getCmdStepperImpl</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen_target.html</anchorfile>
      <anchor>a04f0c9a345e77635a7a856461de45251</anchor>
      <arglist>(ExecutionState &amp;state, AbstractSolver &amp;solver, const ProgramInfo &amp;programInfo) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual ExprStepper *</type>
      <name>getExprStepperImpl</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen_target.html</anchorfile>
      <anchor>abfe5fcdfee952d2e614799a971f64f5c</anchor>
      <arglist>(ExecutionState &amp;state, AbstractSolver &amp;solver, const ProgramInfo &amp;programInfo) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual TestBackEnd *</type>
      <name>getTestBackendImpl</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen_target.html</anchorfile>
      <anchor>aea1d3aef544d32478b333b7f15ce2a84</anchor>
      <arglist>(const ProgramInfo &amp;programInfo, const TestBackendConfiguration &amp;testBackendConfiguration, SymbolicExecutor &amp;symbex) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const ProgramInfo *</type>
      <name>produceProgramInfoImpl</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen_target.html</anchorfile>
      <anchor>a77017bb9b1255401e1ac2d920782ccc3</anchor>
      <arglist>(const CompilerResult &amp;compilerResult) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual const ProgramInfo *</type>
      <name>produceProgramInfoImpl</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_testgen_target.html</anchorfile>
      <anchor>a834dc82ec5c855da824875c448230ad3</anchor>
      <arglist>(const CompilerResult &amp;compilerResult, const IR::Declaration_Instance *mainDecl) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::TestgenUnimplemented</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_testgen_unimplemented.html</filename>
    <base>Util::P4CExceptionBase</base>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::TestObject</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_test_object.html</filename>
    <base>ICastable</base>
    <member kind="function" virtualness="pure">
      <type>virtual const TestObject *</type>
      <name>evaluate</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_object.html</anchorfile>
      <anchor>afb7411d9ee0490e4c8dc85084ce42650</anchor>
      <arglist>(const Model &amp;model, bool doComplete) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cstring</type>
      <name>getObjectName</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_object.html</anchorfile>
      <anchor>a8fee38c925f37ddbe55ecdcbfa3bcfe7</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::TestSpec</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_test_spec.html</filename>
    <member kind="function">
      <type>void</type>
      <name>addTestObject</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_spec.html</anchorfile>
      <anchor>aa440032223060369e0a9fa977f264405</anchor>
      <arglist>(cstring category, cstring objectLabel, const TestObject *object)</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; const Packet * &gt;</type>
      <name>getEgressPacket</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_spec.html</anchorfile>
      <anchor>a1df81f08a5fee214681a848f6e46f403</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Packet *</type>
      <name>getIngressPacket</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_spec.html</anchorfile>
      <anchor>a776babb40d37669b32b6792229a0378b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; cstring, const TableConfig &gt; *</type>
      <name>getTables</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_spec.html</anchorfile>
      <anchor>a01a111a16d214f622ce13ffd054b39c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const TestObject *</type>
      <name>getTestObject</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_spec.html</anchorfile>
      <anchor>ad11409f2470565cdad9d58243a82f505</anchor>
      <arglist>(cstring category, cstring objectLabel, bool checked) const</arglist>
    </member>
    <member kind="function">
      <type>auto *</type>
      <name>getTestObject</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_spec.html</anchorfile>
      <anchor>a13688af75ae0e27aa20ff01c8cb6391f</anchor>
      <arglist>(cstring category, cstring objectLabel, bool checked) const</arglist>
    </member>
    <member kind="function">
      <type>TestObjectMap</type>
      <name>getTestObjectCategory</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_spec.html</anchorfile>
      <anchor>a58958899921a6902b4a0a67accb5adc0</anchor>
      <arglist>(cstring category) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::reference_wrapper&lt; const TraceEvent &gt; &gt; *</type>
      <name>getTraces</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_spec.html</anchorfile>
      <anchor>a9757ba2fd19901f97aa7a31966dd71e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>NO_PRIORITY</name>
      <anchorfile>class_p4_tools_1_1_p4_testgen_1_1_test_spec.html</anchorfile>
      <anchor>a0895288c279fe27855df4ad481247769</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::P4Testgen::VariableSubstitution</name>
    <filename>class_p4_tools_1_1_p4_testgen_1_1_variable_substitution.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4Tools::ReachabilityEngine</name>
    <filename>class_p4_tools_1_1_reachability_engine.html</filename>
    <member kind="function">
      <type></type>
      <name>ReachabilityEngine</name>
      <anchorfile>class_p4_tools_1_1_reachability_engine.html</anchorfile>
      <anchor>af0bd818c0c3bcbb403a3f1192771acd8</anchor>
      <arglist>(const NodesCallGraph &amp;dcg, std::string reachabilityExpression, bool eliminateAnnotations=false)</arglist>
    </member>
    <member kind="function">
      <type>const NodesCallGraph &amp;</type>
      <name>getDCG</name>
      <anchorfile>class_p4_tools_1_1_reachability_engine.html</anchorfile>
      <anchor>abb4ff61b17231516064f3614767f5f53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ReachabilityResult</type>
      <name>next</name>
      <anchorfile>class_p4_tools_1_1_reachability_engine.html</anchorfile>
      <anchor>ae1a4d7213637f477309c566a82da410e</anchor>
      <arglist>(ReachabilityEngineState *, const DCGVertexType *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IR::Expression *</type>
      <name>addCondition</name>
      <anchorfile>class_p4_tools_1_1_reachability_engine.html</anchorfile>
      <anchor>a2395be896e93ce8146102f924f812dc5</anchor>
      <arglist>(const IR::Expression *prev, const DCGVertexType *currentState)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addEdge</name>
      <anchorfile>class_p4_tools_1_1_reachability_engine.html</anchorfile>
      <anchor>a64a047bf333d2142caad4b6e4f13b092</anchor>
      <arglist>(const DCGVertexType *vertex, IR::ID vertexName=IR::ID())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addTransition</name>
      <anchorfile>class_p4_tools_1_1_reachability_engine.html</anchorfile>
      <anchor>af97c938d172da942b9c9cb8279b27654</anchor>
      <arglist>(const DCGVertexType *, const std::unordered_set&lt; const DCGVertexType * &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>annotationToStatements</name>
      <anchorfile>class_p4_tools_1_1_reachability_engine.html</anchorfile>
      <anchor>ac128a27309a342e3c9c552006cf35114</anchor>
      <arglist>(const DCGVertexType *node, std::unordered_set&lt; const DCGVertexType * &gt; &amp;s)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IR::Expression *</type>
      <name>getCondition</name>
      <anchorfile>class_p4_tools_1_1_reachability_engine.html</anchorfile>
      <anchor>af8a4166a146b18bec4fa5c817c8078ce</anchor>
      <arglist>(const DCGVertexType *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::unordered_set&lt; const DCGVertexType * &gt;</type>
      <name>getName</name>
      <anchorfile>class_p4_tools_1_1_reachability_engine.html</anchorfile>
      <anchor>ab78d5ddd02eb959d3e5c79ef134d5e01</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const IR::Expression *</type>
      <name>stringToNode</name>
      <anchorfile>class_p4_tools_1_1_reachability_engine.html</anchorfile>
      <anchor>a8ab26d980f33d47f4f64b51454402055</anchor>
      <arglist>(std::string name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::ReachabilityEngineState</name>
    <filename>class_p4_tools_1_1_reachability_engine_state.html</filename>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>class_p4_tools_1_1_reachability_engine_state.html</anchorfile>
      <anchor>a988570bf418ddb7d8c0e32b34640a3b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ReachabilityEngineState *</type>
      <name>copy</name>
      <anchorfile>class_p4_tools_1_1_reachability_engine_state.html</anchorfile>
      <anchor>abd7506784c5af1c71e261cd0515a6c4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DCGVertexType *</type>
      <name>getPrevNode</name>
      <anchorfile>class_p4_tools_1_1_reachability_engine_state.html</anchorfile>
      <anchor>aa7532af76d57b5bcc59661edea789065</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; const DCGVertexType * &gt;</type>
      <name>getState</name>
      <anchorfile>class_p4_tools_1_1_reachability_engine_state.html</anchorfile>
      <anchor>a255d79f35d319e475cb7786b1f3461d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>class_p4_tools_1_1_reachability_engine_state.html</anchorfile>
      <anchor>a251d6a63910954a6ff9c85b699b90a3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrevNode</name>
      <anchorfile>class_p4_tools_1_1_reachability_engine_state.html</anchorfile>
      <anchor>a2e5dc24d916061977d2afaaf042ace4e</anchor>
      <arglist>(const DCGVertexType *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>class_p4_tools_1_1_reachability_engine_state.html</anchorfile>
      <anchor>ada82142b2e947f8b8671bdbd0a6d6f0e</anchor>
      <arglist>(std::list&lt; const DCGVertexType * &gt;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReachabilityEngineState *</type>
      <name>getInitial</name>
      <anchorfile>class_p4_tools_1_1_reachability_engine_state.html</anchorfile>
      <anchor>a04a6b9543ae8ae4635d8618e67e7d1e2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::SymbolicEnv</name>
    <filename>class_p4_tools_1_1_symbolic_env.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>class_p4_tools_1_1_symbolic_env.html</anchorfile>
      <anchor>a84f74afefa1bb775215a4cfefa0f7e67</anchor>
      <arglist>(const IR::StateVariable &amp;var) const</arglist>
    </member>
    <member kind="function">
      <type>const IR::Expression *</type>
      <name>get</name>
      <anchorfile>class_p4_tools_1_1_symbolic_env.html</anchorfile>
      <anchor>a288d0aae7223a4f65ed188914f68c534</anchor>
      <arglist>(const IR::StateVariable &amp;var) const</arglist>
    </member>
    <member kind="function">
      <type>const SymbolicMapType &amp;</type>
      <name>getInternalMap</name>
      <anchorfile>class_p4_tools_1_1_symbolic_env.html</anchorfile>
      <anchor>aa67b7ac9d86e98186dce14417c528733</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>class_p4_tools_1_1_symbolic_env.html</anchorfile>
      <anchor>a154908f04c16f9b2aa3cd036cd37b547</anchor>
      <arglist>(const IR::StateVariable &amp;var, const IR::Expression *value)</arglist>
    </member>
    <member kind="function">
      <type>const IR::Expression *</type>
      <name>subst</name>
      <anchorfile>class_p4_tools_1_1_symbolic_env.html</anchorfile>
      <anchor>a5a4fea2189fac9005cbc6e87d5a35477</anchor>
      <arglist>(const IR::Expression *expr) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isSymbolicValue</name>
      <anchorfile>class_p4_tools_1_1_symbolic_env.html</anchorfile>
      <anchor>a1c4435e3a1871b15e677ef500eee2038</anchor>
      <arglist>(const IR::Node *)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4Tools::TableUtils::KeyProperties</name>
    <filename>struct_p4_tools_1_1_table_utils_1_1_key_properties.html</filename>
    <member kind="variable">
      <type>size_t</type>
      <name>index</name>
      <anchorfile>struct_p4_tools_1_1_table_utils_1_1_key_properties.html</anchorfile>
      <anchor>a67c4dcbcc81b775c6ad15dd52a9d4c28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isTainted</name>
      <anchorfile>struct_p4_tools_1_1_table_utils_1_1_key_properties.html</anchorfile>
      <anchor>ad27abbd4e7a982b78ebd33d0306401f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IR::KeyElement const  *</type>
      <name>key</name>
      <anchorfile>struct_p4_tools_1_1_table_utils_1_1_key_properties.html</anchorfile>
      <anchor>a86374545db775aada134644b0bfea707</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cstring</type>
      <name>matchType</name>
      <anchorfile>struct_p4_tools_1_1_table_utils_1_1_key_properties.html</anchorfile>
      <anchor>a5c82b9464ac8f7da9746f637417c1692</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cstring</type>
      <name>name</name>
      <anchorfile>struct_p4_tools_1_1_table_utils_1_1_key_properties.html</anchorfile>
      <anchor>ac11f9d900928b81285c2d94155674b42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4Tools::TableUtils::TableProperties</name>
    <filename>struct_p4_tools_1_1_table_utils_1_1_table_properties.html</filename>
    <member kind="variable">
      <type>std::map&lt; cstring, int &gt;</type>
      <name>actionIdMap</name>
      <anchorfile>struct_p4_tools_1_1_table_utils_1_1_table_properties.html</anchorfile>
      <anchor>aaa766e1c4d2e79e7e1a768f1c6357f2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>defaultIsImmutable</name>
      <anchorfile>struct_p4_tools_1_1_table_utils_1_1_table_properties.html</anchorfile>
      <anchor>a27a22de255074b945e829f98c37deb75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; KeyProperties &gt;</type>
      <name>resolvedKeys</name>
      <anchorfile>struct_p4_tools_1_1_table_utils_1_1_table_properties.html</anchorfile>
      <anchor>a255cd40c13f23244ce85746eed84e8f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>tableIsImmutable</name>
      <anchorfile>struct_p4_tools_1_1_table_utils_1_1_table_properties.html</anchorfile>
      <anchor>a5e1fbc63f9bdb2aab546be87041e194b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>tableIsTainted</name>
      <anchorfile>struct_p4_tools_1_1_table_utils_1_1_table_properties.html</anchorfile>
      <anchor>aa87a98c2e9f940a4477840b854dc89ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cstring</type>
      <name>tableName</name>
      <anchorfile>struct_p4_tools_1_1_table_utils_1_1_table_properties.html</anchorfile>
      <anchor>ae5054963a7b4896a2b82378c9bee9ded</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::Taint</name>
    <filename>class_p4_tools_1_1_taint.html</filename>
    <member kind="function" static="yes">
      <type>static const IR::Literal *</type>
      <name>buildTaintMask</name>
      <anchorfile>class_p4_tools_1_1_taint.html</anchorfile>
      <anchor>a8a4d874b1fca8329da7dcb326fcbc387</anchor>
      <arglist>(const Model *evaluatedModel, const IR::Expression *programPacket)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>hasTaint</name>
      <anchorfile>class_p4_tools_1_1_taint.html</anchorfile>
      <anchor>abe7587288bf40be8b416cbfb0344c70e</anchor>
      <arglist>(const IR::Expression *expr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const IR::Expression *</type>
      <name>propagateTaint</name>
      <anchorfile>class_p4_tools_1_1_taint.html</anchorfile>
      <anchor>a794b14aa0b24f18651ca35583e916395</anchor>
      <arglist>(const IR::Expression *expr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::TaintPropagator</name>
    <filename>class_p4_tools_1_1_taint_propagator.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4Tools::Target</name>
    <filename>class_p4_tools_1_1_target.html</filename>
    <class kind="struct">P4Tools::Target::Spec</class>
    <member kind="function" virtualness="virtual">
      <type>virtual const IR::Expression *</type>
      <name>createTargetUninitialized</name>
      <anchorfile>class_p4_tools_1_1_target.html</anchorfile>
      <anchor>a0341f85bd9cd51f1cecb56508cd8fa25</anchor>
      <arglist>(const IR::Type *type, bool forceTaint) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>init</name>
      <anchorfile>class_p4_tools_1_1_target.html</anchorfile>
      <anchor>acf36b53ba6bb00dab4cab1e3c4453698</anchor>
      <arglist>(std::string deviceName, std::string archName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>setArch</name>
      <anchorfile>class_p4_tools_1_1_target.html</anchorfile>
      <anchor>a82eb8982828728eaf47555a63cf7077b</anchor>
      <arglist>(std::string archName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>setDevice</name>
      <anchorfile>class_p4_tools_1_1_target.html</anchorfile>
      <anchor>a6976954f9fcea749516995f7ef6fc154</anchor>
      <arglist>(std::string deviceName)</arglist>
    </member>
    <member kind="variable">
      <type>Spec</type>
      <name>spec</name>
      <anchorfile>class_p4_tools_1_1_target.html</anchorfile>
      <anchor>a83b4ad9210033d18190230b021122209</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>toolName</name>
      <anchorfile>class_p4_tools_1_1_target.html</anchorfile>
      <anchor>ae61d820fd1bc7078f4d6a56828ff6afc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Target</name>
      <anchorfile>class_p4_tools_1_1_target.html</anchorfile>
      <anchor>acc92aa381cfc4443f41322d8fdb99cbe</anchor>
      <arglist>(std::string toolName, std::string deviceName, std::string archName)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const TargetImpl &amp;</type>
      <name>get</name>
      <anchorfile>class_p4_tools_1_1_target.html</anchorfile>
      <anchor>aead181182cb88c34bb133991b0fce899</anchor>
      <arglist>(const std::string &amp;toolName)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4Tools::Target::Spec</name>
    <filename>struct_p4_tools_1_1_target_1_1_spec.html</filename>
    <member kind="function">
      <type></type>
      <name>Spec</name>
      <anchorfile>struct_p4_tools_1_1_target_1_1_spec.html</anchorfile>
      <anchor>ae8a7ab6c4931a005ee1418f4cba7b50b</anchor>
      <arglist>(std::string deviceName, std::string archName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>struct_p4_tools_1_1_target_1_1_spec.html</anchorfile>
      <anchor>a5a5794aa1a189c099a1312f69d9525aa</anchor>
      <arglist>(const Spec &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::TraceEvent</name>
    <filename>class_p4_tools_1_1_trace_event.html</filename>
    <base>ICastable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const TraceEvent *</type>
      <name>apply</name>
      <anchorfile>class_p4_tools_1_1_trace_event.html</anchorfile>
      <anchor>af1deedbb62826b7a32d5073ced5b1ccd</anchor>
      <arglist>(Transform &amp;visitor) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TraceEvent *</type>
      <name>evaluate</name>
      <anchorfile>class_p4_tools_1_1_trace_event.html</anchorfile>
      <anchor>ad73437b5bf0b0f148325cd39c825d038</anchor>
      <arglist>(const Model &amp;model, bool doComplete) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TraceEvent *</type>
      <name>subst</name>
      <anchorfile>class_p4_tools_1_1_trace_event.html</anchorfile>
      <anchor>ab970eafe73d2060c4ce1378b6b7bb56a</anchor>
      <arglist>(const SymbolicEnv &amp;env) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>class_p4_tools_1_1_trace_event.html</anchorfile>
      <anchor>a3a7f4d6fc714a4094fbf48e1e9719d5d</anchor>
      <arglist>(std::ostream &amp;) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::TraceEvents::AssignmentStatement</name>
    <filename>class_p4_tools_1_1_trace_events_1_1_assignment_statement.html</filename>
    <base>P4Tools::TraceEvent</base>
    <member kind="function">
      <type>const AssignmentStatement *</type>
      <name>apply</name>
      <anchorfile>class_p4_tools_1_1_trace_events_1_1_assignment_statement.html</anchorfile>
      <anchor>a9bd2d2deb1e9a724811422e1142e57c9</anchor>
      <arglist>(Transform &amp;visitor) const override</arglist>
    </member>
    <member kind="function">
      <type>const AssignmentStatement *</type>
      <name>evaluate</name>
      <anchorfile>class_p4_tools_1_1_trace_events_1_1_assignment_statement.html</anchorfile>
      <anchor>a619d1eaa2a2f70ff6944abf84a0b436e</anchor>
      <arglist>(const Model &amp;model, bool doComplete) const override</arglist>
    </member>
    <member kind="function">
      <type>const AssignmentStatement *</type>
      <name>subst</name>
      <anchorfile>class_p4_tools_1_1_trace_events_1_1_assignment_statement.html</anchorfile>
      <anchor>a304c55efbfe969c10981cd865460abc5</anchor>
      <arglist>(const SymbolicEnv &amp;env) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>print</name>
      <anchorfile>class_p4_tools_1_1_trace_events_1_1_assignment_statement.html</anchorfile>
      <anchor>a12608f51a3d9447056478d3de2a1a537</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::TraceEvents::Emit</name>
    <filename>class_p4_tools_1_1_trace_events_1_1_emit.html</filename>
    <base>P4Tools::TraceEvent</base>
    <member kind="function">
      <type>const Emit *</type>
      <name>apply</name>
      <anchorfile>class_p4_tools_1_1_trace_events_1_1_emit.html</anchorfile>
      <anchor>a62e5506e66431c6110d3862423184a3e</anchor>
      <arglist>(Transform &amp;visitor) const override</arglist>
    </member>
    <member kind="function">
      <type>const Emit *</type>
      <name>evaluate</name>
      <anchorfile>class_p4_tools_1_1_trace_events_1_1_emit.html</anchorfile>
      <anchor>a68ab2928ea6a9d5ca8cc720857e86d8a</anchor>
      <arglist>(const Model &amp;model, bool doComplete) const override</arglist>
    </member>
    <member kind="function">
      <type>const Emit *</type>
      <name>subst</name>
      <anchorfile>class_p4_tools_1_1_trace_events_1_1_emit.html</anchorfile>
      <anchor>aca297095354d4b54d63f9e3090d81db4</anchor>
      <arglist>(const SymbolicEnv &amp;env) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>print</name>
      <anchorfile>class_p4_tools_1_1_trace_events_1_1_emit.html</anchorfile>
      <anchor>aa9427a9e39f8da1ae60dd6bce5f138da</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::TraceEvents::Expression</name>
    <filename>class_p4_tools_1_1_trace_events_1_1_expression.html</filename>
    <base>P4Tools::TraceEvents::Generic</base>
    <member kind="function">
      <type>const Expression *</type>
      <name>apply</name>
      <anchorfile>class_p4_tools_1_1_trace_events_1_1_expression.html</anchorfile>
      <anchor>a8cbf0eae8a9dfcd969e0b5aa6a8211be</anchor>
      <arglist>(Transform &amp;visitor) const override</arglist>
    </member>
    <member kind="function">
      <type>const Expression *</type>
      <name>evaluate</name>
      <anchorfile>class_p4_tools_1_1_trace_events_1_1_expression.html</anchorfile>
      <anchor>a030f4e9c94f043d2e5cf35cb8f4626ad</anchor>
      <arglist>(const Model &amp;model, bool doComplete) const override</arglist>
    </member>
    <member kind="function">
      <type>const Expression *</type>
      <name>subst</name>
      <anchorfile>class_p4_tools_1_1_trace_events_1_1_expression.html</anchorfile>
      <anchor>af5a3f8aa1f142ece4c1ec9a79ebd0446</anchor>
      <arglist>(const SymbolicEnv &amp;env) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>print</name>
      <anchorfile>class_p4_tools_1_1_trace_events_1_1_expression.html</anchorfile>
      <anchor>aa4b17d6e38125c6d1e08ba79c77c385a</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::TraceEvents::ExtractFailure</name>
    <filename>class_p4_tools_1_1_trace_events_1_1_extract_failure.html</filename>
    <base>P4Tools::TraceEvent</base>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>print</name>
      <anchorfile>class_p4_tools_1_1_trace_events_1_1_extract_failure.html</anchorfile>
      <anchor>a1edc1e05ea612c99fb2b100756f08435</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::TraceEvents::ExtractSuccess</name>
    <filename>class_p4_tools_1_1_trace_events_1_1_extract_success.html</filename>
    <base>P4Tools::TraceEvent</base>
    <member kind="function">
      <type>const ExtractSuccess *</type>
      <name>apply</name>
      <anchorfile>class_p4_tools_1_1_trace_events_1_1_extract_success.html</anchorfile>
      <anchor>a856622a4ca3a4b9548ebf8ec17836539</anchor>
      <arglist>(Transform &amp;visitor) const override</arglist>
    </member>
    <member kind="function">
      <type>const ExtractSuccess *</type>
      <name>evaluate</name>
      <anchorfile>class_p4_tools_1_1_trace_events_1_1_extract_success.html</anchorfile>
      <anchor>ae86c5c0ffbfb534f19e2a6f576d78fa4</anchor>
      <arglist>(const Model &amp;model, bool doComplete) const override</arglist>
    </member>
    <member kind="function">
      <type>const IR::Expression *</type>
      <name>getExtractedHeader</name>
      <anchorfile>class_p4_tools_1_1_trace_events_1_1_extract_success.html</anchorfile>
      <anchor>ae5941faa53e6d60182e235d66308c800</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOffset</name>
      <anchorfile>class_p4_tools_1_1_trace_events_1_1_extract_success.html</anchorfile>
      <anchor>a0a035459668d5da323f5e22a8ed02055</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ExtractSuccess *</type>
      <name>subst</name>
      <anchorfile>class_p4_tools_1_1_trace_events_1_1_extract_success.html</anchorfile>
      <anchor>ad6b7b545cb40302e24fc04190af23989</anchor>
      <arglist>(const SymbolicEnv &amp;env) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>print</name>
      <anchorfile>class_p4_tools_1_1_trace_events_1_1_extract_success.html</anchorfile>
      <anchor>af3e318c4a6d8d2a97c1a53c32f9d6c62</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::TraceEvents::Generic</name>
    <filename>class_p4_tools_1_1_trace_events_1_1_generic.html</filename>
    <base>P4Tools::TraceEvent</base>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>print</name>
      <anchorfile>class_p4_tools_1_1_trace_events_1_1_generic.html</anchorfile>
      <anchor>a94f21e0c2cd2ff4370af6f8e3152f82f</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::TraceEvents::GenericDescription</name>
    <filename>class_p4_tools_1_1_trace_events_1_1_generic_description.html</filename>
    <base>P4Tools::TraceEvents::Generic</base>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>print</name>
      <anchorfile>class_p4_tools_1_1_trace_events_1_1_generic_description.html</anchorfile>
      <anchor>a045e8021b23f567300270c98b29d5d05</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::TraceEvents::IfStatementCondition</name>
    <filename>class_p4_tools_1_1_trace_events_1_1_if_statement_condition.html</filename>
    <base>P4Tools::TraceEvent</base>
    <member kind="function">
      <type>const IfStatementCondition *</type>
      <name>apply</name>
      <anchorfile>class_p4_tools_1_1_trace_events_1_1_if_statement_condition.html</anchorfile>
      <anchor>a636fb0961e8449bd56bd4240b42124a2</anchor>
      <arglist>(Transform &amp;visitor) const override</arglist>
    </member>
    <member kind="function">
      <type>const IfStatementCondition *</type>
      <name>evaluate</name>
      <anchorfile>class_p4_tools_1_1_trace_events_1_1_if_statement_condition.html</anchorfile>
      <anchor>ae618ebc02928f2ecd742f21d98f8e4b1</anchor>
      <arglist>(const Model &amp;model, bool doComplete) const override</arglist>
    </member>
    <member kind="function">
      <type>const IfStatementCondition *</type>
      <name>subst</name>
      <anchorfile>class_p4_tools_1_1_trace_events_1_1_if_statement_condition.html</anchorfile>
      <anchor>ae2cb25fc0751398746e09c3c550f67db</anchor>
      <arglist>(const SymbolicEnv &amp;env) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>print</name>
      <anchorfile>class_p4_tools_1_1_trace_events_1_1_if_statement_condition.html</anchorfile>
      <anchor>aaef5e6be9d20256538a50db10b82b9d5</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::TraceEvents::MethodCall</name>
    <filename>class_p4_tools_1_1_trace_events_1_1_method_call.html</filename>
    <base>P4Tools::TraceEvent</base>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>print</name>
      <anchorfile>class_p4_tools_1_1_trace_events_1_1_method_call.html</anchorfile>
      <anchor>a495e66f8fbdf6313413a1a07bb2fc2ca</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::TraceEvents::Packet</name>
    <filename>class_p4_tools_1_1_trace_events_1_1_packet.html</filename>
    <base>P4Tools::TraceEvent</base>
    <member kind="enumeration">
      <type></type>
      <name>Direction</name>
      <anchorfile>class_p4_tools_1_1_trace_events_1_1_packet.html</anchorfile>
      <anchor>a28b9bf47562132e3c51993dcc140aa80</anchor>
      <arglist></arglist>
      <enumvalue file="class_p4_tools_1_1_trace_events_1_1_packet.html" anchor="a28b9bf47562132e3c51993dcc140aa80aefeb369cccbd560588a756610865664c">In</enumvalue>
      <enumvalue file="class_p4_tools_1_1_trace_events_1_1_packet.html" anchor="a28b9bf47562132e3c51993dcc140aa80a7c147cda9e49590f6abe83d118b7353b">Out</enumvalue>
    </member>
    <member kind="function">
      <type>const Packet *</type>
      <name>apply</name>
      <anchorfile>class_p4_tools_1_1_trace_events_1_1_packet.html</anchorfile>
      <anchor>a42d1a4e6433a4ca74375580c8bd30a14</anchor>
      <arglist>(Transform &amp;visitor) const override</arglist>
    </member>
    <member kind="function">
      <type>const Packet *</type>
      <name>evaluate</name>
      <anchorfile>class_p4_tools_1_1_trace_events_1_1_packet.html</anchorfile>
      <anchor>ae19f88616a646e38ccbaf61e887a45d9</anchor>
      <arglist>(const Model &amp;model, bool doComplete) const override</arglist>
    </member>
    <member kind="function">
      <type>const Packet *</type>
      <name>subst</name>
      <anchorfile>class_p4_tools_1_1_trace_events_1_1_packet.html</anchorfile>
      <anchor>a177a4710009b0283d60aad84c75abed9</anchor>
      <arglist>(const SymbolicEnv &amp;env) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>print</name>
      <anchorfile>class_p4_tools_1_1_trace_events_1_1_packet.html</anchorfile>
      <anchor>a241cdb33ae55ea1b01085bdb0c0e69da</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::TraceEvents::ParserStart</name>
    <filename>class_p4_tools_1_1_trace_events_1_1_parser_start.html</filename>
    <base>P4Tools::TraceEvent</base>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>print</name>
      <anchorfile>class_p4_tools_1_1_trace_events_1_1_parser_start.html</anchorfile>
      <anchor>af14c0fa44564e866eeccf51dda548188</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::TraceEvents::ParserState</name>
    <filename>class_p4_tools_1_1_trace_events_1_1_parser_state.html</filename>
    <base>P4Tools::TraceEvent</base>
    <member kind="function">
      <type>const IR::ParserState *</type>
      <name>getParserState</name>
      <anchorfile>class_p4_tools_1_1_trace_events_1_1_parser_state.html</anchorfile>
      <anchor>a43267c5d88d33aab187d63697634d29e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>print</name>
      <anchorfile>class_p4_tools_1_1_trace_events_1_1_parser_state.html</anchorfile>
      <anchor>ac43c3d6d378ae1c042e6952872676457</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::Utils</name>
    <filename>class_p4_tools_1_1_utils.html</filename>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>containerToString</name>
      <anchorfile>class_p4_tools_1_1_utils.html</anchorfile>
      <anchor>adf2475d7276eb3203a24218f7f6fe0e8</anchor>
      <arglist>(const ContainerType &amp;container)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const IR::MethodCallExpression *</type>
      <name>generateInternalMethodCall</name>
      <anchorfile>class_p4_tools_1_1_utils.html</anchorfile>
      <anchor>ad94757ad814ff21f8c7d8597ac9ab9e6</anchor>
      <arglist>(cstring methodName, const std::vector&lt; const IR::Expression * &gt; &amp;argVector, const IR::Type *returnType=IR::Type_Void::get(), const IR::ParameterList *paramList=new IR::ParameterList())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::optional&lt; uint32_t &gt;</type>
      <name>getCurrentSeed</name>
      <anchorfile>class_p4_tools_1_1_utils.html</anchorfile>
      <anchor>a76bfde0fc1652e1255cfe2e861c8a92b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static big_int</type>
      <name>getRandBigInt</name>
      <anchorfile>class_p4_tools_1_1_utils.html</anchorfile>
      <anchor>ab754d09b17b5f1da7fe2f2ddc42a153e</anchor>
      <arglist>(big_int max)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const IR::Constant *</type>
      <name>getRandConstantForType</name>
      <anchorfile>class_p4_tools_1_1_utils.html</anchorfile>
      <anchor>ad1096122df3a6dc994cfea34a47c0d1c</anchor>
      <arglist>(const IR::Type_Bits *type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const IR::Constant *</type>
      <name>getRandConstantForWidth</name>
      <anchorfile>class_p4_tools_1_1_utils.html</anchorfile>
      <anchor>aa16f28e31e1c5bd5aa504622957722ac</anchor>
      <arglist>(int bitWidth)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint64_t</type>
      <name>getRandInt</name>
      <anchorfile>class_p4_tools_1_1_utils.html</anchorfile>
      <anchor>a554c5034d259c620927c81a7bd5a795d</anchor>
      <arglist>(uint64_t max)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getTimeStamp</name>
      <anchorfile>class_p4_tools_1_1_utils.html</anchorfile>
      <anchor>a667b77e65b15eb5d7cb3b9ad5a684fb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Iter</type>
      <name>pickRandom</name>
      <anchorfile>class_p4_tools_1_1_utils.html</anchorfile>
      <anchor>a23122c4aefb6fc3e0992d31f2435137d</anchor>
      <arglist>(Iter start, Iter end)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shuffle</name>
      <anchorfile>class_p4_tools_1_1_utils.html</anchorfile>
      <anchor>a3c8962647bbba32e0982279641d2c985</anchor>
      <arglist>(T *inp)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::Z3Solver</name>
    <filename>class_p4_tools_1_1_z3_solver.html</filename>
    <base>AbstractSolver</base>
    <member kind="function">
      <type>void</type>
      <name>asrt</name>
      <anchorfile>class_p4_tools_1_1_z3_solver.html</anchorfile>
      <anchor>aadd1138a966a3341092af10c7ba8b8df</anchor>
      <arglist>(const Constraint *assertion)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>asrt</name>
      <anchorfile>class_p4_tools_1_1_z3_solver.html</anchorfile>
      <anchor>af070c70be7eb7abef047128a1310e896</anchor>
      <arglist>(const z3::expr &amp;assert)</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; bool &gt;</type>
      <name>checkSat</name>
      <anchorfile>class_p4_tools_1_1_z3_solver.html</anchorfile>
      <anchor>a09094d1d28a3408141321824ab4e9cea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; bool &gt;</type>
      <name>checkSat</name>
      <anchorfile>class_p4_tools_1_1_z3_solver.html</anchorfile>
      <anchor>aed2cb4ac5763c0a359f3c80b013cb948</anchor>
      <arglist>(const std::vector&lt; const Constraint * &gt; &amp;asserts) override</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; bool &gt;</type>
      <name>checkSat</name>
      <anchorfile>class_p4_tools_1_1_z3_solver.html</anchorfile>
      <anchor>ae94c8eec8139637de9d41d01acb45eeb</anchor>
      <arglist>(const z3::expr_vector &amp;asserts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearMemory</name>
      <anchorfile>class_p4_tools_1_1_z3_solver.html</anchorfile>
      <anchor>a2b5a61f842f7c78c017b779f5d72620e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>comment</name>
      <anchorfile>class_p4_tools_1_1_z3_solver.html</anchorfile>
      <anchor>a6e1ef9497787e07c2b048ecf1524c252</anchor>
      <arglist>(cstring comment) override</arglist>
    </member>
    <member kind="function">
      <type>safe_vector&lt; const Constraint * &gt;</type>
      <name>getAssertions</name>
      <anchorfile>class_p4_tools_1_1_z3_solver.html</anchorfile>
      <anchor>a8bfa7f0b5c8231dba115a35c4fc60967</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SymbolicMapping &amp;</type>
      <name>getSymbolicMapping</name>
      <anchorfile>class_p4_tools_1_1_z3_solver.html</anchorfile>
      <anchor>af188b55d9757cd1d0009b23e6aac5830</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const z3::context &amp;</type>
      <name>getZ3Ctx</name>
      <anchorfile>class_p4_tools_1_1_z3_solver.html</anchorfile>
      <anchor>a658ecbd58127afa1013df70549e31b27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const z3::solver &amp;</type>
      <name>getZ3Solver</name>
      <anchorfile>class_p4_tools_1_1_z3_solver.html</anchorfile>
      <anchor>ad4b2712ee57ae4abc1af280e4455fa58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInIncrementalMode</name>
      <anchorfile>class_p4_tools_1_1_z3_solver.html</anchorfile>
      <anchor>a06ce8502d1d7db6e905b443a86cb6888</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>class_p4_tools_1_1_z3_solver.html</anchorfile>
      <anchor>aba6970917881f1cb48fe46b6be0e2f16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>class_p4_tools_1_1_z3_solver.html</anchorfile>
      <anchor>ab56cc0b62e87a935bbc1bbfb7e2758b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>class_p4_tools_1_1_z3_solver.html</anchorfile>
      <anchor>ac9d82af9ed27f3aa69c390d5e19c197e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seed</name>
      <anchorfile>class_p4_tools_1_1_z3_solver.html</anchorfile>
      <anchor>abf5b9c62f7b10b38e50ded797d0d7ff5</anchor>
      <arglist>(unsigned seed) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeout</name>
      <anchorfile>class_p4_tools_1_1_z3_solver.html</anchorfile>
      <anchor>a6e050a748a5fb2e69b1d7a3925ac007f</anchor>
      <arglist>(unsigned tm) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toJSON</name>
      <anchorfile>class_p4_tools_1_1_z3_solver.html</anchorfile>
      <anchor>a46e899b2459df16919931047fa00fdab</anchor>
      <arglist>(JSONGenerator &amp;) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::Z3SolverAccessor</name>
    <filename>class_p4_tools_1_1_z3_solver_accessor.html</filename>
    <member kind="function">
      <type></type>
      <name>Z3SolverAccessor</name>
      <anchorfile>class_p4_tools_1_1_z3_solver_accessor.html</anchorfile>
      <anchor>aec5ffd4296c1a8ae9ef24ed0ee3897cd</anchor>
      <arglist>(Z3Solver &amp;solver)</arglist>
    </member>
    <member kind="function">
      <type>z3::expr_vector</type>
      <name>getAssertions</name>
      <anchorfile>class_p4_tools_1_1_z3_solver_accessor.html</anchorfile>
      <anchor>a559c4f32f70ec2aaff732a1a4963f66a</anchor>
      <arglist>(std::optional&lt; bool &gt; assertionType=std::nullopt)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; size_t &gt; &amp;</type>
      <name>getCheckpoints</name>
      <anchorfile>class_p4_tools_1_1_z3_solver_accessor.html</anchorfile>
      <anchor>a1b79a3f67da91c469407792562ff8e18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const z3::context &amp;</type>
      <name>getContext</name>
      <anchorfile>class_p4_tools_1_1_z3_solver_accessor.html</anchorfile>
      <anchor>abd76ffc9796429c387e5a90f24d09ff1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>safe_vector&lt; const Constraint * &gt;</type>
      <name>getP4Assertions</name>
      <anchorfile>class_p4_tools_1_1_z3_solver_accessor.html</anchorfile>
      <anchor>a1d396d992f992c5865a352b53d9079ca</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4Tools::Z3Translator</name>
    <filename>class_p4_tools_1_1_z3_translator.html</filename>
    <base virtualness="virtual">Inspector</base>
    <member kind="function">
      <type></type>
      <name>Z3Translator</name>
      <anchorfile>class_p4_tools_1_1_z3_translator.html</anchorfile>
      <anchor>a496d1f0b516f6c7a522a45ec8a1b6803</anchor>
      <arglist>(Z3Solver &amp;solver)</arglist>
    </member>
    <member kind="function">
      <type>z3::expr</type>
      <name>getResult</name>
      <anchorfile>class_p4_tools_1_1_z3_translator.html</anchorfile>
      <anchor>aeb575c60831c548b16c13b0b12b4c766</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>preorder</name>
      <anchorfile>class_p4_tools_1_1_z3_translator.html</anchorfile>
      <anchor>a8f06681c02498805e59159bc1033b183</anchor>
      <arglist>(const IR::Cast *cast) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>preorder</name>
      <anchorfile>class_p4_tools_1_1_z3_translator.html</anchorfile>
      <anchor>afc62077dac2f38923c874bec409b5623</anchor>
      <arglist>(const IR::Constant *constant) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>preorder</name>
      <anchorfile>class_p4_tools_1_1_z3_translator.html</anchorfile>
      <anchor>aa09dafcdcc8a6ba31cdc8e98038ee25a</anchor>
      <arglist>(const IR::Mux *op) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>preorder</name>
      <anchorfile>class_p4_tools_1_1_z3_translator.html</anchorfile>
      <anchor>a1413cfae80b2dad2716c5310811d681c</anchor>
      <arglist>(const IR::Node *node) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>preorder</name>
      <anchorfile>class_p4_tools_1_1_z3_translator.html</anchorfile>
      <anchor>ab3f583b6ba8ef4494019b2f1441349c7</anchor>
      <arglist>(const IR::SymbolicVariable *var) override</arglist>
    </member>
    <member kind="function">
      <type>z3::expr</type>
      <name>translate</name>
      <anchorfile>class_p4_tools_1_1_z3_translator.html</anchorfile>
      <anchor>a26f53ca04e964de1f78c9a5dae832785</anchor>
      <arglist>(const IR::Expression *expression)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4V1::ActionProfile_Model</name>
    <filename>struct_p4_v1_1_1_action_profile___model.html</filename>
    <base>Model::Extern_Model</base>
  </compound>
  <compound kind="struct">
    <name>P4V1::ActionSelector_Model</name>
    <filename>struct_p4_v1_1_1_action_selector___model.html</filename>
    <base>Model::Extern_Model</base>
  </compound>
  <compound kind="class">
    <name>P4V1::AdjustLengths</name>
    <filename>class_p4_v1_1_1_adjust_lengths.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="struct">
    <name>P4V1::Algorithm_Model</name>
    <filename>struct_p4_v1_1_1_algorithm___model.html</filename>
    <base>Model::Enum_Model</base>
  </compound>
  <compound kind="class">
    <name>P4V1::CheckIfMultiEntryPoint</name>
    <filename>class_p4_v1_1_1_check_if_multi_entry_point.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="struct">
    <name>P4V1::Cloner_Model</name>
    <filename>struct_p4_v1_1_1_cloner___model.html</filename>
    <base>Model::Extern_Model</base>
  </compound>
  <compound kind="struct">
    <name>P4V1::CloneType_Model</name>
    <filename>struct_p4_v1_1_1_clone_type___model.html</filename>
    <base>Model::Enum_Model</base>
  </compound>
  <compound kind="class">
    <name>P4V1::ComputeCallGraph</name>
    <filename>class_p4_v1_1_1_compute_call_graph.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4V1::ComputeTableCallGraph</name>
    <filename>class_p4_v1_1_1_compute_table_call_graph.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="struct">
    <name>P4V1::Control_Model</name>
    <filename>struct_p4_v1_1_1_control___model.html</filename>
    <base>Model::Elem</base>
  </compound>
  <compound kind="class">
    <name>P4V1::ConversionContext</name>
    <filename>class_p4_v1_1_1_conversion_context.html</filename>
  </compound>
  <compound kind="class">
    <name>P4V1::Converter</name>
    <filename>class_p4_v1_1_1_converter.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="struct">
    <name>P4V1::Counter_Model</name>
    <filename>struct_p4_v1_1_1_counter___model.html</filename>
    <base>P4V1::CounterOrMeter_Model</base>
  </compound>
  <compound kind="struct">
    <name>P4V1::CounterOrMeter_Model</name>
    <filename>struct_p4_v1_1_1_counter_or_meter___model.html</filename>
    <base>Model::Extern_Model</base>
  </compound>
  <compound kind="struct">
    <name>P4V1::CounterType_Model</name>
    <filename>struct_p4_v1_1_1_counter_type___model.html</filename>
    <base>Model::Enum_Model</base>
  </compound>
  <compound kind="struct">
    <name>P4V1::Deparser_Model</name>
    <filename>struct_p4_v1_1_1_deparser___model.html</filename>
    <base>Model::Elem</base>
  </compound>
  <compound kind="class">
    <name>P4V1::DetectDuplicates</name>
    <filename>class_p4_v1_1_1_detect_duplicates.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="struct">
    <name>P4V1::DigestReceiver_Model</name>
    <filename>struct_p4_v1_1_1_digest_receiver___model.html</filename>
    <base>Model::Elem</base>
  </compound>
  <compound kind="struct">
    <name>P4V1::DirectCounter_Model</name>
    <filename>struct_p4_v1_1_1_direct_counter___model.html</filename>
    <base>P4V1::CounterOrMeter_Model</base>
  </compound>
  <compound kind="struct">
    <name>P4V1::DirectMeter_Model</name>
    <filename>struct_p4_v1_1_1_direct_meter___model.html</filename>
    <base>P4V1::CounterOrMeter_Model</base>
  </compound>
  <compound kind="class">
    <name>P4V1::DiscoverStructure</name>
    <filename>class_p4_v1_1_1_discover_structure.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4V1::ExpressionConverter</name>
    <filename>class_p4_v1_1_1_expression_converter.html</filename>
    <base>Transform</base>
    <member kind="function">
      <type>const IR::Node *</type>
      <name>postorder</name>
      <anchorfile>class_p4_v1_1_1_expression_converter.html</anchorfile>
      <anchor>a3bbf43d155e2816cfdcd9b878692efe7</anchor>
      <arglist>(IR::Equ *equ) override</arglist>
    </member>
    <member kind="function">
      <type>const IR::Node *</type>
      <name>postorder</name>
      <anchorfile>class_p4_v1_1_1_expression_converter.html</anchorfile>
      <anchor>a0c34d5150faf05f14376290ec9af1b11</anchor>
      <arglist>(IR::Neq *neq) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4V1::ExternConverter</name>
    <filename>class_p4_v1_1_1_extern_converter.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addConverter</name>
      <anchorfile>class_p4_v1_1_1_extern_converter.html</anchorfile>
      <anchor>af6e34706a9067a1a7113f7c2362156d3</anchor>
      <arglist>(cstring type, ExternConverter *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P4V1::FindRecirculated</name>
    <filename>class_p4_v1_1_1_find_recirculated.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>P4V1::FixExtracts</name>
    <filename>class_p4_v1_1_1_fix_extracts.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>P4V1::FixMultiEntryPoint</name>
    <filename>class_p4_v1_1_1_fix_multi_entry_point.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>P4V1::getV1ModelVersion</name>
    <filename>class_p4_v1_1_1get_v1_model_version.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="struct">
    <name>P4V1::Hash_Model</name>
    <filename>struct_p4_v1_1_1_hash___model.html</filename>
    <base>Model::Elem</base>
  </compound>
  <compound kind="class">
    <name>P4V1::InsertCompilerGeneratedStartState</name>
    <filename>class_p4_v1_1_1_insert_compiler_generated_start_state.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="struct">
    <name>P4V1::Meter_Model</name>
    <filename>struct_p4_v1_1_1_meter___model.html</filename>
    <base>P4V1::CounterOrMeter_Model</base>
  </compound>
  <compound kind="struct">
    <name>P4V1::MeterType_Model</name>
    <filename>struct_p4_v1_1_1_meter_type___model.html</filename>
    <base>Model::Enum_Model</base>
  </compound>
  <compound kind="class">
    <name>P4V1::MoveIntrinsicMetadata</name>
    <filename>class_p4_v1_1_1_move_intrinsic_metadata.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="struct">
    <name>P4V1::Parser_Model</name>
    <filename>struct_p4_v1_1_1_parser___model.html</filename>
    <base>Model::Elem</base>
  </compound>
  <compound kind="class">
    <name>P4V1::PrimitiveConverter</name>
    <filename>class_p4_v1_1_1_primitive_converter.html</filename>
  </compound>
  <compound kind="class">
    <name>P4V1::ProgramStructure</name>
    <filename>class_p4_v1_1_1_program_structure.html</filename>
    <member kind="variable">
      <type>ordered_set&lt; const IR::FieldList * &gt;</type>
      <name>allFieldLists</name>
      <anchorfile>class_p4_v1_1_1_program_structure.html</anchorfile>
      <anchor>a71fcb781d0b031309f065937e2bb1013</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; cstring, const IR::Meter * &gt;</type>
      <name>directMeters</name>
      <anchorfile>class_p4_v1_1_1_program_structure.html</anchorfile>
      <anchor>a513f0532f2d92cd061fc129c574efc64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; const IR::MethodCallExpression *, const IR::Type_Header * &gt;</type>
      <name>extractsSynthesized</name>
      <anchorfile>class_p4_v1_1_1_program_structure.html</anchorfile>
      <anchor>a48c3ea89638690d8da1ebde7bccadec9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cstring</type>
      <name>fieldListsEnum</name>
      <anchorfile>class_p4_v1_1_1_program_structure.html</anchorfile>
      <anchor>adc38c81ac325681498286db203d59e15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; cstring, const IR::Type * &gt;</type>
      <name>finalHeaderType</name>
      <anchorfile>class_p4_v1_1_1_program_structure.html</anchorfile>
      <anchor>a9e8ea7b6fc2a22f93a82004c2dee7904</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; const IR::Declaration * &gt;</type>
      <name>localInstances</name>
      <anchorfile>class_p4_v1_1_1_program_structure.html</anchorfile>
      <anchor>ac5591a14a8d99acf72d246f787a9a0cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; cstring, cstring &gt;</type>
      <name>registerLayoutType</name>
      <anchorfile>class_p4_v1_1_1_program_structure.html</anchorfile>
      <anchor>acb4e551665df61d282c41622fd6e1b97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IR::Expression *</type>
      <name>latest</name>
      <anchorfile>class_p4_v1_1_1_program_structure.html</anchorfile>
      <anchor>adc5cd3a8f849bff37d7710032fee0c1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>populateOutputNames</name>
      <anchorfile>class_p4_v1_1_1_program_structure.html</anchorfile>
      <anchor>a067697b9825b064d60f3d4237e3f994d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IR::Vector&lt; IR::Expression &gt; *</type>
      <name>listIndexes</name>
      <anchorfile>class_p4_v1_1_1_program_structure.html</anchorfile>
      <anchor>a556a55e89ae4b5222e593c6f4db9fd5e</anchor>
      <arglist>(cstring type, cstring field) const</arglist>
    </member>
    <member kind="function">
      <type>const IR::Expression *</type>
      <name>listIndex</name>
      <anchorfile>class_p4_v1_1_1_program_structure.html</anchorfile>
      <anchor>aaadc18fe8b37cd6d3c5e15eccaabca93</anchor>
      <arglist>(const IR::Expression *fl) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const IR::ParserState *</type>
      <name>convertParser</name>
      <anchorfile>class_p4_v1_1_1_program_structure.html</anchorfile>
      <anchor>a77e98933bd34e2bf99f597a8a4601406</anchor>
      <arglist>(const IR::V1Parser *, IR::IndexedVector&lt; IR::Declaration &gt; *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>createControls</name>
      <anchorfile>class_p4_v1_1_1_program_structure.html</anchorfile>
      <anchor>a2e2741038f04496379bcbd69474f05fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const IR::Annotations *</type>
      <name>addGlobalNameAnnotation</name>
      <anchorfile>class_p4_v1_1_1_program_structure.html</anchorfile>
      <anchor>a74825b4c88619df9971e33f300a15dff</anchor>
      <arglist>(cstring name, const IR::Annotations *annos=nullptr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P4V1::Random_Model</name>
    <filename>struct_p4_v1_1_1_random___model.html</filename>
    <base>Model::Elem</base>
  </compound>
  <compound kind="struct">
    <name>P4V1::Register_Model</name>
    <filename>struct_p4_v1_1_1_register___model.html</filename>
    <base>Model::Extern_Model</base>
  </compound>
  <compound kind="class">
    <name>P4V1::Rewriter</name>
    <filename>class_p4_v1_1_1_rewriter.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="struct">
    <name>P4V1::StandardMetadataType_Model</name>
    <filename>struct_p4_v1_1_1_standard_metadata_type___model.html</filename>
    <base>Model::Type_Model</base>
  </compound>
  <compound kind="class">
    <name>P4V1::StatementConverter</name>
    <filename>class_p4_v1_1_1_statement_converter.html</filename>
    <base>P4V1::ExpressionConverter</base>
  </compound>
  <compound kind="struct">
    <name>P4V1::Switch_Model</name>
    <filename>struct_p4_v1_1_1_switch___model.html</filename>
    <base>Model::Elem</base>
  </compound>
  <compound kind="struct">
    <name>P4V1::TableAttributes_Model</name>
    <filename>struct_p4_v1_1_1_table_attributes___model.html</filename>
  </compound>
  <compound kind="class">
    <name>P4V1::Truncate</name>
    <filename>class_p4_v1_1_1_truncate.html</filename>
    <base>Model::Extern_Model</base>
  </compound>
  <compound kind="class">
    <name>P4V1::TypeConverter</name>
    <filename>class_p4_v1_1_1_type_converter.html</filename>
    <base>P4V1::ExpressionConverter</base>
  </compound>
  <compound kind="class">
    <name>P4V1::V1Model</name>
    <filename>class_p4_v1_1_1_v1_model.html</filename>
    <base>Model::Model</base>
  </compound>
  <compound kind="struct">
    <name>P4V1::VerifyUpdate_Model</name>
    <filename>struct_p4_v1_1_1_verify_update___model.html</filename>
    <base>Model::Elem</base>
  </compound>
  <compound kind="class">
    <name>P4WriteContext</name>
    <filename>class_p4_write_context.html</filename>
    <base virtualness="virtual">Visitor</base>
  </compound>
  <compound kind="class">
    <name>ParseDpdkArchitecture</name>
    <filename>class_parse_dpdk_architecture.html</filename>
    <base>Inspector</base>
    <member kind="function">
      <type>bool</type>
      <name>preorder</name>
      <anchorfile>class_parse_dpdk_architecture.html</anchorfile>
      <anchor>a4c093d0a1a6e190a7102850f240860c7</anchor>
      <arglist>(const IR::ToplevelBlock *block) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ParserErrorMessage</name>
    <filename>struct_parser_error_message.html</filename>
  </compound>
  <compound kind="class">
    <name>ParserOptions</name>
    <filename>class_parser_options.html</filename>
    <base>Util::Options</base>
    <member kind="function">
      <type>std::vector&lt; const char * &gt; *</type>
      <name>process</name>
      <anchorfile>class_parser_options.html</anchorfile>
      <anchor>a87e223a04ea129ac64efba80bc915d86</anchor>
      <arglist>(int argc, char *const argv[]) override</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>noIncludes</name>
      <anchorfile>class_parser_options.html</anchorfile>
      <anchor>abf8b80cc192c57522bda89e9c9cab27a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PassIf</name>
    <filename>class_pass_if.html</filename>
    <base virtualness="virtual">PassManager</base>
  </compound>
  <compound kind="class">
    <name>PassManager</name>
    <filename>class_pass_manager.html</filename>
    <base virtualness="virtual">Visitor</base>
    <base virtualness="virtual">Backtrack</base>
    <class kind="class">PassManager::VisitorRef</class>
  </compound>
  <compound kind="class">
    <name>PassManager::VisitorRef</name>
    <filename>class_pass_manager_1_1_visitor_ref.html</filename>
  </compound>
  <compound kind="class">
    <name>PassRepeated</name>
    <filename>class_pass_repeated.html</filename>
    <base virtualness="virtual">PassManager</base>
  </compound>
  <compound kind="class">
    <name>PassRepeatUntil</name>
    <filename>class_pass_repeat_until.html</filename>
    <base virtualness="virtual">PassManager</base>
  </compound>
  <compound kind="class">
    <name>Pattern</name>
    <filename>class_pattern.html</filename>
    <class kind="class">Pattern::Match</class>
  </compound>
  <compound kind="class">
    <name>Pattern::Match</name>
    <filename>class_pattern_1_1_match.html</filename>
    <templarg>class T</templarg>
  </compound>
  <compound kind="class">
    <name>PauseTrace</name>
    <filename>class_pause_trace.html</filename>
  </compound>
  <compound kind="struct">
    <name>pcap_pkt</name>
    <filename>structpcap__pkt.html</filename>
  </compound>
  <compound kind="struct">
    <name>pna_global_metadata</name>
    <filename>structpna__global__metadata.html</filename>
  </compound>
  <compound kind="struct">
    <name>pna_main_input_metadata_t</name>
    <filename>structpna__main__input__metadata__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>pna_main_output_metadata_t</name>
    <filename>structpna__main__output__metadata__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>pna_main_parser_input_metadata_t</name>
    <filename>structpna__main__parser__input__metadata__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>primitive_info_t</name>
    <filename>structprimitive__info__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>psa_egress_deparser_input_metadata_t</name>
    <filename>structpsa__egress__deparser__input__metadata__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>psa_egress_input_metadata_t</name>
    <filename>structpsa__egress__input__metadata__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>psa_egress_output_metadata_t</name>
    <filename>structpsa__egress__output__metadata__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>psa_egress_parser_input_metadata_t</name>
    <filename>structpsa__egress__parser__input__metadata__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>psa_global_metadata</name>
    <filename>structpsa__global__metadata.html</filename>
    <member kind="variable">
      <type>EgressInstance_t</type>
      <name>instance</name>
      <anchorfile>structpsa__global__metadata.html</anchorfile>
      <anchor>a64efa6fe96226d3752d6db40753fe0fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>__u8</type>
      <name>mark</name>
      <anchorfile>structpsa__global__metadata.html</anchorfile>
      <anchor>ac4aa537ad25272434a4c824304c268e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>pass_to_kernel</name>
      <anchorfile>structpsa__global__metadata.html</anchorfile>
      <anchor>a52e8fd7fb183e53febf38029379b0e10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>psa_ingress_input_metadata_t</name>
    <filename>structpsa__ingress__input__metadata__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>psa_ingress_output_metadata_t</name>
    <filename>structpsa__ingress__output__metadata__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>psa_ingress_parser_input_metadata_t</name>
    <filename>structpsa__ingress__parser__input__metadata__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>PushContext</name>
    <filename>struct_push_context.html</filename>
  </compound>
  <compound kind="class">
    <name>RangeIter</name>
    <filename>class_range_iter.html</filename>
    <templarg>class T</templarg>
  </compound>
  <compound kind="struct">
    <name>RTTI::Base</name>
    <filename>struct_r_t_t_i_1_1_base.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>is</name>
      <anchorfile>struct_r_t_t_i_1_1_base.html</anchorfile>
      <anchor>ad54f648738287d21b2b1aafa2bc63f8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isA</name>
      <anchorfile>struct_r_t_t_i_1_1_base.html</anchorfile>
      <anchor>a0ec65d7575c8913d0c3fcf542a1c9f22</anchor>
      <arglist>(TypeId typeId) const noexcept=0</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>to</name>
      <anchorfile>struct_r_t_t_i_1_1_base.html</anchorfile>
      <anchor>ab35786f9cf561dd2329b86200fdc3aa7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>to</name>
      <anchorfile>struct_r_t_t_i_1_1_base.html</anchorfile>
      <anchor>a60ec2358ab44340b7fa2a17f1b2f3a59</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TypeId</type>
      <name>typeId</name>
      <anchorfile>struct_r_t_t_i_1_1_base.html</anchorfile>
      <anchor>aa3eedc64ebb92c6f17f94d8589d672d2</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RTTI::detail::TypeIdResolver</name>
    <filename>struct_r_t_t_i_1_1detail_1_1_type_id_resolver.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename</templarg>
  </compound>
  <compound kind="struct">
    <name>RTTI::detail::TypeIdResolver&lt; T, std::void_t&lt; decltype(T::static_typeId)&gt; &gt;</name>
    <filename>struct_r_t_t_i_1_1detail_1_1_type_id_resolver_3_01_t_00_01std_1_1void__t_3_01decltype_07_t_1_1static__type_id_08_4_01_4.html</filename>
    <templarg>typename T</templarg>
  </compound>
  <compound kind="struct">
    <name>RTTI::detail::TypeNameHolder</name>
    <filename>struct_r_t_t_i_1_1detail_1_1_type_name_holder.html</filename>
  </compound>
  <compound kind="struct">
    <name>RTTI::TypeInfo</name>
    <filename>struct_r_t_t_i_1_1_type_info.html</filename>
    <templarg>typename This</templarg>
    <templarg>typename... Parents</templarg>
  </compound>
  <compound kind="class">
    <name>safe_vector</name>
    <filename>classsafe__vector.html</filename>
    <templarg>class T</templarg>
    <templarg>class Alloc</templarg>
  </compound>
  <compound kind="struct">
    <name>sk_buff</name>
    <filename>structsk__buff.html</filename>
  </compound>
  <compound kind="class">
    <name>SplitFlowVisit</name>
    <filename>class_split_flow_visit.html</filename>
    <templarg>class N</templarg>
    <base>SplitFlowVisit_base</base>
  </compound>
  <compound kind="class">
    <name>SplitFlowVisit_base</name>
    <filename>class_split_flow_visit__base.html</filename>
  </compound>
  <compound kind="class">
    <name>SplitFlowVisitVector</name>
    <filename>class_split_flow_visit_vector.html</filename>
    <templarg>class N</templarg>
    <base>SplitFlowVisit_base</base>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; ClosedRange&lt; Unit, Order &gt; &gt;</name>
    <filename>structstd_1_1hash_3_01_closed_range_3_01_unit_00_01_order_01_4_01_4.html</filename>
    <templarg>RangeUnit Unit</templarg>
    <templarg>Endian Order</templarg>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; cstring &gt;</name>
    <filename>structstd_1_1hash_3_01cstring_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; HalfOpenRange&lt; Unit, Order &gt; &gt;</name>
    <filename>structstd_1_1hash_3_01_half_open_range_3_01_unit_00_01_order_01_4_01_4.html</filename>
    <templarg>RangeUnit Unit</templarg>
    <templarg>Endian Order</templarg>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; P4::ProgramPoint &gt;</name>
    <filename>structstd_1_1hash_3_01_p4_1_1_program_point_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; std::pair&lt; T1, T2 &gt; &gt;</name>
    <filename>structstd_1_1hash_3_01std_1_1pair_3_01_t1_00_01_t2_01_4_01_4.html</filename>
    <templarg>typename T1</templarg>
    <templarg>typename T2</templarg>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; std::tuple&lt; Types... &gt; &gt;</name>
    <filename>structstd_1_1hash_3_01std_1_1tuple_3_01_types_8_8_8_01_4_01_4.html</filename>
    <templarg>typename... Types</templarg>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; table_entry &gt;</name>
    <filename>structstd_1_1hash_3_01table__entry_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>StringRef</name>
    <filename>struct_string_ref.html</filename>
    <class kind="class">StringRef::Split</class>
  </compound>
  <compound kind="class">
    <name>StringRef::Split</name>
    <filename>class_string_ref_1_1_split.html</filename>
  </compound>
  <compound kind="class">
    <name>SymBitMatrix</name>
    <filename>class_sym_bit_matrix.html</filename>
    <base protection="private">bitvec</base>
  </compound>
  <compound kind="struct">
    <name>SymbolicVarComp</name>
    <filename>struct_symbolic_var_comp.html</filename>
  </compound>
  <compound kind="struct">
    <name>TC::ActionAttributes</name>
    <filename>struct_t_c_1_1_action_attributes.html</filename>
  </compound>
  <compound kind="struct">
    <name>TC::ActionParam</name>
    <filename>struct_t_c_1_1_action_param.html</filename>
  </compound>
  <compound kind="class">
    <name>TC::ActionTranslationVisitorPNA</name>
    <filename>class_t_c_1_1_action_translation_visitor_p_n_a.html</filename>
    <base>EBPF::ActionTranslationVisitor</base>
    <base>TC::ControlBodyTranslatorPNA</base>
  </compound>
  <compound kind="struct">
    <name>TC::Annotation</name>
    <filename>struct_t_c_1_1_annotation.html</filename>
  </compound>
  <compound kind="class">
    <name>TC::Backend</name>
    <filename>class_t_c_1_1_backend.html</filename>
    <base>PassManager</base>
  </compound>
  <compound kind="class">
    <name>TC::ControlBodyTranslatorPNA</name>
    <filename>class_t_c_1_1_control_body_translator_p_n_a.html</filename>
    <base>EBPF::ControlBodyTranslator</base>
  </compound>
  <compound kind="class">
    <name>TC::ConvertToBackendIR</name>
    <filename>class_t_c_1_1_convert_to_backend_i_r.html</filename>
    <base>Inspector</base>
    <member kind="function">
      <type>bool</type>
      <name>isPnaParserMeta</name>
      <anchorfile>class_t_c_1_1_convert_to_backend_i_r.html</anchorfile>
      <anchor>ae89dd6d9cfd617c8065de7c7683afd8c</anchor>
      <arglist>(const IR::Member *mem)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TC::ConvertToEBPFControlPNA</name>
    <filename>class_t_c_1_1_convert_to_e_b_p_f_control_p_n_a.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>TC::ConvertToEBPFDeparserPNA</name>
    <filename>class_t_c_1_1_convert_to_e_b_p_f_deparser_p_n_a.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>TC::ConvertToEBPFParserPNA</name>
    <filename>class_t_c_1_1_convert_to_e_b_p_f_parser_p_n_a.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>TC::ConvertToEbpfPipelineTC</name>
    <filename>class_t_c_1_1_convert_to_ebpf_pipeline_t_c.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>TC::ConvertToEbpfPNA</name>
    <filename>class_t_c_1_1_convert_to_ebpf_p_n_a.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>TC::CRC16ChecksumAlgorithmPNA</name>
    <filename>class_t_c_1_1_c_r_c16_checksum_algorithm_p_n_a.html</filename>
    <base>TC::CRCChecksumAlgorithmPNA</base>
  </compound>
  <compound kind="class">
    <name>TC::CRC32ChecksumAlgorithmPNA</name>
    <filename>class_t_c_1_1_c_r_c32_checksum_algorithm_p_n_a.html</filename>
    <base>TC::CRCChecksumAlgorithmPNA</base>
  </compound>
  <compound kind="class">
    <name>TC::CRCChecksumAlgorithmPNA</name>
    <filename>class_t_c_1_1_c_r_c_checksum_algorithm_p_n_a.html</filename>
    <base>EBPF::CRCChecksumAlgorithm</base>
  </compound>
  <compound kind="class">
    <name>TC::DeparserHdrEmitTranslatorPNA</name>
    <filename>class_t_c_1_1_deparser_hdr_emit_translator_p_n_a.html</filename>
    <base>EBPF::DeparserPrepareBufferTranslator</base>
  </compound>
  <compound kind="class">
    <name>TC::EBPFHashAlgorithmTypeFactoryPNA</name>
    <filename>class_t_c_1_1_e_b_p_f_hash_algorithm_type_factory_p_n_a.html</filename>
    <base>EBPF::EBPFHashAlgorithmTypeFactoryPSA</base>
  </compound>
  <compound kind="class">
    <name>TC::EBPFPnaParser</name>
    <filename>class_t_c_1_1_e_b_p_f_pna_parser.html</filename>
    <base>EBPF::EBPFPsaParser</base>
  </compound>
  <compound kind="class">
    <name>TC::EBPFTablePNA</name>
    <filename>class_t_c_1_1_e_b_p_f_table_p_n_a.html</filename>
    <base>EBPF::EBPFTablePSA</base>
  </compound>
  <compound kind="class">
    <name>TC::Extern</name>
    <filename>class_t_c_1_1_extern.html</filename>
  </compound>
  <compound kind="class">
    <name>TC::IngressDeparserPNA</name>
    <filename>class_t_c_1_1_ingress_deparser_p_n_a.html</filename>
    <base>EBPF::EBPFDeparserPSA</base>
  </compound>
  <compound kind="class">
    <name>TC::InspectPnaProgram</name>
    <filename>class_t_c_1_1_inspect_pna_program.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>TC::IntrospectionGenerator</name>
    <filename>class_t_c_1_1_introspection_generator.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="struct">
    <name>TC::IntrospectionInfo</name>
    <filename>struct_t_c_1_1_introspection_info.html</filename>
  </compound>
  <compound kind="struct">
    <name>TC::KeyFieldAttributes</name>
    <filename>struct_t_c_1_1_key_field_attributes.html</filename>
  </compound>
  <compound kind="class">
    <name>TC::MidEnd</name>
    <filename>class_t_c_1_1_mid_end.html</filename>
  </compound>
  <compound kind="class">
    <name>TC::ParsePnaArchitecture</name>
    <filename>class_t_c_1_1_parse_pna_architecture.html</filename>
    <base>Inspector</base>
    <member kind="function">
      <type>bool</type>
      <name>preorder</name>
      <anchorfile>class_t_c_1_1_parse_pna_architecture.html</anchorfile>
      <anchor>a83a069dea55f31978192083d702df0f2</anchor>
      <arglist>(const IR::ToplevelBlock *block) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TC::ParseTCAnnotations</name>
    <filename>class_t_c_1_1_parse_t_c_annotations.html</filename>
    <base>P4::ParseAnnotations</base>
  </compound>
  <compound kind="class">
    <name>TC::PNAArchTC</name>
    <filename>class_t_c_1_1_p_n_a_arch_t_c.html</filename>
    <base>TC::PNAEbpfGenerator</base>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>class_t_c_1_1_p_n_a_arch_t_c.html</anchorfile>
      <anchor>afdd07a398c1e47627559af7374f23972</anchor>
      <arglist>(EBPF::CodeBuilder *builder) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emitParser</name>
      <anchorfile>class_t_c_1_1_p_n_a_arch_t_c.html</anchorfile>
      <anchor>a78655db07581304e3491cf83bf560b58</anchor>
      <arglist>(EBPF::CodeBuilder *builder) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TC::PNAEbpfGenerator</name>
    <filename>class_t_c_1_1_p_n_a_ebpf_generator.html</filename>
    <base>EBPF::EbpfCodeGenerator</base>
  </compound>
  <compound kind="class">
    <name>TC::PNAErrorCodesGen</name>
    <filename>class_t_c_1_1_p_n_a_error_codes_gen.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>TC::PnaProgramStructure</name>
    <filename>class_t_c_1_1_pna_program_structure.html</filename>
    <base>BMV2::ProgramStructure</base>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isCounterMetadata</name>
      <anchorfile>class_t_c_1_1_pna_program_structure.html</anchorfile>
      <anchor>ac4be982e096892fbde556cb593b3ae55</anchor>
      <arglist>(cstring ptName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isStandardMetadata</name>
      <anchorfile>class_t_c_1_1_pna_program_structure.html</anchorfile>
      <anchor>a95c8b6d34243f148ad761e76daf47b96</anchor>
      <arglist>(cstring ptName)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TC::PnaStateTranslationVisitor</name>
    <filename>class_t_c_1_1_pna_state_translation_visitor.html</filename>
    <base>EBPF::PsaStateTranslationVisitor</base>
  </compound>
  <compound kind="struct">
    <name>TC::TableAttributes</name>
    <filename>struct_t_c_1_1_table_attributes.html</filename>
  </compound>
  <compound kind="class">
    <name>TC::TCIngressPipelinePNA</name>
    <filename>class_t_c_1_1_t_c_ingress_pipeline_p_n_a.html</filename>
    <base>EBPF::TCIngressPipeline</base>
  </compound>
  <compound kind="class">
    <name>TC::TCOptions</name>
    <filename>class_t_c_1_1_t_c_options.html</filename>
    <base>CompilerOptions</base>
  </compound>
  <compound kind="class">
    <name>Test::ArithmTest::SaturationTransform</name>
    <filename>class_test_1_1_arithm_test_1_1_saturation_transform.html</filename>
    <base>Transform</base>
    <member kind="function">
      <type>const IR::Node *</type>
      <name>postorder</name>
      <anchorfile>class_test_1_1_arithm_test_1_1_saturation_transform.html</anchorfile>
      <anchor>a80cc2cf838f3f83cc8b5a6667f47fc90</anchor>
      <arglist>(IR::AddSat *add) override</arglist>
    </member>
    <member kind="function">
      <type>const IR::Node *</type>
      <name>postorder</name>
      <anchorfile>class_test_1_1_arithm_test_1_1_saturation_transform.html</anchorfile>
      <anchor>a9f32c3df1608514966770ea240ace172</anchor>
      <arglist>(IR::SubSat *sub) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Test::ArithmTest::Z3SolverAddSat01</name>
    <filename>class_test_1_1_arithm_test_1_1_z3_solver_add_sat01.html</filename>
    <base>Test::Z3SolverSatTests</base>
  </compound>
  <compound kind="class">
    <name>Test::ArithmTest::Z3SolverAddSat02</name>
    <filename>class_test_1_1_arithm_test_1_1_z3_solver_add_sat02.html</filename>
    <base>Test::Z3SolverSatTests</base>
  </compound>
  <compound kind="class">
    <name>Test::ArithmTest::Z3SolverAddSat03</name>
    <filename>class_test_1_1_arithm_test_1_1_z3_solver_add_sat03.html</filename>
    <base>Test::Z3SolverSatTests</base>
  </compound>
  <compound kind="class">
    <name>Test::ArithmTest::Z3SolverAddSat04</name>
    <filename>class_test_1_1_arithm_test_1_1_z3_solver_add_sat04.html</filename>
    <base>Test::Z3SolverSatTests</base>
  </compound>
  <compound kind="class">
    <name>Test::ArithmTest::Z3SolverAddSat05</name>
    <filename>class_test_1_1_arithm_test_1_1_z3_solver_add_sat05.html</filename>
    <base>Test::Z3SolverSatTests</base>
  </compound>
  <compound kind="class">
    <name>Test::ArithmTest::Z3SolverSubSat01</name>
    <filename>class_test_1_1_arithm_test_1_1_z3_solver_sub_sat01.html</filename>
    <base>Test::Z3SolverSatTests</base>
  </compound>
  <compound kind="class">
    <name>Test::ArithmTest::Z3SolverSubSat02</name>
    <filename>class_test_1_1_arithm_test_1_1_z3_solver_sub_sat02.html</filename>
    <base>Test::Z3SolverSatTests</base>
  </compound>
  <compound kind="class">
    <name>Test::ArithmTest::Z3SolverSubSat03</name>
    <filename>class_test_1_1_arithm_test_1_1_z3_solver_sub_sat03.html</filename>
    <base>Test::Z3SolverSatTests</base>
  </compound>
  <compound kind="class">
    <name>Test::ArithmTest::Z3SolverSubSat04</name>
    <filename>class_test_1_1_arithm_test_1_1_z3_solver_sub_sat04.html</filename>
    <base>Test::Z3SolverSatTests</base>
  </compound>
  <compound kind="class">
    <name>Test::ArithmTest::Z3SolverSubSat05</name>
    <filename>class_test_1_1_arithm_test_1_1_z3_solver_sub_sat05.html</filename>
    <base>Test::Z3SolverSatTests</base>
  </compound>
  <compound kind="class">
    <name>Test::FormatTest</name>
    <filename>class_test_1_1_format_test.html</filename>
    <base>Test::P4ToolsTest</base>
  </compound>
  <compound kind="class">
    <name>Test::NodeFinder</name>
    <filename>class_test_1_1_node_finder.html</filename>
    <templarg>class T</templarg>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>Test::P4AssertsParserTest</name>
    <filename>class_test_1_1_p4_asserts_parser_test.html</filename>
    <base>Test::P4ToolsTest</base>
  </compound>
  <compound kind="class">
    <name>Test::P4CReachability</name>
    <filename>class_test_1_1_p4_c_reachability.html</filename>
  </compound>
  <compound kind="class">
    <name>Test::P4ReachabilityOptions</name>
    <filename>class_test_1_1_p4_reachability_options.html</filename>
    <base>CompilerOptions</base>
  </compound>
  <compound kind="class">
    <name>Test::P4RuntimeApiTest</name>
    <filename>class_test_1_1_p4_runtime_api_test.html</filename>
    <base>Test::P4ToolsTest</base>
  </compound>
  <compound kind="class">
    <name>Test::P4TestOptions</name>
    <filename>class_test_1_1_p4_test_options.html</filename>
    <base>CompilerOptions</base>
  </compound>
  <compound kind="class">
    <name>Test::P4ToolsTest</name>
    <filename>class_test_1_1_p4_tools_test.html</filename>
  </compound>
  <compound kind="class">
    <name>Test::P4ToolsTestCase</name>
    <filename>class_test_1_1_p4_tools_test_case.html</filename>
    <member kind="function">
      <type>const P4Tools::CompilerResult &amp;</type>
      <name>getCompilerResult</name>
      <anchorfile>class_test_1_1_p4_tools_test_case.html</anchorfile>
      <anchor>a5101dbc63e15bc679f9b5a8757a23ff0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IR::P4Program &amp;</type>
      <name>getProgram</name>
      <anchorfile>class_test_1_1_p4_tools_test_case.html</anchorfile>
      <anchor>a742df489ae6369bd497d9cb0723eebe9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::optional&lt; const P4ToolsTestCase &gt;</type>
      <name>create</name>
      <anchorfile>class_test_1_1_p4_tools_test_case.html</anchorfile>
      <anchor>a420d1df8d9a4abccdc598f3411fff309</anchor>
      <arglist>(std::string deviceName, std::string archName, CompilerOptions::FrontendVersion langVersion, const std::string &amp;source)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::optional&lt; const P4ToolsTestCase &gt;</type>
      <name>create_14</name>
      <anchorfile>class_test_1_1_p4_tools_test_case.html</anchorfile>
      <anchor>ac343b8c3f131bf0575bc283bc7d3a2d5</anchor>
      <arglist>(std::string deviceName, std::string archName, const std::string &amp;source)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::optional&lt; const P4ToolsTestCase &gt;</type>
      <name>create_16</name>
      <anchorfile>class_test_1_1_p4_tools_test_case.html</anchorfile>
      <anchor>a21d9c7cb308a1412da87e5f6687166bd</anchor>
      <arglist>(std::string deviceName, std::string archName, const std::string &amp;source)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Test::PTFTest</name>
    <filename>class_test_1_1_p_t_f_test.html</filename>
    <base>Test::P4ToolsTest</base>
  </compound>
  <compound kind="class">
    <name>Test::SmallStepTest</name>
    <filename>class_test_1_1_small_step_test.html</filename>
    <base>Test::P4ToolsTest</base>
    <member kind="function" static="yes">
      <type>static ExecutionState</type>
      <name>mkState</name>
      <anchorfile>class_test_1_1_small_step_test.html</anchorfile>
      <anchor>a568aaff89a4fbb30c3ea3840dcd25ba0</anchor>
      <arglist>(Body body)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Test::STFTest</name>
    <filename>class_test_1_1_s_t_f_test.html</filename>
    <base>Test::P4ToolsTest</base>
  </compound>
  <compound kind="class">
    <name>Test::SymbolicConverter</name>
    <filename>class_test_1_1_symbolic_converter.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>Test::TaintTest</name>
    <filename>class_test_1_1_taint_test.html</filename>
    <base>Test::P4ToolsTest</base>
  </compound>
  <compound kind="class">
    <name>Test::Z3SolverSatisfiabilityChecks</name>
    <filename>class_test_1_1_z3_solver_satisfiability_checks.html</filename>
    <member kind="function">
      <type>void</type>
      <name>testCheckSat</name>
      <anchorfile>class_test_1_1_z3_solver_satisfiability_checks.html</anchorfile>
      <anchor>a233792c5f7d959ac110ca67216a37382</anchor>
      <arglist>(const ConstraintVector &amp;expression, std::optional&lt; bool &gt; expectedResult)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Test::Z3SolverSatTests</name>
    <filename>class_test_1_1_z3_solver_sat_tests.html</filename>
  </compound>
  <compound kind="class">
    <name>Test::Z3SolverTest</name>
    <filename>class_test_1_1_z3_solver_test.html</filename>
    <base>Test::P4ToolsTest</base>
  </compound>
  <compound kind="class">
    <name>Test::Z3SolverTests</name>
    <filename>class_test_1_1_z3_solver_tests.html</filename>
  </compound>
  <compound kind="class">
    <name>Test::Z3Test::Z3SolverAdd</name>
    <filename>class_test_1_1_z3_test_1_1_z3_solver_add.html</filename>
    <base>Test::Z3SolverTests</base>
  </compound>
  <compound kind="class">
    <name>Test::Z3Test::Z3SolverBAnd</name>
    <filename>class_test_1_1_z3_test_1_1_z3_solver_b_and.html</filename>
    <base>Test::Z3SolverTests</base>
  </compound>
  <compound kind="class">
    <name>Test::Z3Test::Z3SolverBOR</name>
    <filename>class_test_1_1_z3_test_1_1_z3_solver_b_o_r.html</filename>
    <base>Test::Z3SolverTests</base>
  </compound>
  <compound kind="class">
    <name>Test::Z3Test::Z3SolverBXor</name>
    <filename>class_test_1_1_z3_test_1_1_z3_solver_b_xor.html</filename>
    <base>Test::Z3SolverTests</base>
  </compound>
  <compound kind="class">
    <name>Test::Z3Test::Z3SolverCastBit2Bool</name>
    <filename>class_test_1_1_z3_test_1_1_z3_solver_cast_bit2_bool.html</filename>
    <base>Test::Z3SolverTests</base>
  </compound>
  <compound kind="class">
    <name>Test::Z3Test::Z3SolverCastBit2EqualBit</name>
    <filename>class_test_1_1_z3_test_1_1_z3_solver_cast_bit2_equal_bit.html</filename>
    <base>Test::Z3SolverTests</base>
  </compound>
  <compound kind="class">
    <name>Test::Z3Test::Z3SolverCastBit2LargerBit</name>
    <filename>class_test_1_1_z3_test_1_1_z3_solver_cast_bit2_larger_bit.html</filename>
    <base>Test::Z3SolverTests</base>
  </compound>
  <compound kind="class">
    <name>Test::Z3Test::Z3SolverCastBit2LessBit</name>
    <filename>class_test_1_1_z3_test_1_1_z3_solver_cast_bit2_less_bit.html</filename>
    <base>Test::Z3SolverTests</base>
  </compound>
  <compound kind="class">
    <name>Test::Z3Test::Z3SolverCastBool2Bit</name>
    <filename>class_test_1_1_z3_test_1_1_z3_solver_cast_bool2_bit.html</filename>
    <base>Test::Z3SolverTests</base>
  </compound>
  <compound kind="class">
    <name>Test::Z3Test::Z3SolverCastInAssignment</name>
    <filename>class_test_1_1_z3_test_1_1_z3_solver_cast_in_assignment.html</filename>
    <base>Test::Z3SolverTests</base>
  </compound>
  <compound kind="class">
    <name>Test::Z3Test::Z3SolverComplement</name>
    <filename>class_test_1_1_z3_test_1_1_z3_solver_complement.html</filename>
    <base>Test::Z3SolverTests</base>
  </compound>
  <compound kind="class">
    <name>Test::Z3Test::Z3SolverConc</name>
    <filename>class_test_1_1_z3_test_1_1_z3_solver_conc.html</filename>
    <base>Test::Z3SolverTests</base>
  </compound>
  <compound kind="class">
    <name>Test::Z3Test::Z3SolverITE</name>
    <filename>class_test_1_1_z3_test_1_1_z3_solver_i_t_e.html</filename>
    <base>Test::Z3SolverTests</base>
  </compound>
  <compound kind="class">
    <name>Test::Z3Test::Z3SolverMod</name>
    <filename>class_test_1_1_z3_test_1_1_z3_solver_mod.html</filename>
    <base>Test::Z3SolverTests</base>
  </compound>
  <compound kind="class">
    <name>Test::Z3Test::Z3SolverMult</name>
    <filename>class_test_1_1_z3_test_1_1_z3_solver_mult.html</filename>
    <base>Test::Z3SolverTests</base>
  </compound>
  <compound kind="class">
    <name>Test::Z3Test::Z3SolverShl</name>
    <filename>class_test_1_1_z3_test_1_1_z3_solver_shl.html</filename>
    <base>Test::Z3SolverTests</base>
  </compound>
  <compound kind="class">
    <name>Test::Z3Test::Z3SolverShrS</name>
    <filename>class_test_1_1_z3_test_1_1_z3_solver_shr_s.html</filename>
    <base>Test::Z3SolverTests</base>
  </compound>
  <compound kind="class">
    <name>Test::Z3Test::Z3SolverShrU</name>
    <filename>class_test_1_1_z3_test_1_1_z3_solver_shr_u.html</filename>
    <base>Test::Z3SolverTests</base>
  </compound>
  <compound kind="class">
    <name>Test::Z3Test::Z3SolverSub</name>
    <filename>class_test_1_1_z3_test_1_1_z3_solver_sub.html</filename>
    <base>Test::Z3SolverTests</base>
  </compound>
  <compound kind="class">
    <name>Transform</name>
    <filename>class_transform.html</filename>
    <base virtualness="virtual">Visitor</base>
  </compound>
  <compound kind="class">
    <name>TypeCheck</name>
    <filename>class_type_check.html</filename>
    <base>PassManager</base>
    <class kind="class">TypeCheck::AssignActionArgTypes</class>
    <class kind="class">TypeCheck::AssignInitialTypes</class>
    <class kind="class">TypeCheck::InferActionArgsBottomUp</class>
    <class kind="class">TypeCheck::InferActionArgsTopDown</class>
    <class kind="class">TypeCheck::InferExpressionsBottomUp</class>
    <class kind="class">TypeCheck::InferExpressionsTopDown</class>
    <class kind="class">TypeCheck::MakeImplicitCastsExplicit</class>
  </compound>
  <compound kind="class">
    <name>TypeCheck::AssignActionArgTypes</name>
    <filename>class_type_check_1_1_assign_action_arg_types.html</filename>
    <base>Modifier</base>
  </compound>
  <compound kind="class">
    <name>TypeCheck::AssignInitialTypes</name>
    <filename>class_type_check_1_1_assign_initial_types.html</filename>
    <base>Transform</base>
  </compound>
  <compound kind="class">
    <name>TypeCheck::InferActionArgsBottomUp</name>
    <filename>class_type_check_1_1_infer_action_args_bottom_up.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>TypeCheck::InferActionArgsTopDown</name>
    <filename>class_type_check_1_1_infer_action_args_top_down.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>TypeCheck::InferExpressionsBottomUp</name>
    <filename>class_type_check_1_1_infer_expressions_bottom_up.html</filename>
    <base>Modifier</base>
  </compound>
  <compound kind="class">
    <name>TypeCheck::InferExpressionsTopDown</name>
    <filename>class_type_check_1_1_infer_expressions_top_down.html</filename>
    <base>Modifier</base>
  </compound>
  <compound kind="class">
    <name>TypeCheck::MakeImplicitCastsExplicit</name>
    <filename>class_type_check_1_1_make_implicit_casts_explicit.html</filename>
    <base>Transform</base>
    <base protection="private">P4WriteContext</base>
  </compound>
  <compound kind="struct">
    <name>UBPF::Algorithm_Model</name>
    <filename>struct_u_b_p_f_1_1_algorithm___model.html</filename>
    <base>Model::Enum_Model</base>
  </compound>
  <compound kind="class">
    <name>UBPF::EnumOn32Bits</name>
    <filename>class_u_b_p_f_1_1_enum_on32_bits.html</filename>
    <base>P4::ChooseEnumRepresentation</base>
  </compound>
  <compound kind="struct">
    <name>UBPF::Hash_Model</name>
    <filename>struct_u_b_p_f_1_1_hash___model.html</filename>
    <base>Model::Elem</base>
  </compound>
  <compound kind="class">
    <name>UBPF::MidEnd</name>
    <filename>class_u_b_p_f_1_1_mid_end.html</filename>
    <base>EBPF::MidEnd</base>
  </compound>
  <compound kind="class">
    <name>UBPF::OutHeaderSize</name>
    <filename>class_u_b_p_f_1_1_out_header_size.html</filename>
    <base>EBPF::CodeGenInspector</base>
  </compound>
  <compound kind="struct">
    <name>UBPF::Pipeline_Model</name>
    <filename>struct_u_b_p_f_1_1_pipeline___model.html</filename>
    <base>Model::Elem</base>
  </compound>
  <compound kind="struct">
    <name>UBPF::Register_Model</name>
    <filename>struct_u_b_p_f_1_1_register___model.html</filename>
    <base>Model::Extern_Model</base>
  </compound>
  <compound kind="class">
    <name>UBPF::UBPFBoolType</name>
    <filename>class_u_b_p_f_1_1_u_b_p_f_bool_type.html</filename>
    <base>EBPF::EBPFBoolType</base>
  </compound>
  <compound kind="class">
    <name>UBPF::UbpfCodeBuilder</name>
    <filename>class_u_b_p_f_1_1_ubpf_code_builder.html</filename>
    <base>EBPF::CodeBuilder</base>
  </compound>
  <compound kind="class">
    <name>UBPF::UBPFControl</name>
    <filename>class_u_b_p_f_1_1_u_b_p_f_control.html</filename>
    <base>EBPF::EBPFControl</base>
  </compound>
  <compound kind="class">
    <name>UBPF::UBPFControlBodyTranslator</name>
    <filename>class_u_b_p_f_1_1_u_b_p_f_control_body_translator.html</filename>
    <base>EBPF::ControlBodyTranslator</base>
  </compound>
  <compound kind="class">
    <name>UBPF::UBPFDeparser</name>
    <filename>class_u_b_p_f_1_1_u_b_p_f_deparser.html</filename>
    <base>EBPF::EBPFObject</base>
  </compound>
  <compound kind="class">
    <name>UBPF::UBPFDeparserTranslationVisitor</name>
    <filename>class_u_b_p_f_1_1_u_b_p_f_deparser_translation_visitor.html</filename>
    <base>EBPF::CodeGenInspector</base>
  </compound>
  <compound kind="class">
    <name>UBPF::UBPFEnumType</name>
    <filename>class_u_b_p_f_1_1_u_b_p_f_enum_type.html</filename>
    <base>EBPF::EBPFEnumType</base>
  </compound>
  <compound kind="class">
    <name>UBPF::UBPFListType</name>
    <filename>class_u_b_p_f_1_1_u_b_p_f_list_type.html</filename>
    <base>EBPF::EBPFType</base>
    <base>EBPF::IHasWidth</base>
  </compound>
  <compound kind="class">
    <name>UBPF::UBPFModel</name>
    <filename>class_u_b_p_f_1_1_u_b_p_f_model.html</filename>
    <base>Model::Model</base>
    <class kind="class">UBPF::UBPFModel::getUBPFModelVersion</class>
  </compound>
  <compound kind="class">
    <name>UBPF::UBPFModel::getUBPFModelVersion</name>
    <filename>class_u_b_p_f_1_1_u_b_p_f_model_1_1get_u_b_p_f_model_version.html</filename>
    <base>Inspector</base>
  </compound>
  <compound kind="class">
    <name>UBPF::UBPFParser</name>
    <filename>class_u_b_p_f_1_1_u_b_p_f_parser.html</filename>
    <base>EBPF::EBPFParser</base>
  </compound>
  <compound kind="class">
    <name>UBPF::UBPFParserState</name>
    <filename>class_u_b_p_f_1_1_u_b_p_f_parser_state.html</filename>
    <base>EBPF::EBPFParserState</base>
  </compound>
  <compound kind="class">
    <name>UBPF::UBPFProgram</name>
    <filename>class_u_b_p_f_1_1_u_b_p_f_program.html</filename>
    <base>EBPF::EBPFProgram</base>
  </compound>
  <compound kind="class">
    <name>UBPF::UBPFRegister</name>
    <filename>class_u_b_p_f_1_1_u_b_p_f_register.html</filename>
    <base>UBPF::UBPFTableBase</base>
  </compound>
  <compound kind="class">
    <name>UBPF::UBPFScalarType</name>
    <filename>class_u_b_p_f_1_1_u_b_p_f_scalar_type.html</filename>
    <base>EBPF::EBPFScalarType</base>
  </compound>
  <compound kind="class">
    <name>UBPF::UBPFStructType</name>
    <filename>class_u_b_p_f_1_1_u_b_p_f_struct_type.html</filename>
    <base>EBPF::EBPFStructType</base>
  </compound>
  <compound kind="class">
    <name>UBPF::UBPFTable</name>
    <filename>class_u_b_p_f_1_1_u_b_p_f_table.html</filename>
    <base>UBPF::UBPFTableBase</base>
  </compound>
  <compound kind="class">
    <name>UBPF::UBPFTableBase</name>
    <filename>class_u_b_p_f_1_1_u_b_p_f_table_base.html</filename>
    <base>EBPF::EBPFObject</base>
  </compound>
  <compound kind="class">
    <name>UBPF::UbpfTarget</name>
    <filename>class_u_b_p_f_1_1_ubpf_target.html</filename>
    <base>EBPF::Target</base>
  </compound>
  <compound kind="class">
    <name>UBPF::UBPFTypeFactory</name>
    <filename>class_u_b_p_f_1_1_u_b_p_f_type_factory.html</filename>
    <base>EBPF::EBPFTypeFactory</base>
  </compound>
  <compound kind="struct">
    <name>UnparsedConstant</name>
    <filename>struct_unparsed_constant.html</filename>
    <member kind="variable">
      <type>unsigned</type>
      <name>base</name>
      <anchorfile>struct_unparsed_constant.html</anchorfile>
      <anchor>a48cc46292052eaeff3e358c69fe7de36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasWidth</name>
      <anchorfile>struct_unparsed_constant.html</anchorfile>
      <anchor>a47106cde919d8d3ee34ff04e732af532</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>skip</name>
      <anchorfile>struct_unparsed_constant.html</anchorfile>
      <anchor>aa3d9ad956d25cc30b2de1f34f4bdbf2e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>UT_hash_bucket</name>
    <filename>struct_u_t__hash__bucket.html</filename>
  </compound>
  <compound kind="struct">
    <name>UT_hash_handle</name>
    <filename>struct_u_t__hash__handle.html</filename>
  </compound>
  <compound kind="struct">
    <name>UT_hash_table</name>
    <filename>struct_u_t__hash__table.html</filename>
  </compound>
  <compound kind="class">
    <name>Util::AsEnumerator</name>
    <filename>class_util_1_1_as_enumerator.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename S</templarg>
    <base>Util::Enumerator&lt; S &gt;</base>
    <member kind="function">
      <type>S</type>
      <name>getCurrent</name>
      <anchorfile>class_util_1_1_as_enumerator.html</anchorfile>
      <anchor>a67aa8e5d2aedc5a4812330bad0c8905d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveNext</name>
      <anchorfile>class_util_1_1_as_enumerator.html</anchorfile>
      <anchor>a75fb75626c33002dd73c82335597adc2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>class_util_1_1_as_enumerator.html</anchorfile>
      <anchor>aa6fae76bf9dff8791d63a72b6dc17502</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Util::BitRange</name>
    <filename>struct_util_1_1_bit_range.html</filename>
  </compound>
  <compound kind="class">
    <name>Util::Comment</name>
    <filename>class_util_1_1_comment.html</filename>
    <base protection="private">IHasDbPrint</base>
  </compound>
  <compound kind="class">
    <name>Util::CompilationError</name>
    <filename>class_util_1_1_compilation_error.html</filename>
    <base>Util::P4CExceptionBase</base>
  </compound>
  <compound kind="class">
    <name>Util::CompilerBug</name>
    <filename>class_util_1_1_compiler_bug.html</filename>
    <base>Util::P4CExceptionBase</base>
  </compound>
  <compound kind="class">
    <name>Util::CompilerUnimplemented</name>
    <filename>class_util_1_1_compiler_unimplemented.html</filename>
    <base>Util::P4CExceptionBase</base>
  </compound>
  <compound kind="class">
    <name>Util::ConcatEnumerator</name>
    <filename>class_util_1_1_concat_enumerator.html</filename>
    <templarg>typename T</templarg>
    <base>Util::Enumerator&lt; T &gt;</base>
    <member kind="function">
      <type>Enumerator&lt; T &gt; *</type>
      <name>concat</name>
      <anchorfile>class_util_1_1_concat_enumerator.html</anchorfile>
      <anchor>a867c3323992fb29a26add5fbdaa26023</anchor>
      <arglist>(Enumerator&lt; T &gt; *other) override</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getCurrent</name>
      <anchorfile>class_util_1_1_concat_enumerator.html</anchorfile>
      <anchor>a4bca3daab0242141027c3a6f4a193750</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveNext</name>
      <anchorfile>class_util_1_1_concat_enumerator.html</anchorfile>
      <anchor>a41d650db3bfb32e6e2041f7534a8667f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>class_util_1_1_concat_enumerator.html</anchorfile>
      <anchor>a952720f9ece27d0d2e2b07846e319bb3</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Util::ContainerType</name>
    <filename>class_util_1_1_container_type.html</filename>
    <base>Util::Namespace</base>
  </compound>
  <compound kind="struct">
    <name>Util::Detail::FloatHasher</name>
    <filename>struct_util_1_1_detail_1_1_float_hasher.html</filename>
    <templarg>typename Float</templarg>
  </compound>
  <compound kind="struct">
    <name>Util::Detail::IntegerHasher</name>
    <filename>struct_util_1_1_detail_1_1_integer_hasher.html</filename>
    <templarg>typename Int</templarg>
  </compound>
  <compound kind="class">
    <name>Util::Detail::StdHasher</name>
    <filename>class_util_1_1_detail_1_1_std_hasher.html</filename>
  </compound>
  <compound kind="struct">
    <name>Util::Detail::TupleHasher</name>
    <filename>struct_util_1_1_detail_1_1_tuple_hasher.html</filename>
    <templarg>size_t index</templarg>
    <templarg>typename... Types</templarg>
  </compound>
  <compound kind="struct">
    <name>Util::Detail::TupleHasher&lt; 0, Types... &gt;</name>
    <filename>struct_util_1_1_detail_1_1_tuple_hasher_3_010_00_01_types_8_8_8_01_4.html</filename>
    <templarg>typename... Types</templarg>
  </compound>
  <compound kind="class">
    <name>Util::EmptyEnumerator</name>
    <filename>class_util_1_1_empty_enumerator.html</filename>
    <templarg>typename T</templarg>
    <base>Util::Enumerator&lt; T &gt;</base>
    <member kind="function">
      <type>T</type>
      <name>getCurrent</name>
      <anchorfile>class_util_1_1_empty_enumerator.html</anchorfile>
      <anchor>ad2a146fe10ac7277bbd28aa698dd3ee2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveNext</name>
      <anchorfile>class_util_1_1_empty_enumerator.html</anchorfile>
      <anchor>aea4b628af13225cf17ed91c7c062478e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Util::Enumerator</name>
    <filename>class_util_1_1_enumerator.html</filename>
    <templarg>class T</templarg>
    <member kind="function">
      <type>bool</type>
      <name>any</name>
      <anchorfile>class_util_1_1_enumerator.html</anchorfile>
      <anchor>af6d6f9f97c7bd1543750aa437ed96dd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Enumerator&lt; S &gt; *</type>
      <name>as</name>
      <anchorfile>class_util_1_1_enumerator.html</anchorfile>
      <anchor>a6784c91354a3038a2a01f9275a99e777</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Enumerator&lt; T &gt; *</type>
      <name>concat</name>
      <anchorfile>class_util_1_1_enumerator.html</anchorfile>
      <anchor>af9db0fa8acee688bc320c78ce6aebf0e</anchor>
      <arglist>(Enumerator&lt; T &gt; *other)</arglist>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>count</name>
      <anchorfile>class_util_1_1_enumerator.html</anchorfile>
      <anchor>a637ffc3392bd628fd18958caba55d19e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual T</type>
      <name>getCurrent</name>
      <anchorfile>class_util_1_1_enumerator.html</anchorfile>
      <anchor>adf27c46053a8b9e3e5c5dbfa2a4c38d5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>Enumerator&lt; std::invoke_result_t&lt; Mapper, T &gt; &gt; *</type>
      <name>map</name>
      <anchorfile>class_util_1_1_enumerator.html</anchorfile>
      <anchor>a2b47d24ab9cff56bbbe03f365175167d</anchor>
      <arglist>(Mapper map)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>moveNext</name>
      <anchorfile>class_util_1_1_enumerator.html</anchorfile>
      <anchor>a58c9beeceed44ac6781b72f7ead0e43e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>next</name>
      <anchorfile>class_util_1_1_enumerator.html</anchorfile>
      <anchor>a81f0967aa3532df466506075adf1cf84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>nextOrDefault</name>
      <anchorfile>class_util_1_1_enumerator.html</anchorfile>
      <anchor>aa4f89a6e4fcd64149a15c149a145d175</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>class_util_1_1_enumerator.html</anchorfile>
      <anchor>a057dfab4bf253cb2ecd18be119bf74b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>single</name>
      <anchorfile>class_util_1_1_enumerator.html</anchorfile>
      <anchor>a0080d861c39a4bdc9d1da8593cd6ef8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>singleOrDefault</name>
      <anchorfile>class_util_1_1_enumerator.html</anchorfile>
      <anchor>aab1d97d33dfc5deec4a11ededa311530</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Enumerator&lt; T &gt; *</type>
      <name>where</name>
      <anchorfile>class_util_1_1_enumerator.html</anchorfile>
      <anchor>a621025bd5e73c11cfec25f40957cab4b</anchor>
      <arglist>(Filter filter)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Enumerator&lt; T &gt; *</type>
      <name>concatAll</name>
      <anchorfile>class_util_1_1_enumerator.html</anchorfile>
      <anchor>a77c2f6c13ea4a5b37a8768655820a411</anchor>
      <arglist>(Enumerator&lt; Enumerator&lt; T &gt; * &gt; *inputs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Util::EnumeratorHandle</name>
    <filename>class_util_1_1_enumerator_handle.html</filename>
    <templarg>typename T</templarg>
  </compound>
  <compound kind="class">
    <name>Util::FilterEnumerator</name>
    <filename>class_util_1_1_filter_enumerator.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename Filter</templarg>
    <base>Util::Enumerator&lt; T &gt;</base>
    <member kind="function">
      <type>T</type>
      <name>getCurrent</name>
      <anchorfile>class_util_1_1_filter_enumerator.html</anchorfile>
      <anchor>afb0c1b338f14a1508a4b1abb14aa48ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveNext</name>
      <anchorfile>class_util_1_1_filter_enumerator.html</anchorfile>
      <anchor>a10e7f5cd8722890241b968d1abcf6576</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>class_util_1_1_filter_enumerator.html</anchorfile>
      <anchor>a9d655915e3a8f7cf7e477f7150bbb5c0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Util::Hash</name>
    <filename>struct_util_1_1_hash.html</filename>
  </compound>
  <compound kind="struct">
    <name>Util::Hasher</name>
    <filename>struct_util_1_1_hasher.html</filename>
    <templarg>class Key</templarg>
    <templarg>class Enable</templarg>
  </compound>
  <compound kind="struct">
    <name>Util::Hasher&lt; bool &gt;</name>
    <filename>struct_util_1_1_hasher_3_01bool_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Util::Hasher&lt; char &gt;</name>
    <filename>struct_util_1_1_hasher_3_01char_01_4.html</filename>
    <base>Util::Detail::IntegerHasher&lt; char &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Util::Hasher&lt; ClosedRange&lt; Unit, Order &gt; &gt;</name>
    <filename>struct_util_1_1_hasher_3_01_closed_range_3_01_unit_00_01_order_01_4_01_4.html</filename>
    <templarg>RangeUnit Unit</templarg>
    <templarg>Endian Order</templarg>
  </compound>
  <compound kind="struct">
    <name>Util::Hasher&lt; cstring &gt;</name>
    <filename>struct_util_1_1_hasher_3_01cstring_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Util::Hasher&lt; double &gt;</name>
    <filename>struct_util_1_1_hasher_3_01double_01_4.html</filename>
    <base>Util::Detail::FloatHasher&lt; double &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Util::Hasher&lt; float &gt;</name>
    <filename>struct_util_1_1_hasher_3_01float_01_4.html</filename>
    <base>Util::Detail::FloatHasher&lt; float &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Util::Hasher&lt; HalfOpenRange&lt; Unit, Order &gt; &gt;</name>
    <filename>struct_util_1_1_hasher_3_01_half_open_range_3_01_unit_00_01_order_01_4_01_4.html</filename>
    <templarg>RangeUnit Unit</templarg>
    <templarg>Endian Order</templarg>
  </compound>
  <compound kind="struct">
    <name>Util::Hasher&lt; P4::ProgramPoint &gt;</name>
    <filename>struct_util_1_1_hasher_3_01_p4_1_1_program_point_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Util::Hasher&lt; signed char &gt;</name>
    <filename>struct_util_1_1_hasher_3_01signed_01char_01_4.html</filename>
    <base>Util::Detail::IntegerHasher&lt; signed char &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Util::Hasher&lt; signed int &gt;</name>
    <filename>struct_util_1_1_hasher_3_01signed_01int_01_4.html</filename>
    <base>Util::Detail::IntegerHasher&lt; signed int &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Util::Hasher&lt; signed long &gt;</name>
    <filename>struct_util_1_1_hasher_3_01signed_01long_01_4.html</filename>
    <base>Util::Detail::IntegerHasher&lt; signed long &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Util::Hasher&lt; signed long long &gt;</name>
    <filename>struct_util_1_1_hasher_3_01signed_01long_01long_01_4.html</filename>
    <base>Util::Detail::IntegerHasher&lt; signed long long &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Util::Hasher&lt; signed short &gt;</name>
    <filename>struct_util_1_1_hasher_3_01signed_01short_01_4.html</filename>
    <base>Util::Detail::IntegerHasher&lt; signed short &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Util::Hasher&lt; std::pair&lt; T1, T2 &gt; &gt;</name>
    <filename>struct_util_1_1_hasher_3_01std_1_1pair_3_01_t1_00_01_t2_01_4_01_4.html</filename>
    <templarg>typename T1</templarg>
    <templarg>typename T2</templarg>
  </compound>
  <compound kind="struct">
    <name>Util::Hasher&lt; std::shared_ptr&lt; T &gt; &gt;</name>
    <filename>struct_util_1_1_hasher_3_01std_1_1shared__ptr_3_01_t_01_4_01_4.html</filename>
    <templarg>typename T</templarg>
  </compound>
  <compound kind="struct">
    <name>Util::Hasher&lt; std::string &gt;</name>
    <filename>struct_util_1_1_hasher_3_01std_1_1string_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Util::Hasher&lt; std::string_view &gt;</name>
    <filename>struct_util_1_1_hasher_3_01std_1_1string__view_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Util::Hasher&lt; std::tuple&lt; Types... &gt; &gt;</name>
    <filename>struct_util_1_1_hasher_3_01std_1_1tuple_3_01_types_8_8_8_01_4_01_4.html</filename>
    <templarg>typename... Types</templarg>
  </compound>
  <compound kind="struct">
    <name>Util::Hasher&lt; std::unique_ptr&lt; T &gt; &gt;</name>
    <filename>struct_util_1_1_hasher_3_01std_1_1unique__ptr_3_01_t_01_4_01_4.html</filename>
    <templarg>typename T</templarg>
  </compound>
  <compound kind="struct">
    <name>Util::Hasher&lt; T * &gt;</name>
    <filename>struct_util_1_1_hasher_3_01_t_01_5_01_4.html</filename>
    <templarg>typename T</templarg>
  </compound>
  <compound kind="struct">
    <name>Util::Hasher&lt; unsigned char &gt;</name>
    <filename>struct_util_1_1_hasher_3_01unsigned_01char_01_4.html</filename>
    <base>Util::Detail::IntegerHasher&lt; unsigned char &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Util::Hasher&lt; unsigned int &gt;</name>
    <filename>struct_util_1_1_hasher_3_01unsigned_01int_01_4.html</filename>
    <base>Util::Detail::IntegerHasher&lt; unsigned int &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Util::Hasher&lt; unsigned long &gt;</name>
    <filename>struct_util_1_1_hasher_3_01unsigned_01long_01_4.html</filename>
    <base>Util::Detail::IntegerHasher&lt; unsigned long &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Util::Hasher&lt; unsigned long long &gt;</name>
    <filename>struct_util_1_1_hasher_3_01unsigned_01long_01long_01_4.html</filename>
    <base>Util::Detail::IntegerHasher&lt; unsigned long long &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Util::Hasher&lt; unsigned short &gt;</name>
    <filename>struct_util_1_1_hasher_3_01unsigned_01short_01_4.html</filename>
    <base>Util::Detail::IntegerHasher&lt; unsigned short &gt;</base>
  </compound>
  <compound kind="class">
    <name>Util::HasToString</name>
    <filename>class_util_1_1_has_to_string.html</filename>
    <templarg>typename T</templarg>
  </compound>
  <compound kind="class">
    <name>Util::IHasSourceInfo</name>
    <filename>class_util_1_1_i_has_source_info.html</filename>
  </compound>
  <compound kind="class">
    <name>Util::IJson</name>
    <filename>class_util_1_1_i_json.html</filename>
    <base>ICastable</base>
  </compound>
  <compound kind="class">
    <name>Util::InputSources</name>
    <filename>class_util_1_1_input_sources.html</filename>
    <member kind="function">
      <type>void</type>
      <name>appendText</name>
      <anchorfile>class_util_1_1_input_sources.html</anchorfile>
      <anchor>ad4d861b5a485bc7950ec69b989097522</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>getSourceFragment</name>
      <anchorfile>class_util_1_1_input_sources.html</anchorfile>
      <anchor>ae4e3f773c915c2d31768df156995c1ec</anchor>
      <arglist>(const SourcePosition &amp;position, bool useMarker) const</arglist>
    </member>
    <member kind="function">
      <type>SourceFileLine</type>
      <name>getSourceLine</name>
      <anchorfile>class_util_1_1_input_sources.html</anchorfile>
      <anchor>ae9fbf246302f50732d150828b7ec8591</anchor>
      <arglist>(unsigned line) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mapLine</name>
      <anchorfile>class_util_1_1_input_sources.html</anchorfile>
      <anchor>a979528f99b14b646562dc3c1712f108e</anchor>
      <arglist>(cstring file, unsigned originalSourceLineNo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seal</name>
      <anchorfile>class_util_1_1_input_sources.html</anchorfile>
      <anchor>a6721d43eb91bfd290a7dd46f7d186945</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Util::iterator_range</name>
    <filename>class_util_1_1iterator__range.html</filename>
    <templarg>typename Iter</templarg>
    <templarg>typename Sentinel</templarg>
  </compound>
  <compound kind="class">
    <name>Util::IteratorEnumerator</name>
    <filename>class_util_1_1_iterator_enumerator.html</filename>
    <templarg>typename Iter</templarg>
    <base>Util::Enumerator&lt; Iter::value_type &gt;</base>
    <member kind="function">
      <type>Iter::value_type</type>
      <name>getCurrent</name>
      <anchorfile>class_util_1_1_iterator_enumerator.html</anchorfile>
      <anchor>a2393683aeb1da5daf7c8f5179b00abe1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveNext</name>
      <anchorfile>class_util_1_1_iterator_enumerator.html</anchorfile>
      <anchor>aecee86a1a3ca245d5012a023effed1e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Util::JsonArray</name>
    <filename>class_util_1_1_json_array.html</filename>
    <base>Util::IJson</base>
  </compound>
  <compound kind="class">
    <name>Util::JsonObject</name>
    <filename>class_util_1_1_json_object.html</filename>
    <base>Util::IJson</base>
    <base>ordered_map&lt; cstring, IJson * &gt;</base>
  </compound>
  <compound kind="class">
    <name>Util::JsonValue</name>
    <filename>class_util_1_1_json_value.html</filename>
    <base>Util::IJson</base>
  </compound>
  <compound kind="class">
    <name>Util::MapEnumerator</name>
    <filename>class_util_1_1_map_enumerator.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename S</templarg>
    <templarg>typename Mapper</templarg>
    <base>Util::Enumerator&lt; S &gt;</base>
    <member kind="function">
      <type>S</type>
      <name>getCurrent</name>
      <anchorfile>class_util_1_1_map_enumerator.html</anchorfile>
      <anchor>a994b8325e6beb0e8a82695987a1370da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveNext</name>
      <anchorfile>class_util_1_1_map_enumerator.html</anchorfile>
      <anchor>a368c50774ca711a4e25354dbfbd382dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>class_util_1_1_map_enumerator.html</anchorfile>
      <anchor>a6dc2b78f982abe63bd10658e4918455b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Util::NamedSymbol</name>
    <filename>class_util_1_1_named_symbol.html</filename>
    <base>ICastable</base>
  </compound>
  <compound kind="class">
    <name>Util::Namespace</name>
    <filename>class_util_1_1_namespace.html</filename>
    <base>Util::NamedSymbol</base>
  </compound>
  <compound kind="class">
    <name>Util::Object</name>
    <filename>class_util_1_1_object.html</filename>
    <base>Util::NamedSymbol</base>
  </compound>
  <compound kind="class">
    <name>Util::Options</name>
    <filename>class_util_1_1_options.html</filename>
    <member kind="enumvalue">
      <name>Default</name>
      <anchorfile>class_util_1_1_options.html</anchorfile>
      <anchor>a7e885cb546ba27712484c084f880e10ea3d973efa72ae10bace2baad6610f2504</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hide</name>
      <anchorfile>class_util_1_1_options.html</anchorfile>
      <anchor>a7e885cb546ba27712484c084f880e10eaff7df71c5a44921525babfaa85d7a9e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OptionalArgument</name>
      <anchorfile>class_util_1_1_options.html</anchorfile>
      <anchor>a7e885cb546ba27712484c084f880e10ea6d85bc9fd5f9fca0061a6bbd7fd6fee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>OptionFlags</name>
      <anchorfile>class_util_1_1_options.html</anchorfile>
      <anchor>a7e885cb546ba27712484c084f880e10e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Default</name>
      <anchorfile>class_util_1_1_options.html</anchorfile>
      <anchor>a7e885cb546ba27712484c084f880e10ea3d973efa72ae10bace2baad6610f2504</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hide</name>
      <anchorfile>class_util_1_1_options.html</anchorfile>
      <anchor>a7e885cb546ba27712484c084f880e10eaff7df71c5a44921525babfaa85d7a9e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OptionalArgument</name>
      <anchorfile>class_util_1_1_options.html</anchorfile>
      <anchor>a7e885cb546ba27712484c084f880e10ea6d85bc9fd5f9fca0061a6bbd7fd6fee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; const char * &gt; *</type>
      <name>process</name>
      <anchorfile>class_util_1_1_options.html</anchorfile>
      <anchor>a5ef675f16d91b39a020f518a6637da46</anchor>
      <arglist>(int argc, char *const argv[])</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Util::Options::Option</name>
    <filename>class_util_1_1_options.html</filename>
    <anchor>struct_util_1_1_options_1_1_option</anchor>
  </compound>
  <compound kind="class">
    <name>Util::P4CExceptionBase</name>
    <filename>class_util_1_1_p4_c_exception_base.html</filename>
  </compound>
  <compound kind="class">
    <name>Util::PathName</name>
    <filename>class_util_1_1_path_name.html</filename>
  </compound>
  <compound kind="class">
    <name>Util::ProgramStructure</name>
    <filename>class_util_1_1_program_structure.html</filename>
  </compound>
  <compound kind="class">
    <name>Util::ScopedTimer</name>
    <filename>class_util_1_1_scoped_timer.html</filename>
  </compound>
  <compound kind="struct">
    <name>Util::ScopedTimerCtx</name>
    <filename>struct_util_1_1_scoped_timer_ctx.html</filename>
  </compound>
  <compound kind="class">
    <name>Util::SimpleType</name>
    <filename>class_util_1_1_simple_type.html</filename>
    <base>Util::NamedSymbol</base>
  </compound>
  <compound kind="class">
    <name>Util::SourceCodeBuilder</name>
    <filename>class_util_1_1_source_code_builder.html</filename>
  </compound>
  <compound kind="struct">
    <name>Util::SourceFileLine</name>
    <filename>struct_util_1_1_source_file_line.html</filename>
    <member kind="variable">
      <type>cstring</type>
      <name>fileName</name>
      <anchorfile>struct_util_1_1_source_file_line.html</anchorfile>
      <anchor>a28b94d20827b845bb3e588ac8a5469bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Util::SourceInfo</name>
    <filename>class_util_1_1_source_info.html</filename>
    <member kind="function">
      <type></type>
      <name>SourceInfo</name>
      <anchorfile>class_util_1_1_source_info.html</anchorfile>
      <anchor>a16a50b22fbc7c879641104dd734a660a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SourceInfo</name>
      <anchorfile>class_util_1_1_source_info.html</anchorfile>
      <anchor>a596632bae4e84e0c89573a626e06999f</anchor>
      <arglist>(const InputSources *sources, SourcePosition point)</arglist>
    </member>
    <member kind="function">
      <type>SourceInfo</type>
      <name>operator+</name>
      <anchorfile>class_util_1_1_source_info.html</anchorfile>
      <anchor>a660ee7c887f3f844a3d1daed12d7eec7</anchor>
      <arglist>(const SourceInfo &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>class_util_1_1_source_info.html</anchorfile>
      <anchor>a0b5b057a4fcc392146254383b70f461d</anchor>
      <arglist>(const SourceInfo &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Util::SourcePosition</name>
    <filename>class_util_1_1_source_position.html</filename>
    <member kind="function">
      <type></type>
      <name>SourcePosition</name>
      <anchorfile>class_util_1_1_source_position.html</anchorfile>
      <anchor>a33b961fbefb8453e872fcdffd0f62a32</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>SourcePosition &amp;</type>
      <name>operator--</name>
      <anchorfile>class_util_1_1_source_position.html</anchorfile>
      <anchor>a5ac38aeb26cbe3ae7e2f27e2f87b7a03</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Util::TimerEntry</name>
    <filename>struct_util_1_1_timer_entry.html</filename>
    <member kind="variable">
      <type>size_t</type>
      <name>milliseconds</name>
      <anchorfile>struct_util_1_1_timer_entry.html</anchorfile>
      <anchor>accfe04a8dc86cab1ed55d468e272e2cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>relativeToParent</name>
      <anchorfile>struct_util_1_1_timer_entry.html</anchorfile>
      <anchor>a1f283954bfb49a4ef1befad04e0811b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>timerName</name>
      <anchorfile>struct_util_1_1_timer_entry.html</anchorfile>
      <anchor>a9592d0a5086cf75ca76237528ab397b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>V1::V1ParserDriver</name>
    <filename>class_v1_1_1_v1_parser_driver.html</filename>
    <base>P4::AbstractParserDriver</base>
    <member kind="function" static="yes">
      <type>static const IR::V1Program *</type>
      <name>parse</name>
      <anchorfile>class_v1_1_1_v1_parser_driver.html</anchorfile>
      <anchor>a86e3638808bfe3f85768a37dc27e403c</anchor>
      <arglist>(std::istream &amp;in, const char *sourceFile, unsigned sourceLine=1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addPragma</name>
      <anchorfile>class_v1_1_1_v1_parser_driver.html</anchorfile>
      <anchor>a701e215eb6ab8e9aa2694f424a797842</anchor>
      <arglist>(IR::Annotation *pragma)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clearPragmas</name>
      <anchorfile>class_v1_1_1_v1_parser_driver.html</anchorfile>
      <anchor>a191e2160d60ea597354ddec98d29c485</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IR::Constant *</type>
      <name>constantFold</name>
      <anchorfile>class_v1_1_1_v1_parser_driver.html</anchorfile>
      <anchor>ae54b57cc0ed89fab5f294f8eda803090</anchor>
      <arglist>(IR::Expression *expr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IR::Vector&lt; IR::Expression &gt;</type>
      <name>makeExpressionList</name>
      <anchorfile>class_v1_1_1_v1_parser_driver.html</anchorfile>
      <anchor>a017a9ba742721fb5cdbb28020e1d67d5</anchor>
      <arglist>(const IR::NameList *list)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IR::Annotations *</type>
      <name>takePragmasAsAnnotations</name>
      <anchorfile>class_v1_1_1_v1_parser_driver.html</anchorfile>
      <anchor>a47d9d7dd0bbb1a1f0e1af5cdfc610969</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IR::Vector&lt; IR::Annotation &gt;</type>
      <name>takePragmasAsVector</name>
      <anchorfile>class_v1_1_1_v1_parser_driver.html</anchorfile>
      <anchor>a64854bca1ef5438e365d2b091957b7b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IR::V1Program *</type>
      <name>global</name>
      <anchorfile>class_v1_1_1_v1_parser_driver.html</anchorfile>
      <anchor>a4bbb9faeebe179f02edf5733b0ca6943</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VisitFunctor</name>
    <filename>class_visit_functor.html</filename>
    <base virtualness="virtual">Visitor</base>
  </compound>
  <compound kind="class">
    <name>Visitor</name>
    <filename>class_visitor.html</filename>
    <class kind="class">Visitor::ChangeTracker</class>
    <class kind="class">Visitor::profile_t</class>
    <class kind="class">Visitor::Tracker</class>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>flow_merge</name>
      <anchorfile>class_visitor.html</anchorfile>
      <anchor>a4049369f706cb1993d2e5c61f7eafc6b</anchor>
      <arglist>(Visitor &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>flow_merge_global_to</name>
      <anchorfile>class_visitor.html</anchorfile>
      <anchor>a59bcd438662899fd2f7e3f32869d9553</anchor>
      <arglist>(cstring)</arglist>
    </member>
    <member kind="function">
      <type>const IR::Node *</type>
      <name>getCurrentNode</name>
      <anchorfile>class_visitor.html</anchorfile>
      <anchor>a523f1f13cfc445cf26ce43f792a886b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>warn</name>
      <anchorfile>class_visitor.html</anchorfile>
      <anchor>a6e6213827bade841b5b0cc56eb5dad66</anchor>
      <arglist>(const int kind, const char *format, const T &amp;node, Args... args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>warning_enabled</name>
      <anchorfile>class_visitor.html</anchorfile>
      <anchor>a2d965ec82111dd4cb5b46c60ea721b82</anchor>
      <arglist>(int warning_kind) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>warning_enabled</name>
      <anchorfile>class_visitor.html</anchorfile>
      <anchor>ade6b7d83c083c4fbfb1b9cd414abdc67</anchor>
      <arglist>(const Visitor *visitor, int warning_kind)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>join_flows</name>
      <anchorfile>class_visitor.html</anchorfile>
      <anchor>a9823f2885dd4bacbe7ba87cc4bf71de3</anchor>
      <arglist>(const IR::Node *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>post_join_flows</name>
      <anchorfile>class_visitor.html</anchorfile>
      <anchor>a0f7691c588193090f8a4a4aa0960d19b</anchor>
      <arglist>(const IR::Node *, const IR::Node *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Visitor::ChangeTracker</name>
    <filename>class_visitor_1_1_change_tracker.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>busy</name>
      <anchorfile>class_visitor_1_1_change_tracker.html</anchorfile>
      <anchor>a2caa85ad2a9007ba5b3ec123adfa843f</anchor>
      <arglist>(const IR::Node *n) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>done</name>
      <anchorfile>class_visitor_1_1_change_tracker.html</anchorfile>
      <anchor>a758a2c8c53c2756fd1f9dae33f4efc16</anchor>
      <arglist>(const IR::Node *n) const</arglist>
    </member>
    <member kind="function">
      <type>const IR::Node *</type>
      <name>finalResult</name>
      <anchorfile>class_visitor_1_1_change_tracker.html</anchorfile>
      <anchor>a2228372655c85917342c018c604e5438</anchor>
      <arglist>(const IR::Node *n) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>finish</name>
      <anchorfile>class_visitor_1_1_change_tracker.html</anchorfile>
      <anchor>aab56e79f19afd5f7ed426aa6ef906e81</anchor>
      <arglist>(const IR::Node *orig, const IR::Node *final)</arglist>
    </member>
    <member kind="function">
      <type>const IR::Node *</type>
      <name>result</name>
      <anchorfile>class_visitor_1_1_change_tracker.html</anchorfile>
      <anchor>a467cd88ea2275c756b10bbc65862bd68</anchor>
      <arglist>(const IR::Node *n) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>revisit_visited</name>
      <anchorfile>class_visitor_1_1_change_tracker.html</anchorfile>
      <anchor>a256b9bb5a4b891dc92be00fd2c58ffa2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shouldVisitOnce</name>
      <anchorfile>class_visitor_1_1_change_tracker.html</anchorfile>
      <anchor>a448425b54af6827484a120d2cdda0198</anchor>
      <arglist>(const IR::Node *n) const</arglist>
    </member>
    <member kind="function">
      <type>VisitStatus</type>
      <name>try_start</name>
      <anchorfile>class_visitor_1_1_change_tracker.html</anchorfile>
      <anchor>a0ac26f1f217ebe27e16a9fa0da8f452e</anchor>
      <arglist>(const IR::Node *n, bool defaultVisitOnce)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Visitor::profile_t</name>
    <filename>class_visitor_1_1profile__t.html</filename>
  </compound>
  <compound kind="class">
    <name>Visitor::Tracker</name>
    <filename>class_visitor_1_1_tracker.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>busy</name>
      <anchorfile>class_visitor_1_1_tracker.html</anchorfile>
      <anchor>a52bdbfc3559fae095ef95a24f31a047f</anchor>
      <arglist>(const IR::Node *n) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>done</name>
      <anchorfile>class_visitor_1_1_tracker.html</anchorfile>
      <anchor>a8f7ac9586bf81939e1a0ee23c77dd096</anchor>
      <arglist>(const IR::Node *n) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>class_visitor_1_1_tracker.html</anchorfile>
      <anchor>a718ba083357590195a6aeab7bb7f67d8</anchor>
      <arglist>(const IR::Node *n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>revisit_visited</name>
      <anchorfile>class_visitor_1_1_tracker.html</anchorfile>
      <anchor>a7321b4c2d34bf5e42da3b8effcc87d03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shouldVisitOnce</name>
      <anchorfile>class_visitor_1_1_tracker.html</anchorfile>
      <anchor>a085f1ebe1bd77d518472aa4ea1f5e482</anchor>
      <arglist>(const IR::Node *n) const</arglist>
    </member>
    <member kind="function">
      <type>VisitStatus</type>
      <name>try_start</name>
      <anchorfile>class_visitor_1_1_tracker.html</anchorfile>
      <anchor>afd2e6b4c992ffb823d3f9863e54017da</anchor>
      <arglist>(const IR::Node *n, bool defaultVisitOnce)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Visitor_Context</name>
    <filename>struct_visitor___context.html</filename>
  </compound>
  <compound kind="namespace">
    <name>DPDK</name>
    <filename>namespace_d_p_d_k.html</filename>
    <class kind="struct">DPDK::actionAttributes</class>
    <class kind="class">DPDK::AddFieldsToPseudoHeader</class>
    <class kind="class">DPDK::AlignHdrMetaField</class>
    <class kind="class">DPDK::BranchingInstructionGeneration</class>
    <class kind="class">DPDK::BreakLogicalExpressionParenthesis</class>
    <class kind="struct">DPDK::ByteAlignment</class>
    <class kind="class">DPDK::CheckExternInvocation</class>
    <class kind="class">DPDK::CheckPNAExternInvocation</class>
    <class kind="class">DPDK::CollectActionUses</class>
    <class kind="class">DPDK::CollectAddOnMissTable</class>
    <class kind="class">DPDK::CollectDirectCounterMeter</class>
    <class kind="class">DPDK::CollectErrors</class>
    <class kind="class">DPDK::CollectExternDeclaration</class>
    <class kind="class">DPDK::CollectInternetChecksumInstance</class>
    <class kind="class">DPDK::CollectIPSecInfo</class>
    <class kind="class">DPDK::CollectLocalStructAndFlatten</class>
    <class kind="class">DPDK::CollectLocalVariables</class>
    <class kind="class">DPDK::CollectMetadataHeaderInfo</class>
    <class kind="class">DPDK::CollectProgramStructure</class>
    <class kind="class">DPDK::CollectStructLocalVariables</class>
    <class kind="class">DPDK::CollectTableInfo</class>
    <class kind="class">DPDK::CollectUseDefInfo</class>
    <class kind="class">DPDK::CollectUsedMetadataField</class>
    <class kind="class">DPDK::ConvertActionSelectorAndProfile</class>
    <class kind="class">DPDK::ConvertBinaryOperationTo2Params</class>
    <class kind="class">DPDK::ConvertInternetChecksum</class>
    <class kind="class">DPDK::ConvertLogicalExpression</class>
    <class kind="struct">DPDK::ConvertLookahead</class>
    <class kind="class">DPDK::ConvertStatementToDpdk</class>
    <class kind="class">DPDK::ConvertToDpdkArch</class>
    <class kind="class">DPDK::ConvertToDpdkControl</class>
    <class kind="class">DPDK::ConvertToDpdkParser</class>
    <class kind="class">DPDK::ConvertToDpdkProgram</class>
    <class kind="class">DPDK::ConvertToString</class>
    <class kind="class">DPDK::CopyMatchKeysToSingleStruct</class>
    <class kind="class">DPDK::CopyPropagationAndElimination</class>
    <class kind="class">DPDK::DeclarationInjector</class>
    <class kind="class">DPDK::DefActionValue</class>
    <class kind="class">DPDK::DirectionToRegRead</class>
    <class kind="class">DPDK::DismantleMuxExpressions</class>
    <class kind="struct">DPDK::DpdkAddPseudoHeader</class>
    <class kind="class">DPDK::DpdkAddPseudoHeaderDecl</class>
    <class kind="class">DPDK::DpdkArchFirst</class>
    <class kind="class">DPDK::DpdkArchLast</class>
    <class kind="class">DPDK::DpdkAsmOptimization</class>
    <class kind="class">DPDK::DpdkBackend</class>
    <class kind="class">DPDK::DpdkContextGenerator</class>
    <class kind="struct">DPDK::DpdkHandleIPSec</class>
    <class kind="class">DPDK::DpdkMidEnd</class>
    <class kind="class">DPDK::DpdkOptions</class>
    <class kind="class">DPDK::ElimHeaderCopy</class>
    <class kind="class">DPDK::EliminateHeaderCopy</class>
    <class kind="class">DPDK::EliminateUnusedAction</class>
    <class kind="class">DPDK::ElimUnusedActions</class>
    <class kind="class">DPDK::EmitDpdkTableConfig</class>
    <class kind="class">DPDK::EnumOn32Bits</class>
    <class kind="class">DPDK::ErrorWidth</class>
    <class kind="class">DPDK::ExpressionUnroll</class>
    <class kind="struct">DPDK::externAttributes</class>
    <class kind="struct">DPDK::fieldInfo</class>
    <class kind="class">DPDK::HaveNonHeaderChecksumArgs</class>
    <class kind="class">DPDK::HaveNonHeaderLargeOperandAssignment</class>
    <class kind="class">DPDK::IfStatementUnroll</class>
    <class kind="class">DPDK::InjectFixedMetadataField</class>
    <class kind="class">DPDK::InjectInternetChecksumIntermediateValue</class>
    <class kind="class">DPDK::InjectJumboStruct</class>
    <class kind="class">DPDK::InsertReqDeclForIPSec</class>
    <class kind="class">DPDK::IsDirectionMetadataUsed</class>
    <class kind="struct">DPDK::keyElementInfo</class>
    <class kind="struct">DPDK::keyInfo</class>
    <class kind="class">DPDK::LogicalExpressionUnroll</class>
    <class kind="class">DPDK::MoveCollectedStructLocalVariableToMetadata</class>
    <class kind="class">DPDK::MoveNonHeaderFieldsToPseudoHeader</class>
    <class kind="class">DPDK::PrependPassRecircId</class>
    <class kind="class">DPDK::PrependPDotToActionArgs</class>
    <class kind="class">DPDK::ProcessControls</class>
    <class kind="class">DPDK::RemoveConsecutiveJmpAndLabel</class>
    <class kind="class">DPDK::RemoveLabelAfterLabel</class>
    <class kind="class">DPDK::RemoveRedundantLabel</class>
    <class kind="class">DPDK::RemoveUnusedMetadataFields</class>
    <class kind="class">DPDK::ReplaceHdrMetaField</class>
    <class kind="struct">DPDK::SelectionTable</class>
    <class kind="class">DPDK::ShortenTokenLength</class>
    <class kind="class">DPDK::SplitActionProfileTable</class>
    <class kind="class">DPDK::SplitActionSelectorTable</class>
    <class kind="class">DPDK::SplitP4TableCommon</class>
    <class kind="class">DPDK::StatementUnroll</class>
    <class kind="class">DPDK::SwapSimpleExpressionToFrontOfLogicalExpression</class>
    <class kind="class">DPDK::SwitchHandler</class>
    <class kind="struct">DPDK::TableAttributes</class>
    <class kind="class">DPDK::TdiBfrtConf</class>
    <class kind="class">DPDK::ThreadJumps</class>
    <class kind="struct">DPDK::TopLevelCtxt</class>
    <class kind="class">DPDK::TypeWidthValidator</class>
    <class kind="class">DPDK::UpdateActionForSwitch</class>
    <class kind="class">DPDK::ValidateAddOnMissExterns</class>
    <class kind="class">DPDK::ValidateDirectCounterMeter</class>
    <class kind="class">DPDK::ValidateOperandSize</class>
    <member kind="variable">
      <type>const char</type>
      <name>PnaMainOutputMetadataOutputPortName</name>
      <anchorfile>namespace_d_p_d_k.html</anchorfile>
      <anchor>ab5ad721df18b389f8eb27fb8b13d96d7</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>graphs</name>
    <filename>namespacegraphs.html</filename>
    <class kind="class">graphs::ControlGraphs</class>
    <class kind="class">graphs::EdgeIf</class>
    <class kind="class">graphs::EdgeSwitch</class>
    <class kind="class">graphs::EdgeTypeIface</class>
    <class kind="class">graphs::EdgeUnconditional</class>
    <class kind="class">graphs::Graph_visitor</class>
    <class kind="class">graphs::Graphs</class>
    <class kind="class">graphs::MidEnd</class>
    <class kind="class">graphs::Options</class>
    <class kind="class">graphs::ParserGraphs</class>
  </compound>
  <compound kind="namespace">
    <name>NetHash</name>
    <filename>namespace_net_hash.html</filename>
    <class kind="struct">NetHash::Identity</class>
    <class kind="struct">NetHash::Reflect</class>
    <member kind="function">
      <type>uint16_t</type>
      <name>crc16</name>
      <anchorfile>namespace_net_hash.html</anchorfile>
      <anchor>a37bb835a0e0207c7a6b5b95cf4f4cd6f</anchor>
      <arglist>(const uint8_t *buf, size_t len)</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>crc16ANSI</name>
      <anchorfile>namespace_net_hash.html</anchorfile>
      <anchor>aff30304ad28e93303cdf6d117acee1b5</anchor>
      <arglist>(const uint8_t *buf, size_t len)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>crc32</name>
      <anchorfile>namespace_net_hash.html</anchorfile>
      <anchor>a9e84c130c366a0cb3911ce0927c8b3d5</anchor>
      <arglist>(const uint8_t *buf, size_t len)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>crc32FCS</name>
      <anchorfile>namespace_net_hash.html</anchorfile>
      <anchor>a629b4c7537cb83d4cc7d5710cb1ad95c</anchor>
      <arglist>(const uint8_t *buf, size_t len)</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>crcCCITT</name>
      <anchorfile>namespace_net_hash.html</anchorfile>
      <anchor>a5ee2a7bc16756c869fe1cc9c3b85998b</anchor>
      <arglist>(const uint8_t *buf, size_t len)</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>csum16</name>
      <anchorfile>namespace_net_hash.html</anchorfile>
      <anchor>a1cec1727556ae59423c1e43eea1234ed</anchor>
      <arglist>(const uint8_t *buf, size_t len)</arglist>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>identity</name>
      <anchorfile>namespace_net_hash.html</anchorfile>
      <anchor>abbc72e6fd903c19bd3128739c923212d</anchor>
      <arglist>(const uint8_t *buf, size_t len)</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>xor16</name>
      <anchorfile>namespace_net_hash.html</anchorfile>
      <anchor>a02848f7ba3463d7d58e2a405046e8627</anchor>
      <arglist>(const uint8_t *buf, size_t len)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>P4</name>
    <filename>namespace_p4.html</filename>
    <namespace>P4::ControlPlaneAPI</namespace>
    <namespace>P4::Coverage</namespace>
    <namespace>P4::literals</namespace>
    <class kind="class">P4::AbstractInliner</class>
    <class kind="class">P4::AbstractParserDriver</class>
    <class kind="class">P4::ActionCall</class>
    <class kind="class">P4::ActionInvocation</class>
    <class kind="class">P4::ActionReplacement</class>
    <class kind="class">P4::ActionsInliner</class>
    <class kind="class">P4::ActionSynthesisPolicy</class>
    <class kind="class">P4::AddMissingIdAnnotations</class>
    <class kind="class">P4::AllDefinitions</class>
    <class kind="class">P4::AnalyzeParser</class>
    <class kind="class">P4::AnnotationSelectionPolicy</class>
    <class kind="class">P4::AnyElement</class>
    <class kind="class">P4::ApplyMethod</class>
    <class kind="class">P4::ApplyOptionsPragmas</class>
    <class kind="class">P4::ApplyTypesToExpressions</class>
    <class kind="class">P4::ArrayLocation</class>
    <class kind="class">P4::BaseLocation</class>
    <class kind="class">P4::BinaryConstraint</class>
    <class kind="class">P4::BindTypeVariables</class>
    <class kind="class">P4::BuiltInMethod</class>
    <class kind="class">P4::CallGraph</class>
    <class kind="struct">P4::CallInfo</class>
    <class kind="class">P4::CanBeImplicitlyCastConstraint</class>
    <class kind="class">P4::CastBooleanTableKeys</class>
    <class kind="class">P4::CheckConstants</class>
    <class kind="class">P4::CheckCoreMethods</class>
    <class kind="class">P4::CheckDeprecated</class>
    <class kind="class">P4::CheckExternInvocationCommon</class>
    <class kind="class">P4::CheckNamedArgs</class>
    <class kind="class">P4::CheckTableSize</class>
    <class kind="class">P4::ChooseEnumRepresentation</class>
    <class kind="class">P4::ChooseErrorRepresentation</class>
    <class kind="class">P4::ClearTypeMap</class>
    <class kind="class">P4::CloneConstants</class>
    <class kind="class">P4::ClonePathExpressions</class>
    <class kind="class">P4::CloneVariableDeclarations</class>
    <class kind="class">P4::CompileTimeOperations</class>
    <class kind="class">P4::ComplexValues</class>
    <class kind="class">P4::ComputeDefUse</class>
    <class kind="class">P4::ComputeParserCG</class>
    <class kind="class">P4::ComputeWriteSet</class>
    <class kind="class">P4::ConstantFolding</class>
    <class kind="class">P4::ConstantFoldingPolicy</class>
    <class kind="class">P4::ConstructorCall</class>
    <class kind="struct">P4::ConstructorMap</class>
    <class kind="class">P4::ContainerConstructorCall</class>
    <class kind="class">P4::ContainsType</class>
    <class kind="class">P4::ControlInstantiation</class>
    <class kind="class">P4::ConvertEnums</class>
    <class kind="class">P4::ConvertErrors</class>
    <class kind="class">P4::CopySrcInfo</class>
    <class kind="class">P4::CopyStructures</class>
    <class kind="class">P4::CreateBuiltins</class>
    <class kind="class">P4::CreateSpecializedTypes</class>
    <class kind="class">P4::CreateStructInitializers</class>
    <class kind="class">P4::DeclarationLookup</class>
    <class kind="class">P4::DefaultArguments</class>
    <class kind="class">P4::DefaultValues</class>
    <class kind="class">P4::Definitions</class>
    <class kind="class">P4::Deprecated</class>
    <class kind="class">P4::DiscoverActionsInlining</class>
    <class kind="class">P4::DiscoverFunctionsInlining</class>
    <class kind="class">P4::DiscoverInlining</class>
    <class kind="class">P4::DoBindTypeVariables</class>
    <class kind="class">P4::DoCheckConstants</class>
    <class kind="class">P4::DoCheckCoreMethods</class>
    <class kind="class">P4::DoConstantFolding</class>
    <class kind="class">P4::DoConvertEnums</class>
    <class kind="class">P4::DoConvertErrors</class>
    <class kind="class">P4::DoCopyStructures</class>
    <class kind="class">P4::DoDefaultArguments</class>
    <class kind="class">P4::DoDefaultValues</class>
    <class kind="class">P4::DoEliminateInvalidHeaders</class>
    <class kind="class">P4::DoEliminateSerEnums</class>
    <class kind="class">P4::DoEliminateSwitch</class>
    <class kind="class">P4::DoEntryPriorities</class>
    <class kind="class">P4::DoExpandEmit</class>
    <class kind="class">P4::DoExpandLookahead</class>
    <class kind="class">P4::DoFlattenHeaderUnion</class>
    <class kind="class">P4::DoFlattenHeaderUnionStack</class>
    <class kind="class">P4::DoGlobalCopyPropagation</class>
    <class kind="class">P4::DoHandleNoMatch</class>
    <class kind="class">P4::DoInstantiateCalls</class>
    <class kind="class">P4::DoLocalCopyPropagation</class>
    <class kind="class">P4::DoMoveActionsToTables</class>
    <class kind="class">P4::DontcareArgs</class>
    <class kind="class">P4::DoOrderArguments</class>
    <class kind="class">P4::DoRemoveActionParameters</class>
    <class kind="class">P4::DoRemoveAssertAssume</class>
    <class kind="class">P4::DoRemoveExits</class>
    <class kind="class">P4::DoRemoveLeftSlices</class>
    <class kind="class">P4::DoRemoveMiss</class>
    <class kind="class">P4::DoRemoveParserControlFlow</class>
    <class kind="class">P4::DoRemoveReturns</class>
    <class kind="class">P4::DoRemoveSelectBooleans</class>
    <class kind="class">P4::DoReplaceNewtype</class>
    <class kind="class">P4::DoReplaceSelectRange</class>
    <class kind="class">P4::DoReplaceTuples</class>
    <class kind="class">P4::DoReplaceTypedef</class>
    <class kind="class">P4::DoResetHeaders</class>
    <class kind="class">P4::DoSetHeaders</class>
    <class kind="class">P4::DoSimplifyControlFlow</class>
    <class kind="class">P4::DoSimplifyDefUse</class>
    <class kind="class">P4::DoSimplifyExpressions</class>
    <class kind="class">P4::DoSimplifyKey</class>
    <class kind="class">P4::DoSimplifyParsers</class>
    <class kind="class">P4::DoSimplifySelectCases</class>
    <class kind="class">P4::DoSimplifySwitch</class>
    <class kind="class">P4::DoSingleArgumentSelect</class>
    <class kind="class">P4::DoStaticAssert</class>
    <class kind="class">P4::DoStrengthReduction</class>
    <class kind="class">P4::DoSynthesizeActions</class>
    <class kind="class">P4::DoTableHit</class>
    <class kind="class">P4::DoTableKeyNames</class>
    <class kind="class">P4::DuplicateActions</class>
    <class kind="class">P4::EliminateInvalidHeaders</class>
    <class kind="class">P4::EliminateNewtype</class>
    <class kind="class">P4::EliminateSerEnums</class>
    <class kind="class">P4::EliminateSubparserCalls</class>
    <class kind="class">P4::EliminateSwitch</class>
    <class kind="class">P4::EliminateTuples</class>
    <class kind="class">P4::EliminateTypedef</class>
    <class kind="class">P4::EntryPriorities</class>
    <class kind="class">P4::EnumInstance</class>
    <class kind="class">P4::EnumOn32Bits</class>
    <class kind="class">P4::EnumRepresentation</class>
    <class kind="class">P4::EqualityConstraint</class>
    <class kind="class">P4::Evaluator</class>
    <class kind="class">P4::EvaluatorPass</class>
    <class kind="class">P4::ExpandEmit</class>
    <class kind="class">P4::ExpandLookahead</class>
    <class kind="class">P4::Explain</class>
    <class kind="class">P4::ExpressionEvaluator</class>
    <class kind="class">P4::ExternConstructorCall</class>
    <class kind="class">P4::ExternFunction</class>
    <class kind="struct">P4::ExternInstance</class>
    <class kind="class">P4::ExternInstantiation</class>
    <class kind="class">P4::ExternMethod</class>
    <class kind="class">P4::FillEnumMap</class>
    <class kind="class">P4::FindActionParameters</class>
    <class kind="class">P4::FindFunctionSpecializations</class>
    <class kind="class">P4::FindGlobalActionUses</class>
    <class kind="class">P4::FindHeaderTypesToReplace</class>
    <class kind="class">P4::FindParameters</class>
    <class kind="class">P4::FindRedundantParsers</class>
    <class kind="class">P4::FindRepeatedActionUses</class>
    <class kind="class">P4::FindSpecializations</class>
    <class kind="class">P4::FindSymbols</class>
    <class kind="class">P4::FindTypesInLogMsgInvocationToReplace</class>
    <class kind="class">P4::FindTypeSpecializations</class>
    <class kind="class">P4::FindTypesToReplace</class>
    <class kind="class">P4::FindVariableValues</class>
    <class kind="class">P4::FlattenHeaders</class>
    <class kind="class">P4::FlattenHeaderUnion</class>
    <class kind="class">P4::FlattenInterfaceStructs</class>
    <class kind="class">P4::FlattenLogMsg</class>
    <class kind="class">P4::FrontEnd</class>
    <class kind="class">P4::FrontEndPolicy</class>
    <class kind="class">P4::FunctionCall</class>
    <class kind="class">P4::FunctionsInliner</class>
    <class kind="struct">P4::FunctionSpecialization</class>
    <class kind="struct">P4::FunctionSpecializationMap</class>
    <class kind="class">P4::GeneralInliner</class>
    <class kind="class">P4::GlobalActionReplacements</class>
    <class kind="class">P4::GlobalCopyPropagation</class>
    <class kind="class">P4::HandleNoMatch</class>
    <class kind="class">P4::HandleValidityHeaderUnion</class>
    <class kind="class">P4::HasExits</class>
    <class kind="class">P4::HasTableApply</class>
    <class kind="class">P4::HierarchicalNames</class>
    <class kind="class">P4::HSIndexContretizer</class>
    <class kind="class">P4::HSIndexFinder</class>
    <class kind="class">P4::HSIndexSimplifier</class>
    <class kind="class">P4::HSIndexTransform</class>
    <class kind="class">P4::IfInParser</class>
    <class kind="class">P4::IHasBlock</class>
    <class kind="class">P4::IndexedLocation</class>
    <class kind="class">P4::Inline</class>
    <class kind="class">P4::InlineActions</class>
    <class kind="class">P4::InlineDriver</class>
    <class kind="class">P4::InlineFunctions</class>
    <class kind="class">P4::InlineList</class>
    <class kind="class">P4::InlinePass</class>
    <class kind="struct">P4::InlineSummary</class>
    <class kind="class">P4::InstanceBase</class>
    <class kind="class">P4::InstantiateDirectCalls</class>
    <class kind="class">P4::Instantiation</class>
    <class kind="class">P4::IOptionPragmaParser</class>
    <class kind="class">P4::IsLikeLeftValue</class>
    <class kind="class">P4::IsMask</class>
    <class kind="class">P4::IsNonConstantArrayIndex</class>
    <class kind="class">P4::IsValid</class>
    <class kind="class">P4::KeyIsSimple</class>
    <class kind="class">P4::KeyNameGenerator</class>
    <class kind="class">P4::KeySideEffect</class>
    <class kind="class">P4::LocalCopyPropagation</class>
    <class kind="class">P4::LocalizeActions</class>
    <class kind="class">P4::LocalizeAllActions</class>
    <class kind="struct">P4::LocationPath</class>
    <class kind="class">P4::LocationSet</class>
    <class kind="class">P4::MethodInstance</class>
    <class kind="class">P4::MidEndLast</class>
    <class kind="class">P4::MinimalNameGenerator</class>
    <class kind="class">P4::MissingIdAssigner</class>
    <class kind="class">P4::MoveActionsToTables</class>
    <class kind="class">P4::MoveConstructors</class>
    <class kind="class">P4::MoveDeclarations</class>
    <class kind="class">P4::MoveInitializers</class>
    <class kind="class">P4::NameGenerator</class>
    <class kind="struct">P4::NestedStructMap</class>
    <class kind="class">P4::NestedStructs</class>
    <class kind="class">P4::OrderArguments</class>
    <class kind="class">P4::OrPolicy</class>
    <class kind="class">P4::P4COptionPragmaParser</class>
    <class kind="class">P4::P4CoreLibrary</class>
    <class kind="class">P4::P4Exception_Model</class>
    <class kind="class">P4::P4ParserDriver</class>
    <class kind="struct">P4::P4RuntimeAPI</class>
    <class kind="class">P4::P4RuntimeSerializer</class>
    <class kind="class">P4::PackageInstantiation</class>
    <class kind="class">P4::PacketIn</class>
    <class kind="class">P4::PacketOut</class>
    <class kind="class">P4::ParameterSubstitution</class>
    <class kind="class">P4::ParseAnnotationBodies</class>
    <class kind="class">P4::ParseAnnotations</class>
    <class kind="class">P4::ParserInfo</class>
    <class kind="class">P4::ParserInstantiation</class>
    <class kind="class">P4::ParserRewriter</class>
    <class kind="struct">P4::ParserStateInfo</class>
    <class kind="class">P4::ParserStructure</class>
    <class kind="class">P4::ParsersUnroll</class>
    <class kind="struct">P4::PerInstanceSubstitutions</class>
    <class kind="class">P4::Predication</class>
    <class kind="class">P4::ProgramMap</class>
    <class kind="class">P4::ProgramPoint</class>
    <class kind="class">P4::ProgramPoints</class>
    <class kind="class">P4::ReadsWrites</class>
    <class kind="class">P4::Reassociation</class>
    <class kind="class">P4::ReferenceMap</class>
    <class kind="class">P4::RemoveActionParameters</class>
    <class kind="class">P4::RemoveAliases</class>
    <class kind="class">P4::RemoveAllUnusedDeclarations</class>
    <class kind="class">P4::RemoveAssertAssume</class>
    <class kind="class">P4::RemoveComplexComparisons</class>
    <class kind="class">P4::RemoveComplexExpressions</class>
    <class kind="class">P4::RemoveComplexExpressionsPolicy</class>
    <class kind="class">P4::RemoveDontcareArgs</class>
    <class kind="class">P4::RemoveExits</class>
    <class kind="class">P4::RemoveGenericTypes</class>
    <class kind="class">P4::RemoveHidden</class>
    <class kind="class">P4::RemoveLeftSlices</class>
    <class kind="class">P4::RemoveMiss</class>
    <class kind="class">P4::RemoveNestedStructs</class>
    <class kind="class">P4::RemoveParserControlFlow</class>
    <class kind="class">P4::RemoveParserIfs</class>
    <class kind="class">P4::RemoveRedundantParsers</class>
    <class kind="class">P4::RemoveReturns</class>
    <class kind="class">P4::RemoveSelectBooleans</class>
    <class kind="class">P4::RemoveUnusedActionParameters</class>
    <class kind="class">P4::RemoveUnusedDeclarations</class>
    <class kind="class">P4::RemoveUnusedHUDeclarations</class>
    <class kind="class">P4::RemoveUnusedPolicy</class>
    <class kind="class">P4::RemoveUselessCasts</class>
    <class kind="class">P4::RenameMap</class>
    <class kind="class">P4::RenameSymbols</class>
    <class kind="class">P4::ReplaceHeaders</class>
    <class kind="class">P4::ReplaceLogMsg</class>
    <class kind="class">P4::ReplacementMap</class>
    <class kind="class">P4::ReplaceSelectRange</class>
    <class kind="class">P4::ReplaceStructs</class>
    <class kind="class">P4::ReplaceTypeUses</class>
    <class kind="class">P4::ResetHeaders</class>
    <class kind="class">P4::ResolutionContext</class>
    <class kind="class">P4::ResolveReferences</class>
    <class kind="class">P4::RewriteAllParsers</class>
    <class kind="class">P4::SameExpression</class>
    <class kind="class">P4::SaturationElim</class>
    <class kind="class">P4::ScalarValue</class>
    <class kind="class">P4::SerEnumInstance</class>
    <class kind="class">P4::SetHeaders</class>
    <class kind="class">P4::SetOfLocations</class>
    <class kind="class">P4::SideEffectOrdering</class>
    <class kind="class">P4::SideEffects</class>
    <class kind="class">P4::SimpleCallInfo</class>
    <class kind="class">P4::SimpleEnumInstance</class>
    <class kind="class">P4::SimpleInlineList</class>
    <class kind="class">P4::SimpleInlineWorkList</class>
    <class kind="class">P4::SimplifyBitwise</class>
    <class kind="class">P4::SimplifyComparisons</class>
    <class kind="class">P4::SimplifyControlFlow</class>
    <class kind="class">P4::SimplifyDefUse</class>
    <class kind="class">P4::SimplifyKey</class>
    <class kind="class">P4::SimplifyParsers</class>
    <class kind="class">P4::SimplifySelectCases</class>
    <class kind="class">P4::SimplifySelectList</class>
    <class kind="class">P4::SimplifySwitch</class>
    <class kind="class">P4::SingleArgumentSelect</class>
    <class kind="struct">P4::SpecializationInfo</class>
    <class kind="class">P4::SpecializationMap</class>
    <class kind="class">P4::Specialize</class>
    <class kind="class">P4::SpecializeAll</class>
    <class kind="class">P4::SpecializeFunctions</class>
    <class kind="class">P4::SpecializeGenericFunctions</class>
    <class kind="class">P4::SpecializeGenericTypes</class>
    <class kind="class">P4::StackVariable</class>
    <class kind="class">P4::StackVariableHash</class>
    <class kind="class">P4::StaticAssert</class>
    <class kind="class">P4::StorageFactory</class>
    <class kind="class">P4::StorageLocation</class>
    <class kind="class">P4::StorageMap</class>
    <class kind="class">P4::StrengthReduction</class>
    <class kind="class">P4::StructInitializers</class>
    <class kind="class">P4::StructLocation</class>
    <class kind="struct">P4::StructTypeReplacement</class>
    <class kind="class">P4::SubstituteParameters</class>
    <class kind="class">P4::SubstituteStructures</class>
    <class kind="class">P4::SwitchAddDefault</class>
    <class kind="class">P4::SymbolicArray</class>
    <class kind="class">P4::SymbolicBool</class>
    <class kind="class">P4::SymbolicEnum</class>
    <class kind="class">P4::SymbolicError</class>
    <class kind="class">P4::SymbolicException</class>
    <class kind="class">P4::SymbolicExtern</class>
    <class kind="class">P4::SymbolicHeader</class>
    <class kind="class">P4::SymbolicHeaderUnion</class>
    <class kind="class">P4::SymbolicInteger</class>
    <class kind="class">P4::SymbolicPacketIn</class>
    <class kind="class">P4::SymbolicStaticError</class>
    <class kind="class">P4::SymbolicStruct</class>
    <class kind="class">P4::SymbolicTuple</class>
    <class kind="class">P4::SymbolicValue</class>
    <class kind="class">P4::SymbolicValueFactory</class>
    <class kind="class">P4::SymbolicVarbit</class>
    <class kind="class">P4::SymbolicVoid</class>
    <class kind="class">P4::SymRenameMap</class>
    <class kind="class">P4::SynthesizeActions</class>
    <class kind="class">P4::TableApplySolver</class>
    <class kind="class">P4::TableHit</class>
    <class kind="class">P4::TableInsertions</class>
    <class kind="class">P4::TableKeyNames</class>
    <class kind="class">P4::TablesInActions</class>
    <class kind="class">P4::TablesInKeys</class>
    <class kind="class">P4::TagGlobalActions</class>
    <class kind="class">P4::ToP4</class>
    <class kind="class">P4::TupleLocation</class>
    <class kind="class">P4::TypeChecking</class>
    <class kind="class">P4::TypeConstraint</class>
    <class kind="class">P4::TypeConstraints</class>
    <class kind="class">P4::TypeInference</class>
    <class kind="class">P4::TypeMap</class>
    <class kind="class">P4::TypeOccursVisitor</class>
    <class kind="struct">P4::TypeSpecialization</class>
    <class kind="struct">P4::TypeSpecializationMap</class>
    <class kind="class">P4::TypeSubstitution</class>
    <class kind="class">P4::TypeSubstitutionVisitor</class>
    <class kind="class">P4::TypeUnification</class>
    <class kind="class">P4::TypeVariableSubstitution</class>
    <class kind="class">P4::TypeVariableSubstitutionVisitor</class>
    <class kind="class">P4::UniqueNames</class>
    <class kind="class">P4::UniqueParameters</class>
    <class kind="class">P4::UnnestSelectList</class>
    <class kind="class">P4::UselessCasts</class>
    <class kind="class">P4::ValidateMatchAnnotations</class>
    <class kind="class">P4::ValidateParsedProgram</class>
    <class kind="class">P4::ValidateTableProperties</class>
    <class kind="class">P4::ValidateValueSets</class>
    <class kind="class">P4::ValueMap</class>
    <class kind="struct">P4::VisitedKey</class>
    <class kind="class">P4::WithFieldsLocation</class>
    <member kind="enumeration">
      <type></type>
      <name>P4RuntimeFormat</name>
      <anchorfile>namespace_p4.html</anchorfile>
      <anchor>a8275cee153f386a7d80f9da8a9231547</anchor>
      <arglist></arglist>
      <enumvalue file="namespace_p4.html" anchor="a8275cee153f386a7d80f9da8a9231547a98ad0e8750ae10ad556ed7a62affb452">BINARY</enumvalue>
      <enumvalue file="namespace_p4.html" anchor="a8275cee153f386a7d80f9da8a9231547a0ecd11c1d7a287401d148a23bbd7a2f8">JSON</enumvalue>
      <enumvalue file="namespace_p4.html" anchor="a8275cee153f386a7d80f9da8a9231547a61a96ffcb251bb9bf0abf8fec19d0ea8">TEXT</enumvalue>
      <enumvalue file="namespace_p4.html" anchor="a8275cee153f386a7d80f9da8a9231547a11b380c6617952628911dc3b7f6feda9">TEXT_PROTOBUF</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ResolutionType</name>
      <anchorfile>namespace_p4.html</anchorfile>
      <anchor>ab6405cbcaf5ac60cc9104a38b3e9073f</anchor>
      <arglist></arglist>
      <enumvalue file="namespace_p4.html" anchor="ab6405cbcaf5ac60cc9104a38b3e9073faed36a1ef76a59ee3f15180e0441188ad">Any</enumvalue>
      <enumvalue file="namespace_p4.html" anchor="ab6405cbcaf5ac60cc9104a38b3e9073faa1fa27779242b4902f7ae3bdd5c6d508">Type</enumvalue>
      <enumvalue file="namespace_p4.html" anchor="ab6405cbcaf5ac60cc9104a38b3e9073fab70c3dc04aa415f6a0bbe9a34f3e2074">TypeVariable</enumvalue>
    </member>
    <member kind="function">
      <type>const IR::Expression *</type>
      <name>convert</name>
      <anchorfile>namespace_p4.html</anchorfile>
      <anchor>a4336d46d8a0b70f02b3d97d662ff4da6</anchor>
      <arglist>(const IR::Expression *expression, const IR::Type *type)</arglist>
    </member>
    <member kind="function">
      <type>P4RuntimeAPI</type>
      <name>generateP4Runtime</name>
      <anchorfile>group__control__plane.html</anchorfile>
      <anchor>gaa3c1e7c533612f655b186bcf0a5924a9</anchor>
      <arglist>(const IR::P4Program *program, cstring arch)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasVarbitsOrUnions</name>
      <anchorfile>namespace_p4.html</anchorfile>
      <anchor>ad633c714dcd226a6c41dbfe987e18190</anchor>
      <arglist>(const TypeMap *typeMap, const IR::Type *type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTerminalState</name>
      <anchorfile>namespace_p4.html</anchorfile>
      <anchor>a7126d7f873055d1e56b3e47815f520f4</anchor>
      <arglist>(IR::ID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>names_overlap</name>
      <anchorfile>namespace_p4.html</anchorfile>
      <anchor>a40d702272373686a775f7d00ba2bfae4</anchor>
      <arglist>(cstring name1, cstring name2)</arglist>
    </member>
    <member kind="function">
      <type>const IR::Expression *</type>
      <name>optimizeExpression</name>
      <anchorfile>namespace_p4.html</anchorfile>
      <anchor>ab5986f06761937322ed5c5734479328b</anchor>
      <arglist>(const IR::Expression *node)</arglist>
    </member>
    <member kind="function">
      <type>const IR::P4Program *</type>
      <name>parseP4File</name>
      <anchorfile>namespace_p4.html</anchorfile>
      <anchor>aac6915a8c883484ef76a27c9e88f66fb</anchor>
      <arglist>(ParserOptions &amp;options)</arglist>
    </member>
    <member kind="function">
      <type>const IR::P4Program *</type>
      <name>parseP4String</name>
      <anchorfile>namespace_p4.html</anchorfile>
      <anchor>a1ad6d6057de241ec7cb27bd1e9dd11ff</anchor>
      <arglist>(const char *sourceFile, unsigned sourceLine, const std::string &amp;input, CompilerOptions::FrontendVersion version)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serializeP4RuntimeIfRequired</name>
      <anchorfile>group__control__plane.html</anchorfile>
      <anchor>gac5908e4f7cec045505a846602d39b5a6</anchor>
      <arglist>(const IR::P4Program *program, const CompilerOptions &amp;options)</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>outOfBoundsStateName</name>
      <anchorfile>namespace_p4.html</anchorfile>
      <anchor>a132e88585329b8dba66c10b61d5bab01</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>P4::ControlPlaneAPI</name>
    <filename>namespace_p4_1_1_control_plane_a_p_i.html</filename>
    <namespace>P4::ControlPlaneAPI::Helpers</namespace>
    <namespace>P4::ControlPlaneAPI::Standard</namespace>
    <class kind="struct">P4::ControlPlaneAPI::ActionRef</class>
    <class kind="struct">P4::ControlPlaneAPI::ControllerType</class>
    <class kind="struct">P4::ControlPlaneAPI::DefaultAction</class>
    <class kind="class">P4::ControlPlaneAPI::FieldIdAllocator</class>
    <class kind="class">P4::ControlPlaneAPI::FlattenHeader</class>
    <class kind="struct">P4::ControlPlaneAPI::MatchField</class>
    <class kind="class">P4::ControlPlaneAPI::P4InfoMaps</class>
    <class kind="class">P4::ControlPlaneAPI::P4RuntimeAnalyzer</class>
    <class kind="struct">P4::ControlPlaneAPI::P4RuntimeArchHandlerBuilderIface</class>
    <class kind="class">P4::ControlPlaneAPI::P4RuntimeArchHandlerIface</class>
    <class kind="class">P4::ControlPlaneAPI::P4RuntimeEntriesConverter</class>
    <class kind="class">P4::ControlPlaneAPI::P4RuntimeSymbolTable</class>
    <class kind="class">P4::ControlPlaneAPI::P4RuntimeSymbolTableIface</class>
    <class kind="class">P4::ControlPlaneAPI::P4RuntimeSymbolType</class>
    <class kind="struct">P4::ControlPlaneAPI::P4SymbolSuffixSet</class>
    <class kind="class">P4::ControlPlaneAPI::ParseP4RuntimeAnnotations</class>
    <class kind="struct">P4::ControlPlaneAPI::TranslationAnnotation</class>
    <class kind="class">P4::ControlPlaneAPI::TypeSpecConverter</class>
    <member kind="function">
      <type>std::optional&lt; p4rt_id_t &gt;</type>
      <name>getIdAnnotation</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a3746f8c2eae065d1931059f3024c24e3</anchor>
      <arglist>(const IR::IAnnotated *node)</arglist>
    </member>
    <member kind="function">
      <type>cstring</type>
      <name>getTypeName</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a0eeb4cc212bdca1fa1c707df8b8775d0</anchor>
      <arglist>(const IR::Type *type, TypeMap *typeMap)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasTranslationAnnotation</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a65de58bffa93fc9062e487768ec2820f</anchor>
      <arglist>(const IR::Type *type, TranslationAnnotation *payload)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isControllerHeader</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>aa0fa3aff0ebb275f0f39072bd7e67a13</anchor>
      <arglist>(const IR::Type_Header *type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isHidden</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a94e16eb37f59dae995b14684e3694707</anchor>
      <arglist>(const IR::Node *node)</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; std::string &gt;</type>
      <name>stringRepr</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a56a9e04abacf3ce2ac4dfcba1c4df19d</anchor>
      <arglist>(const IR::BoolLiteral *constant, int width)</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; std::string &gt;</type>
      <name>stringRepr</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a1cbf60adfd13d0658ae7f497f889c3a7</anchor>
      <arglist>(const IR::Constant *constant, int width)</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; std::string &gt;</type>
      <name>stringReprConstant</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>ab87a21ceb20c681d197b8b1c5ba96d3b</anchor>
      <arglist>(big_int value, int width)</arglist>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>szudzikPairing</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a269c8b3a55a7814446cca3544330094f</anchor>
      <arglist>(p4rt_id_t x, p4rt_id_t y)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::Table *</type>
      <name>findP4RuntimeTable</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a8310beb828d73049cb96da172a4c4a16</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, cstring controlPlaneName)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::Table *</type>
      <name>findP4RuntimeTable</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a225277cb4de654c8aadb6ea3e4a9b830</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, p4rt_id_t id)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::MatchField *</type>
      <name>findP4RuntimeMatchField</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a98d9fcb668a8363e749093d68932ab7b</anchor>
      <arglist>(const p4::config::v1::Table &amp;p4Table, cstring controlPlaneName)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::MatchField *</type>
      <name>findP4RuntimeMatchField</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a24e200e8d8c801231b100aa4c7b807d9</anchor>
      <arglist>(const p4::config::v1::Table &amp;p4Table, p4rt_id_t id)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::Action *</type>
      <name>findP4RuntimeAction</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>ab3ae2745752995c0866ecf3979a03775</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, cstring controlPlaneName)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::Action *</type>
      <name>findP4RuntimeAction</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a04e7eb56b2dd0e30834ceb42550de9ae</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, p4rt_id_t id)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::ActionProfile *</type>
      <name>findP4RuntimeActionProfile</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a53766147f06235964bdee72cb4b11f19</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, cstring controlPlaneName)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::ActionProfile *</type>
      <name>findP4RuntimeActionProfile</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a1bc3125b73c04ebfaeff6a3da56b17f9</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, p4rt_id_t id)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::Counter *</type>
      <name>findP4RuntimeCounter</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a925b69d91be66241b19641461d670c84</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, cstring controlPlaneName)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::Counter *</type>
      <name>findP4RuntimeCounter</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a31112da1ade8df8f85af2a9def06315f</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, p4rt_id_t id)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::DirectCounter *</type>
      <name>findP4RuntimeDirectCounter</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>ae065222c302bb12660b965c029c18dd5</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, cstring controlPlaneName)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::DirectCounter *</type>
      <name>findP4RuntimeDirectCounter</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>ab7e3febb1dce4bd397d586b0b5e8b04b</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, p4rt_id_t id)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::Meter *</type>
      <name>findP4RuntimeMeter</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a28a8d8939b207e6ac5670e443ad24a4e</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, cstring controlPlaneName)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::Meter *</type>
      <name>findP4RuntimeMeter</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a50684a2466429215cf829902a4c38432</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, p4rt_id_t id)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::DirectMeter *</type>
      <name>findP4RuntimeDirectMeter</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a46c9afeb27e069f3dd0c524d77d022f2</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, cstring controlPlaneName)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::DirectMeter *</type>
      <name>findP4RuntimeDirectMeter</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a16c66ee4e11f871ecbd1da435e6ad3c4</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, p4rt_id_t id)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::ControllerPacketMetadata *</type>
      <name>findP4RuntimeControllerPacketMetadata</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>aeb51d823ef466e4156e69abb6ba7b1c5</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, cstring controlPlaneName)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::ControllerPacketMetadata *</type>
      <name>findP4RuntimeControllerPacketMetadata</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>ad50267eae5e8bc0c3d4a3755dbeb2b21</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, p4rt_id_t id)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::ValueSet *</type>
      <name>findP4RuntimeValueSet</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a059738b15f291eb6d4db04b72f15814d</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, cstring controlPlaneName)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::ValueSet *</type>
      <name>findP4RuntimeValueSet</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a8c20acde9fba8dc53409bead46bc72dd</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, p4rt_id_t id)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::Register *</type>
      <name>findP4RuntimeRegister</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a7daeec0864fdba63c26417c8ef3428a4</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, cstring controlPlaneName)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::Register *</type>
      <name>findP4RuntimeRegister</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a5acf79030ec3d8d8cee954c81861de0c</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, p4rt_id_t id)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::Digest *</type>
      <name>findP4RuntimeDigest</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a09d18c9e4bb8674f7dd6a439da654ffd</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, cstring controlPlaneName)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::Digest *</type>
      <name>findP4RuntimeDigest</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>adc881ccac5169c0850b2a1b2eb7104ac</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, p4rt_id_t id)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::Extern *</type>
      <name>findP4RuntimeExtern</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a191687b4cc1c8caa50f6111d9dad792b</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, cstring controlPlaneName)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::Extern *</type>
      <name>findP4RuntimeExtern</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>aeb1008e676298dbd6870647500721ca0</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, p4rt_id_t id)</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; p4rt_id_t &gt;</type>
      <name>getP4RuntimeId</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>afff2e33e0af7906dc94c2b037c5d7d55</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, const P4RuntimeSymbolType &amp;type, cstring controlPlaneName)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>findP4InfoObject</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>aa30fd45e2865ba5160bb9b25def995ac</anchor>
      <arglist>(const It &amp;first, const It &amp;last, p4rt_id_t id) -&gt; const typename std::iterator_traits&lt; It &gt;::value_type *</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::Table *</type>
      <name>findP4RuntimeTable</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a8310beb828d73049cb96da172a4c4a16</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, cstring controlPlaneName)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::Table *</type>
      <name>findP4RuntimeTable</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a225277cb4de654c8aadb6ea3e4a9b830</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, p4rt_id_t id)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::MatchField *</type>
      <name>findP4RuntimeMatchField</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a98d9fcb668a8363e749093d68932ab7b</anchor>
      <arglist>(const p4::config::v1::Table &amp;p4Table, cstring controlPlaneName)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::MatchField *</type>
      <name>findP4RuntimeMatchField</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a24e200e8d8c801231b100aa4c7b807d9</anchor>
      <arglist>(const p4::config::v1::Table &amp;p4Table, p4rt_id_t id)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::Action *</type>
      <name>findP4RuntimeAction</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>ab3ae2745752995c0866ecf3979a03775</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, cstring controlPlaneName)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::Action *</type>
      <name>findP4RuntimeAction</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a04e7eb56b2dd0e30834ceb42550de9ae</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, p4rt_id_t id)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::ActionProfile *</type>
      <name>findP4RuntimeActionProfile</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a53766147f06235964bdee72cb4b11f19</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, cstring controlPlaneName)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::ActionProfile *</type>
      <name>findP4RuntimeActionProfile</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a1bc3125b73c04ebfaeff6a3da56b17f9</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, p4rt_id_t id)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::Counter *</type>
      <name>findP4RuntimeCounter</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a925b69d91be66241b19641461d670c84</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, cstring controlPlaneName)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::Counter *</type>
      <name>findP4RuntimeCounter</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a31112da1ade8df8f85af2a9def06315f</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, p4rt_id_t id)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::DirectCounter *</type>
      <name>findP4RuntimeDirectCounter</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>ae065222c302bb12660b965c029c18dd5</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, cstring controlPlaneName)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::DirectCounter *</type>
      <name>findP4RuntimeDirectCounter</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>ab7e3febb1dce4bd397d586b0b5e8b04b</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, p4rt_id_t id)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::Meter *</type>
      <name>findP4RuntimeMeter</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a28a8d8939b207e6ac5670e443ad24a4e</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, cstring controlPlaneName)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::Meter *</type>
      <name>findP4RuntimeMeter</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a50684a2466429215cf829902a4c38432</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, p4rt_id_t id)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::DirectMeter *</type>
      <name>findP4RuntimeDirectMeter</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a46c9afeb27e069f3dd0c524d77d022f2</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, cstring controlPlaneName)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::DirectMeter *</type>
      <name>findP4RuntimeDirectMeter</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a16c66ee4e11f871ecbd1da435e6ad3c4</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, p4rt_id_t id)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::ControllerPacketMetadata *</type>
      <name>findP4RuntimeControllerPacketMetadata</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>aeb51d823ef466e4156e69abb6ba7b1c5</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, cstring controlPlaneName)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::ControllerPacketMetadata *</type>
      <name>findP4RuntimeControllerPacketMetadata</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>ad50267eae5e8bc0c3d4a3755dbeb2b21</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, p4rt_id_t id)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::ValueSet *</type>
      <name>findP4RuntimeValueSet</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a059738b15f291eb6d4db04b72f15814d</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, cstring controlPlaneName)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::ValueSet *</type>
      <name>findP4RuntimeValueSet</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a8c20acde9fba8dc53409bead46bc72dd</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, p4rt_id_t id)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::Register *</type>
      <name>findP4RuntimeRegister</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a7daeec0864fdba63c26417c8ef3428a4</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, cstring controlPlaneName)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::Register *</type>
      <name>findP4RuntimeRegister</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a5acf79030ec3d8d8cee954c81861de0c</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, p4rt_id_t id)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::Digest *</type>
      <name>findP4RuntimeDigest</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a09d18c9e4bb8674f7dd6a439da654ffd</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, cstring controlPlaneName)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::Digest *</type>
      <name>findP4RuntimeDigest</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>adc881ccac5169c0850b2a1b2eb7104ac</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, p4rt_id_t id)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::Extern *</type>
      <name>findP4RuntimeExtern</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>a191687b4cc1c8caa50f6111d9dad792b</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, cstring controlPlaneName)</arglist>
    </member>
    <member kind="function">
      <type>const p4::config::v1::Extern *</type>
      <name>findP4RuntimeExtern</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>aeb1008e676298dbd6870647500721ca0</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, p4rt_id_t id)</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; p4rt_id_t &gt;</type>
      <name>getP4RuntimeId</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>afff2e33e0af7906dc94c2b037c5d7d55</anchor>
      <arglist>(const p4::config::v1::P4Info &amp;p4Info, const P4RuntimeSymbolType &amp;type, cstring controlPlaneName)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>findP4InfoObject</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i.html</anchorfile>
      <anchor>aa30fd45e2865ba5160bb9b25def995ac</anchor>
      <arglist>(const It &amp;first, const It &amp;last, p4rt_id_t id) -&gt; const typename std::iterator_traits&lt; It &gt;::value_type *</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>P4::ControlPlaneAPI::Helpers</name>
    <filename>namespace_p4_1_1_control_plane_a_p_i_1_1_helpers.html</filename>
    <class kind="struct">P4::ControlPlaneAPI::Helpers::Counterlike</class>
    <class kind="struct">P4::ControlPlaneAPI::Helpers::CounterlikeTraits</class>
    <class kind="struct">P4::ControlPlaneAPI::Helpers::CounterlikeTraits&lt; Standard::CounterExtern&lt; Standard::Arch::PNA &gt; &gt;</class>
    <class kind="struct">P4::ControlPlaneAPI::Helpers::CounterlikeTraits&lt; Standard::CounterExtern&lt; Standard::Arch::PSA &gt; &gt;</class>
    <class kind="struct">P4::ControlPlaneAPI::Helpers::CounterlikeTraits&lt; Standard::CounterExtern&lt; Standard::Arch::V1MODEL &gt; &gt;</class>
    <class kind="struct">P4::ControlPlaneAPI::Helpers::CounterlikeTraits&lt; Standard::CounterExtern&lt; Standard::Arch::V1MODEL2020 &gt; &gt;</class>
    <class kind="struct">P4::ControlPlaneAPI::Helpers::CounterlikeTraits&lt; Standard::MeterExtern&lt; Standard::Arch::PNA &gt; &gt;</class>
    <class kind="struct">P4::ControlPlaneAPI::Helpers::CounterlikeTraits&lt; Standard::MeterExtern&lt; Standard::Arch::PSA &gt; &gt;</class>
    <class kind="struct">P4::ControlPlaneAPI::Helpers::CounterlikeTraits&lt; Standard::MeterExtern&lt; Standard::Arch::V1MODEL &gt; &gt;</class>
    <class kind="struct">P4::ControlPlaneAPI::Helpers::CounterlikeTraits&lt; Standard::MeterExtern&lt; Standard::Arch::V1MODEL2020 &gt; &gt;</class>
    <member kind="function">
      <type>void</type>
      <name>forAllEvaluatedBlocks</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i_1_1_helpers.html</anchorfile>
      <anchor>a2d6115674e4d5fae875460e5d27c3eb7</anchor>
      <arglist>(const IR::Block *block, Func function)</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; ExternInstance &gt;</type>
      <name>getExternInstanceFromProperty</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i_1_1_helpers.html</anchorfile>
      <anchor>a607f0e9ede85c664fdd2e147cc3b95ec</anchor>
      <arglist>(const IR::P4Table *table, const cstring &amp;propertyName, ReferenceMap *refMap, TypeMap *typeMap, bool *isConstructedInPlace)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExternPropertyConstructedInPlace</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i_1_1_helpers.html</anchorfile>
      <anchor>aaa2cc51ee8721ba10ab6bee527a6d583</anchor>
      <arglist>(const IR::P4Table *table, const cstring &amp;propertyName)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>serializeOneAnnotation</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i_1_1_helpers.html</anchorfile>
      <anchor>a5181f9a566ca022cf645cdbaca774494</anchor>
      <arglist>(const IR::Annotation *annotation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serializeOneStructuredAnnotation</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i_1_1_helpers.html</anchorfile>
      <anchor>a361174a5ebca91be259794ea3ccbc4b4</anchor>
      <arglist>(const IR::Annotation *annotation, ::p4::config::v1::StructuredAnnotation *structuredAnnotation)</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>getTableSize</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i_1_1_helpers.html</anchorfile>
      <anchor>aac6c7184abe2253780edfcca8f74f72d</anchor>
      <arglist>(const IR::P4Table *table)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPreamble</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i_1_1_helpers.html</anchorfile>
      <anchor>a689f28774163181be1453d3005c646ae</anchor>
      <arglist>(::p4::config::v1::Preamble *preamble, p4rt_id_t id, cstring name, cstring alias, const IR::IAnnotated *annotated)</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; Counterlike&lt; Kind &gt; &gt;</type>
      <name>getDirectCounterlike</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i_1_1_helpers.html</anchorfile>
      <anchor>aefd926dcaa7b44e8ebff798ddf86ac36</anchor>
      <arglist>(const IR::P4Table *table, ReferenceMap *refMap, TypeMap *typeMap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAnnotations</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i_1_1_helpers.html</anchorfile>
      <anchor>a5fbb40866bc9d1e7166f2434a3f429dd</anchor>
      <arglist>(Message *message, const IR::IAnnotated *annotated)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDocumentation</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i_1_1_helpers.html</anchorfile>
      <anchor>ac52750ca46f514712fea550c90e0d70b</anchor>
      <arglist>(Message *message, const IR::IAnnotated *annotated)</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>getTableSize</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i_1_1_helpers.html</anchorfile>
      <anchor>aac6c7184abe2253780edfcca8f74f72d</anchor>
      <arglist>(const IR::P4Table *table)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPreamble</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i_1_1_helpers.html</anchorfile>
      <anchor>a689f28774163181be1453d3005c646ae</anchor>
      <arglist>(::p4::config::v1::Preamble *preamble, p4rt_id_t id, cstring name, cstring alias, const IR::IAnnotated *annotated)</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; Counterlike&lt; Kind &gt; &gt;</type>
      <name>getDirectCounterlike</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i_1_1_helpers.html</anchorfile>
      <anchor>aefd926dcaa7b44e8ebff798ddf86ac36</anchor>
      <arglist>(const IR::P4Table *table, ReferenceMap *refMap, TypeMap *typeMap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAnnotations</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i_1_1_helpers.html</anchorfile>
      <anchor>a5fbb40866bc9d1e7166f2434a3f429dd</anchor>
      <arglist>(Message *message, const IR::IAnnotated *annotated)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDocumentation</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i_1_1_helpers.html</anchorfile>
      <anchor>ac52750ca46f514712fea550c90e0d70b</anchor>
      <arglist>(Message *message, const IR::IAnnotated *annotated)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>P4::ControlPlaneAPI::Standard</name>
    <filename>namespace_p4_1_1_control_plane_a_p_i_1_1_standard.html</filename>
    <class kind="struct">P4::ControlPlaneAPI::Standard::ActionProfile</class>
    <class kind="struct">P4::ControlPlaneAPI::Standard::ActionProfileTraits</class>
    <class kind="struct">P4::ControlPlaneAPI::Standard::ActionProfileTraits&lt; Arch::PNA &gt;</class>
    <class kind="struct">P4::ControlPlaneAPI::Standard::ActionProfileTraits&lt; Arch::PSA &gt;</class>
    <class kind="struct">P4::ControlPlaneAPI::Standard::ActionProfileTraits&lt; Arch::V1MODEL &gt;</class>
    <class kind="struct">P4::ControlPlaneAPI::Standard::ActionProfileTraits&lt; Arch::V1MODEL2020 &gt;</class>
    <class kind="struct">P4::ControlPlaneAPI::Standard::ActionSelector</class>
    <class kind="struct">P4::ControlPlaneAPI::Standard::ActionSelectorTraits</class>
    <class kind="struct">P4::ControlPlaneAPI::Standard::ActionSelectorTraits&lt; Arch::PNA &gt;</class>
    <class kind="struct">P4::ControlPlaneAPI::Standard::ActionSelectorTraits&lt; Arch::PSA &gt;</class>
    <class kind="struct">P4::ControlPlaneAPI::Standard::ActionSelectorTraits&lt; Arch::V1MODEL &gt;</class>
    <class kind="struct">P4::ControlPlaneAPI::Standard::ActionSelectorTraits&lt; Arch::V1MODEL2020 &gt;</class>
    <class kind="class">P4::ControlPlaneAPI::Standard::BFRuntimeArchHandler</class>
    <class kind="class">P4::ControlPlaneAPI::Standard::BFRuntimeArchHandlerPNA</class>
    <class kind="class">P4::ControlPlaneAPI::Standard::BFRuntimeArchHandlerPSA</class>
    <class kind="struct">P4::ControlPlaneAPI::Standard::CounterExtern</class>
    <class kind="struct">P4::ControlPlaneAPI::Standard::Digest</class>
    <class kind="struct">P4::ControlPlaneAPI::Standard::MeterExtern</class>
    <class kind="class">P4::ControlPlaneAPI::Standard::P4RuntimeArchHandlerCommon</class>
    <class kind="class">P4::ControlPlaneAPI::Standard::P4RuntimeArchHandlerPNA</class>
    <class kind="class">P4::ControlPlaneAPI::Standard::P4RuntimeArchHandlerPSA</class>
    <class kind="class">P4::ControlPlaneAPI::Standard::P4RuntimeArchHandlerPSAPNA</class>
    <class kind="class">P4::ControlPlaneAPI::Standard::P4RuntimeArchHandlerUBPF</class>
    <class kind="class">P4::ControlPlaneAPI::Standard::P4RuntimeArchHandlerV1Model</class>
    <class kind="struct">P4::ControlPlaneAPI::Standard::PNAArchHandlerBuilder</class>
    <class kind="struct">P4::ControlPlaneAPI::Standard::PNAArchHandlerBuilderForDPDK</class>
    <class kind="struct">P4::ControlPlaneAPI::Standard::PSAArchHandlerBuilder</class>
    <class kind="struct">P4::ControlPlaneAPI::Standard::PSAArchHandlerBuilderForDPDK</class>
    <class kind="struct">P4::ControlPlaneAPI::Standard::Register</class>
    <class kind="struct">P4::ControlPlaneAPI::Standard::RegisterTraits</class>
    <class kind="struct">P4::ControlPlaneAPI::Standard::RegisterTraits&lt; Arch::PNA &gt;</class>
    <class kind="struct">P4::ControlPlaneAPI::Standard::RegisterTraits&lt; Arch::PSA &gt;</class>
    <class kind="struct">P4::ControlPlaneAPI::Standard::RegisterTraits&lt; Arch::V1MODEL &gt;</class>
    <class kind="struct">P4::ControlPlaneAPI::Standard::RegisterTraits&lt; Arch::V1MODEL2020 &gt;</class>
    <class kind="class">P4::ControlPlaneAPI::Standard::SymbolType</class>
    <class kind="class">P4::ControlPlaneAPI::Standard::SymbolTypeDPDK</class>
    <class kind="struct">P4::ControlPlaneAPI::Standard::UBPFArchHandlerBuilder</class>
    <class kind="struct">P4::ControlPlaneAPI::Standard::V1ModelArchHandlerBuilder</class>
    <member kind="enumeration">
      <type></type>
      <name>ActionProfileType</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i_1_1_standard.html</anchorfile>
      <anchor>a792dbb2fdf0ca57b2298d6c173b87420</anchor>
      <arglist></arglist>
      <enumvalue file="namespace_p4_1_1_control_plane_a_p_i_1_1_standard.html" anchor="a792dbb2fdf0ca57b2298d6c173b87420a55e8f99cd4149c397fc50a5d1c86bd06">INDIRECT</enumvalue>
      <enumvalue file="namespace_p4_1_1_control_plane_a_p_i_1_1_standard.html" anchor="a792dbb2fdf0ca57b2298d6c173b87420aba1a5184e8c564b95ae18537da4105e0">INDIRECT_WITH_SELECTOR</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Arch</name>
      <anchorfile>namespace_p4_1_1_control_plane_a_p_i_1_1_standard.html</anchorfile>
      <anchor>a18a7a3f3963dced83c2226dce6f928cb</anchor>
      <arglist></arglist>
      <enumvalue file="namespace_p4_1_1_control_plane_a_p_i_1_1_standard.html" anchor="a18a7a3f3963dced83c2226dce6f928cbad7538dfcec9cdee8f7971ff5d8f2fceb">V1MODEL</enumvalue>
      <enumvalue file="namespace_p4_1_1_control_plane_a_p_i_1_1_standard.html" anchor="a18a7a3f3963dced83c2226dce6f928cba041159b903daf7d5923837346de98407">PSA</enumvalue>
      <enumvalue file="namespace_p4_1_1_control_plane_a_p_i_1_1_standard.html" anchor="a18a7a3f3963dced83c2226dce6f928cbaf2cd24d7e684c73c2e04bd5160d034db">PNA</enumvalue>
      <enumvalue file="namespace_p4_1_1_control_plane_a_p_i_1_1_standard.html" anchor="a18a7a3f3963dced83c2226dce6f928cba7a3bf1c1a62766afe3dfe311641894dd">V1MODEL2020</enumvalue>
    </member>
  </compound>
  <compound kind="namespace">
    <name>P4::Coverage</name>
    <filename>namespace_p4_1_1_coverage.html</filename>
    <class kind="class">P4::Coverage::CollectNodes</class>
    <class kind="struct">P4::Coverage::CoverageOptions</class>
    <class kind="struct">P4::Coverage::SourceIdCmp</class>
    <member kind="typedef">
      <type>std::set&lt; const IR::Node *, SourceIdCmp &gt;</type>
      <name>CoverageSet</name>
      <anchorfile>namespace_p4_1_1_coverage.html</anchorfile>
      <anchor>a7e1ff1127c2c2a850efe0f1297046dd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logCoverage</name>
      <anchorfile>namespace_p4_1_1_coverage.html</anchorfile>
      <anchor>ac0454c9e7e6ea91df37c375e7c5a112e</anchor>
      <arglist>(const CoverageSet &amp;all, const CoverageSet &amp;visited, const CoverageSet &amp;new_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printCoverageReport</name>
      <anchorfile>namespace_p4_1_1_coverage.html</anchorfile>
      <anchor>a5c14fbb193609b0775598dfabf674302</anchor>
      <arglist>(const CoverageSet &amp;all, const CoverageSet &amp;visited)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>P4::literals</name>
    <filename>namespace_p4_1_1literals.html</filename>
    <member kind="function">
      <type>cstring</type>
      <name>operator&quot;&quot;_cs</name>
      <anchorfile>namespace_p4_1_1literals.html</anchorfile>
      <anchor>a41de57cd942d16bef1f63b84eb2592ef</anchor>
      <arglist>(const char *str, std::size_t len)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>P4Tools</name>
    <filename>namespace_p4_tools.html</filename>
    <namespace>P4Tools::ControlPlaneState</namespace>
    <namespace>P4Tools::TraceEvents</namespace>
    <class kind="class">P4Tools::AbstractExecutionState</class>
    <class kind="class">P4Tools::AbstractP4cTool</class>
    <class kind="class">P4Tools::AbstractP4cToolOptions</class>
    <class kind="class">P4Tools::AbstractRepCheckedNode</class>
    <class kind="class">P4Tools::ArchSpec</class>
    <class kind="class">P4Tools::CompileContext</class>
    <class kind="class">P4Tools::CompilerConfiguration</class>
    <class kind="class">P4Tools::CompilerResult</class>
    <class kind="class">P4Tools::CompilerTarget</class>
    <class kind="class">P4Tools::ConvertStructExpr</class>
    <class kind="class">P4Tools::ConvertVarbits</class>
    <class kind="class">P4Tools::ExtendedCallGraph</class>
    <class kind="struct">P4Tools::FormatOptions</class>
    <class kind="class">P4Tools::HSIndexToMember</class>
    <class kind="struct">P4Tools::InheritedCompilerOptionSpec</class>
    <class kind="class">P4Tools::MaskBuilder</class>
    <class kind="class">P4Tools::MidEnd</class>
    <class kind="class">P4Tools::Model</class>
    <class kind="class">P4Tools::NamespaceContext</class>
    <class kind="class">P4Tools::P4Constants</class>
    <class kind="class">P4Tools::P4ProgramDCGCreator</class>
    <class kind="class">P4Tools::ReachabilityEngine</class>
    <class kind="class">P4Tools::ReachabilityEngineState</class>
    <class kind="class">P4Tools::SymbolicEnv</class>
    <class kind="class">P4Tools::Taint</class>
    <class kind="class">P4Tools::TaintPropagator</class>
    <class kind="class">P4Tools::Target</class>
    <class kind="class">P4Tools::TraceEvent</class>
    <class kind="class">P4Tools::Utils</class>
    <class kind="class">P4Tools::Z3Solver</class>
    <class kind="class">P4Tools::Z3SolverAccessor</class>
    <class kind="class">P4Tools::Z3Translator</class>
    <member kind="typedef">
      <type>std::optional&lt; std::reference_wrapper&lt; const CompilerResult &gt; &gt;</type>
      <name>CompilerResultOrError</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>a13fdc77c87c7de9e4a842aa897793c5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; const IR::Expression * &gt;</type>
      <name>ConstraintsVector</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>ac8da1190931edee3539ca77b1e01586d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::container::flat_map&lt; IR::StateVariable, const IR::Expression * &gt;</type>
      <name>SymbolicMapType</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>a937e208f74ad1f4d660f8a2bd27bf217</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; ordered_map&lt; unsigned, const IR::SymbolicVariable * &gt; &gt;</type>
      <name>Z3DeclaredVariablesMap</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>a097f99da5bfcceb51f171a14efd9100f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; const IR::Type_Declaration * &gt;</type>
      <name>argumentsToTypeDeclarations</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>a16d1e36006f9d781002b87c3f394e040</anchor>
      <arglist>(const IR::IGeneralNamespace *ns, const IR::Vector&lt; IR::Argument &gt; *inputArgs)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; uint8_t &gt;</type>
      <name>convertBigIntToBytes</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>a95c693f6605f51aa8b20533b23bb6d20</anchor>
      <arglist>(const big_int &amp;dataInt, int targetWidthBits, bool padLeft)</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; std::string &gt;</type>
      <name>convertToIpv4String</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>ab632dba742c8a939a25939774234c6fa</anchor>
      <arglist>(const std::vector&lt; uint8_t &gt; &amp;byteArray)</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; std::string &gt;</type>
      <name>convertToIpv6String</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>afa4b19cc78ef894259019f4fc915492c</anchor>
      <arglist>(const std::vector&lt; uint8_t &gt; &amp;byteArray)</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; std::string &gt;</type>
      <name>convertToMacString</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>a46baf77e4a92e8267bfc712325b83cd7</anchor>
      <arglist>(const std::vector&lt; uint8_t &gt; &amp;byteArray)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableInformationLogging</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>af9f21e7c9b6aa363bbc78e1de584689c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enablePerformanceLogging</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>ad8d881d9083c9afdd9b1ab5943d4b3be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IR::IDeclaration *</type>
      <name>findProgramDecl</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>a2587c51d118a7fa37a193c9257293ad3</anchor>
      <arglist>(const IR::IGeneralNamespace *ns, const IR::Path *path)</arglist>
    </member>
    <member kind="function">
      <type>const IR::IDeclaration *</type>
      <name>findProgramDecl</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>a9cb398ee3b769285ddff849649e15c3a</anchor>
      <arglist>(const IR::IGeneralNamespace *ns, const IR::PathExpression *pathExpr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>formatBin</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>a36fcc18b9e83e626d8914ab8d37c8973</anchor>
      <arglist>(const big_int &amp;value, int width, const FormatOptions &amp;formatOptions=FormatOptions())</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>formatBinExpr</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>a66d827a358838ed3121e3777073bce66</anchor>
      <arglist>(const IR::Expression *expr, const FormatOptions &amp;formatOptions)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>formatBinOrHex</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>a2e69516e4d76eab8043be218e9bdd575</anchor>
      <arglist>(const big_int &amp;value, const FormatOptions &amp;formatOptions=FormatOptions())</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>formatBinOrHexExpr</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>aa5eaf5d46ae3293b504ec9bf8f5802d3</anchor>
      <arglist>(const IR::Expression *expr, const FormatOptions &amp;formatOptions)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>formatHex</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>a625518a9562cb3a9d1be1cee71ef9fb0</anchor>
      <arglist>(const big_int &amp;value, int width, const FormatOptions &amp;formatOptions=FormatOptions())</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>formatHexExpr</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>afe3fe889bce20bde821c65d28af20f26</anchor>
      <arglist>(const IR::Expression *expr, const FormatOptions &amp;formatOptions)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>formatOctal</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>a2a2e402892ac46fd5286876d9c95b583</anchor>
      <arglist>(const big_int &amp;value, const FormatOptions &amp;formatOptions=FormatOptions())</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>formatOctalExpr</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>a535c3606c75eb5affd5a219366d16408</anchor>
      <arglist>(const IR::Expression *expr, const FormatOptions &amp;formatOptions)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>insertHexSeparators</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>a3977f9cd2063b769dc361c65404cf07a</anchor>
      <arglist>(const std::string &amp;dataStr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>insertOctalSeparators</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>a29db582e37d97efb891dbdfc686a7c87</anchor>
      <arglist>(const std::string &amp;dataStr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>insertSeparators</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>a55a958c4ada0186232c693e7e4c39de4</anchor>
      <arglist>(const std::string &amp;dataStr, const std::string &amp;separator, size_t stride, bool skipFirst)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>logHelper</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>ac0010409e8f958ec781a437ddd4e25b9</anchor>
      <arglist>(boost::format &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>logHelper</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>a13ae5b724005c0a422653f83e61e14cb</anchor>
      <arglist>(boost::format &amp;f, T &amp;&amp;t, Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printFeature</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>a7b751196d7971e3d3b51cac30f897c36</anchor>
      <arglist>(const std::string &amp;label, int level, const std::string &amp;fmt, Arguments &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printInfo</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>a85066c6e843e9a4dbfb92300f471109b</anchor>
      <arglist>(const std::string &amp;fmt, Arguments &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printPerformanceReport</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>a7935d9ee811fd7286a7fa3daee097018</anchor>
      <arglist>(const std::optional&lt; std::filesystem::path &gt; &amp;basePath)</arglist>
    </member>
    <member kind="function">
      <type>const IR::Type_Declaration *</type>
      <name>resolveProgramType</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>afd72193a1ba90b05fa6844d0a2a9a191</anchor>
      <arglist>(const IR::IGeneralNamespace *ns, const IR::Type_Name *type)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>toString</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>a16e0c2a923fd519904b98229aa6dcd62</anchor>
      <arglist>(const z3::expr &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>toString</name>
      <anchorfile>namespace_p4_tools.html</anchorfile>
      <anchor>a5c5f8a89d72fcfde42e7b2f7611c0281</anchor>
      <arglist>(z3::model m)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>P4Tools::ControlPlaneState</name>
    <filename>namespace_p4_tools_1_1_control_plane_state.html</filename>
    <member kind="function">
      <type>const IR::SymbolicVariable *</type>
      <name>getTableActionArgument</name>
      <anchorfile>namespace_p4_tools_1_1_control_plane_state.html</anchorfile>
      <anchor>a84d620b3055ab8625fe7b9b2859d1c8d</anchor>
      <arglist>(cstring tableName, cstring actionName, cstring parameterName, const IR::Type *type)</arglist>
    </member>
    <member kind="function">
      <type>const IR::SymbolicVariable *</type>
      <name>getTableActionChoice</name>
      <anchorfile>namespace_p4_tools_1_1_control_plane_state.html</anchorfile>
      <anchor>a20856e5cff4ffa57852a763df5213113</anchor>
      <arglist>(cstring tableName)</arglist>
    </member>
    <member kind="function">
      <type>const IR::SymbolicVariable *</type>
      <name>getTableActive</name>
      <anchorfile>namespace_p4_tools_1_1_control_plane_state.html</anchorfile>
      <anchor>ad5ffef5f41000079314511aef6b4155f</anchor>
      <arglist>(cstring tableName)</arglist>
    </member>
    <member kind="function">
      <type>const IR::SymbolicVariable *</type>
      <name>getTableKey</name>
      <anchorfile>namespace_p4_tools_1_1_control_plane_state.html</anchorfile>
      <anchor>a1664e5798444cc3cbc80301a2a1d1a60</anchor>
      <arglist>(cstring tableName, cstring keyFieldName, const IR::Type *type)</arglist>
    </member>
    <member kind="function">
      <type>const IR::SymbolicVariable *</type>
      <name>getTableMatchLpmPrefix</name>
      <anchorfile>namespace_p4_tools_1_1_control_plane_state.html</anchorfile>
      <anchor>a4b62c4f0ba104a9b408607a052f115c3</anchor>
      <arglist>(cstring tableName, cstring keyFieldName, const IR::Type *type)</arglist>
    </member>
    <member kind="function">
      <type>const IR::SymbolicVariable *</type>
      <name>getTableTernaryMask</name>
      <anchorfile>namespace_p4_tools_1_1_control_plane_state.html</anchorfile>
      <anchor>a91178d707f61532a7c0b05fa126e9806</anchor>
      <arglist>(cstring tableName, cstring keyFieldName, const IR::Type *type)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>P4Tools::P4Testgen::Bmv2</name>
    <filename>namespace_p4_tools_1_1_p4_testgen_1_1_bmv2.html</filename>
    <class kind="class">P4Tools::P4Testgen::Bmv2::AssertsParser</class>
    <class kind="class">P4Tools::P4Testgen::Bmv2::Bmv2Concolic</class>
    <class kind="class">P4Tools::P4Testgen::Bmv2::BMv2Constants</class>
    <class kind="class">P4Tools::P4Testgen::Bmv2::Bmv2TestBackend</class>
    <class kind="class">P4Tools::P4Testgen::Bmv2::Bmv2TestFramework</class>
    <class kind="class">P4Tools::P4Testgen::Bmv2::Bmv2V1ModelActionProfile</class>
    <class kind="class">P4Tools::P4Testgen::Bmv2::Bmv2V1ModelActionSelector</class>
    <class kind="class">P4Tools::P4Testgen::Bmv2::Bmv2V1ModelCloneInfo</class>
    <class kind="class">P4Tools::P4Testgen::Bmv2::Bmv2V1ModelCloneSpec</class>
    <class kind="class">P4Tools::P4Testgen::Bmv2::Bmv2V1ModelCmdStepper</class>
    <class kind="class">P4Tools::P4Testgen::Bmv2::BMv2V1ModelCompilerResult</class>
    <class kind="class">P4Tools::P4Testgen::Bmv2::Bmv2V1ModelCompilerTarget</class>
    <class kind="class">P4Tools::P4Testgen::Bmv2::Bmv2V1ModelExprStepper</class>
    <class kind="class">P4Tools::P4Testgen::Bmv2::Bmv2V1ModelMeterValue</class>
    <class kind="class">P4Tools::P4Testgen::Bmv2::Bmv2V1ModelProgramInfo</class>
    <class kind="class">P4Tools::P4Testgen::Bmv2::Bmv2V1ModelRegisterValue</class>
    <class kind="class">P4Tools::P4Testgen::Bmv2::Bmv2V1ModelTableStepper</class>
    <class kind="class">P4Tools::P4Testgen::Bmv2::Bmv2V1ModelTestgenTarget</class>
    <class kind="class">P4Tools::P4Testgen::Bmv2::IndexExpression</class>
    <class kind="class">P4Tools::P4Testgen::Bmv2::IndexMap</class>
    <class kind="class">P4Tools::P4Testgen::Bmv2::Lexer</class>
    <class kind="class">P4Tools::P4Testgen::Bmv2::MapDirectExterns</class>
    <class kind="class">P4Tools::P4Testgen::Bmv2::Metadata</class>
    <class kind="class">P4Tools::P4Testgen::Bmv2::MetadataCollection</class>
    <class kind="class">P4Tools::P4Testgen::Bmv2::Optional</class>
    <class kind="class">P4Tools::P4Testgen::Bmv2::PropagateP4RuntimeTranslation</class>
    <class kind="class">P4Tools::P4Testgen::Bmv2::Protobuf</class>
    <class kind="class">P4Tools::P4Testgen::Bmv2::ProtobufIr</class>
    <class kind="struct">P4Tools::P4Testgen::Bmv2::ProtobufIrTest</class>
    <class kind="struct">P4Tools::P4Testgen::Bmv2::ProtobufTest</class>
    <class kind="class">P4Tools::P4Testgen::Bmv2::PTF</class>
    <class kind="class">P4Tools::P4Testgen::Bmv2::Range</class>
    <class kind="class">P4Tools::P4Testgen::Bmv2::RefersToParser</class>
    <class kind="class">P4Tools::P4Testgen::Bmv2::STF</class>
    <class kind="class">P4Tools::P4Testgen::Bmv2::Token</class>
    <member kind="typedef">
      <type>std::map&lt; cstring, const IR::P4Table * &gt;</type>
      <name>DirectExternMap</name>
      <anchorfile>namespace_p4_tools_1_1_p4_testgen_1_1_bmv2.html</anchorfile>
      <anchor>ac7abb51c0665e2e663b411c5d28472a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; cstring, const IR::Type * &gt;</type>
      <name>IdenitifierTypeMap</name>
      <anchorfile>namespace_p4_tools_1_1_p4_testgen_1_1_bmv2.html</anchorfile>
      <anchor>a49c47d5ece9323ea566dff8eba2414be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Token &gt;</type>
      <name>combineTokensToNames</name>
      <anchorfile>namespace_p4_tools_1_1_p4_testgen_1_1_bmv2.html</anchorfile>
      <anchor>a7a8ebce195a69920be27c6f9ebbfdd65</anchor>
      <arglist>(const std::vector&lt; Token &gt; &amp;inputVector)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Token &gt;</type>
      <name>combineTokensToNumbers</name>
      <anchorfile>namespace_p4_tools_1_1_p4_testgen_1_1_bmv2.html</anchorfile>
      <anchor>a32dfc5959ebe401ddfc93d4a1d97afcf</anchor>
      <arglist>(std::vector&lt; Token &gt; input)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Token &gt;</type>
      <name>combineTokensToTableKeys</name>
      <anchorfile>namespace_p4_tools_1_1_p4_testgen_1_1_bmv2.html</anchorfile>
      <anchor>aecd2730a02f8f01ff834a82bde70943b</anchor>
      <arglist>(std::vector&lt; Token &gt; input, cstring tableName)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::vector&lt; Token &gt;, size_t &gt;</type>
      <name>findRightPart</name>
      <anchorfile>namespace_p4_tools_1_1_p4_testgen_1_1_bmv2.html</anchorfile>
      <anchor>a7d5d65aa15d6ce3e5cf970c986753009</anchor>
      <arglist>(std::vector&lt; Token &gt; tokens, size_t index)</arglist>
    </member>
    <member kind="function">
      <type>const IR::Expression *</type>
      <name>getIR</name>
      <anchorfile>namespace_p4_tools_1_1_p4_testgen_1_1_bmv2.html</anchorfile>
      <anchor>a8c29a519076caeddedd857b3f9360e10</anchor>
      <arglist>(std::vector&lt; Token &gt; tokens, const IdenitifierTypeMap &amp;typeMap)</arglist>
    </member>
    <member kind="function">
      <type>const IR::Expression *</type>
      <name>makeConstant</name>
      <anchorfile>namespace_p4_tools_1_1_p4_testgen_1_1_bmv2.html</anchorfile>
      <anchor>aa8a8300596d8f61a4e8304af6947e7c2</anchor>
      <arglist>(Token input, const IdenitifierTypeMap &amp;typeMap, const IR::Type *leftType)</arglist>
    </member>
    <member kind="function">
      <type>const IR::Expression *</type>
      <name>makeSingleExpr</name>
      <anchorfile>namespace_p4_tools_1_1_p4_testgen_1_1_bmv2.html</anchorfile>
      <anchor>a703edb502e67f07e74ffa969a37dd42c</anchor>
      <arglist>(std::vector&lt; const IR::Expression * &gt; input)</arglist>
    </member>
    <member kind="function">
      <type>const IR::Expression *</type>
      <name>pickBinaryExpr</name>
      <anchorfile>namespace_p4_tools_1_1_p4_testgen_1_1_bmv2.html</anchorfile>
      <anchor>a6af0a4a83bb2df09d0cc377c90782615</anchor>
      <arglist>(const Token &amp;token, const IR::Expression *leftL, const IR::Expression *rightL)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Token &gt;</type>
      <name>removeComments</name>
      <anchorfile>namespace_p4_tools_1_1_p4_testgen_1_1_bmv2.html</anchorfile>
      <anchor>af341a73c7168800ed4e7d089fa9a8290</anchor>
      <arglist>(const std::vector&lt; Token &gt; &amp;input)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>P4Tools::P4Testgen::Pna</name>
    <filename>namespace_p4_tools_1_1_p4_testgen_1_1_pna.html</filename>
    <class kind="class">P4Tools::P4Testgen::Pna::Metadata</class>
    <class kind="class">P4Tools::P4Testgen::Pna::MetadataCollection</class>
    <class kind="class">P4Tools::P4Testgen::Pna::Optional</class>
    <class kind="class">P4Tools::P4Testgen::Pna::PnaConstants</class>
    <class kind="class">P4Tools::P4Testgen::Pna::PnaDpdkActionProfile</class>
    <class kind="class">P4Tools::P4Testgen::Pna::PnaDpdkActionSelector</class>
    <class kind="class">P4Tools::P4Testgen::Pna::PnaDpdkCmdStepper</class>
    <class kind="class">P4Tools::P4Testgen::Pna::PnaDpdkCompilerTarget</class>
    <class kind="class">P4Tools::P4Testgen::Pna::PnaDpdkConcolic</class>
    <class kind="class">P4Tools::P4Testgen::Pna::PnaDpdkExprStepper</class>
    <class kind="class">P4Tools::P4Testgen::Pna::PnaDpdkProgramInfo</class>
    <class kind="class">P4Tools::P4Testgen::Pna::PnaDpdkRegisterCondition</class>
    <class kind="class">P4Tools::P4Testgen::Pna::PnaDpdkRegisterValue</class>
    <class kind="class">P4Tools::P4Testgen::Pna::PnaDpdkTableStepper</class>
    <class kind="class">P4Tools::P4Testgen::Pna::PnaDpdkTestgenTarget</class>
    <class kind="class">P4Tools::P4Testgen::Pna::PnaSymbolicVars</class>
    <class kind="class">P4Tools::P4Testgen::Pna::PnaTestBackend</class>
    <class kind="class">P4Tools::P4Testgen::Pna::PTF</class>
    <class kind="class">P4Tools::P4Testgen::Pna::Range</class>
    <class kind="class">P4Tools::P4Testgen::Pna::SharedPnaCmdStepper</class>
    <class kind="class">P4Tools::P4Testgen::Pna::SharedPnaExprStepper</class>
    <class kind="class">P4Tools::P4Testgen::Pna::SharedPnaProgramInfo</class>
    <class kind="class">P4Tools::P4Testgen::Pna::SharedPnaTableStepper</class>
  </compound>
  <compound kind="namespace">
    <name>P4Tools::TraceEvents</name>
    <filename>namespace_p4_tools_1_1_trace_events.html</filename>
    <class kind="class">P4Tools::TraceEvents::AssignmentStatement</class>
    <class kind="class">P4Tools::TraceEvents::Emit</class>
    <class kind="class">P4Tools::TraceEvents::Expression</class>
    <class kind="class">P4Tools::TraceEvents::ExtractFailure</class>
    <class kind="class">P4Tools::TraceEvents::ExtractSuccess</class>
    <class kind="class">P4Tools::TraceEvents::Generic</class>
    <class kind="class">P4Tools::TraceEvents::GenericDescription</class>
    <class kind="class">P4Tools::TraceEvents::IfStatementCondition</class>
    <class kind="class">P4Tools::TraceEvents::MethodCall</class>
    <class kind="class">P4Tools::TraceEvents::Packet</class>
    <class kind="class">P4Tools::TraceEvents::ParserStart</class>
    <class kind="class">P4Tools::TraceEvents::ParserState</class>
  </compound>
  <compound kind="namespace">
    <name>std</name>
    <filename>namespacestd.html</filename>
    <class kind="struct">std::hash&lt; ClosedRange&lt; Unit, Order &gt; &gt;</class>
    <class kind="struct">std::hash&lt; cstring &gt;</class>
    <class kind="struct">std::hash&lt; HalfOpenRange&lt; Unit, Order &gt; &gt;</class>
    <class kind="struct">std::hash&lt; P4::ProgramPoint &gt;</class>
    <class kind="struct">std::hash&lt; std::pair&lt; T1, T2 &gt; &gt;</class>
    <class kind="struct">std::hash&lt; std::tuple&lt; Types... &gt; &gt;</class>
    <class kind="struct">std::hash&lt; table_entry &gt;</class>
  </compound>
  <compound kind="namespace">
    <name>TC</name>
    <filename>namespace_t_c.html</filename>
    <class kind="struct">TC::ActionAttributes</class>
    <class kind="struct">TC::ActionParam</class>
    <class kind="class">TC::ActionTranslationVisitorPNA</class>
    <class kind="struct">TC::Annotation</class>
    <class kind="class">TC::Backend</class>
    <class kind="class">TC::ControlBodyTranslatorPNA</class>
    <class kind="class">TC::ConvertToBackendIR</class>
    <class kind="class">TC::ConvertToEBPFControlPNA</class>
    <class kind="class">TC::ConvertToEBPFDeparserPNA</class>
    <class kind="class">TC::ConvertToEBPFParserPNA</class>
    <class kind="class">TC::ConvertToEbpfPipelineTC</class>
    <class kind="class">TC::ConvertToEbpfPNA</class>
    <class kind="class">TC::CRC16ChecksumAlgorithmPNA</class>
    <class kind="class">TC::CRC32ChecksumAlgorithmPNA</class>
    <class kind="class">TC::CRCChecksumAlgorithmPNA</class>
    <class kind="class">TC::DeparserHdrEmitTranslatorPNA</class>
    <class kind="class">TC::EBPFHashAlgorithmTypeFactoryPNA</class>
    <class kind="class">TC::EBPFPnaParser</class>
    <class kind="class">TC::EBPFTablePNA</class>
    <class kind="class">TC::Extern</class>
    <class kind="class">TC::IngressDeparserPNA</class>
    <class kind="class">TC::InspectPnaProgram</class>
    <class kind="class">TC::IntrospectionGenerator</class>
    <class kind="struct">TC::IntrospectionInfo</class>
    <class kind="struct">TC::KeyFieldAttributes</class>
    <class kind="class">TC::MidEnd</class>
    <class kind="class">TC::ParsePnaArchitecture</class>
    <class kind="class">TC::ParseTCAnnotations</class>
    <class kind="class">TC::PNAArchTC</class>
    <class kind="class">TC::PNAEbpfGenerator</class>
    <class kind="class">TC::PNAErrorCodesGen</class>
    <class kind="class">TC::PnaProgramStructure</class>
    <class kind="class">TC::PnaStateTranslationVisitor</class>
    <class kind="struct">TC::TableAttributes</class>
    <class kind="class">TC::TCIngressPipelinePNA</class>
    <class kind="class">TC::TCOptions</class>
  </compound>
  <compound kind="group">
    <name>control_plane</name>
    <title>Control Plane API Generation</title>
    <filename>group__control__plane.html</filename>
    <namespace>P4::ControlPlaneAPI</namespace>
    <member kind="function">
      <type>P4RuntimeAPI</type>
      <name>P4::generateP4Runtime</name>
      <anchorfile>group__control__plane.html</anchorfile>
      <anchor>gaa3c1e7c533612f655b186bcf0a5924a9</anchor>
      <arglist>(const IR::P4Program *program, cstring arch)</arglist>
    </member>
    <member kind="function">
      <type>P4RuntimeAPI</type>
      <name>P4::P4RuntimeSerializer::generateP4Runtime</name>
      <anchorfile>group__control__plane.html</anchorfile>
      <anchor>gab59a801e20e0f2bd44cb018dff756ece</anchor>
      <arglist>(const IR::P4Program *program, cstring arch)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cstring</type>
      <name>P4::P4RuntimeSerializer::resolveArch</name>
      <anchorfile>group__control__plane.html</anchorfile>
      <anchor>ga0e23dbab92b3b90285e1d7ffec8c2a34</anchor>
      <arglist>(const CompilerOptions &amp;options)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>P4::P4RuntimeAPI::serializeEntriesTo</name>
      <anchorfile>group__control__plane.html</anchorfile>
      <anchor>gaf1876666f715f503d1aa8ab0533fd8bf</anchor>
      <arglist>(std::ostream *destination, P4RuntimeFormat format) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>P4::P4RuntimeAPI::serializeP4InfoTo</name>
      <anchorfile>group__control__plane.html</anchorfile>
      <anchor>ga5689e00f60663216a8931c31c7d235c8</anchor>
      <arglist>(std::ostream *destination, P4RuntimeFormat format) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>P4::serializeP4RuntimeIfRequired</name>
      <anchorfile>group__control__plane.html</anchorfile>
      <anchor>gac5908e4f7cec045505a846602d39b5a6</anchor>
      <arglist>(const IR::P4Program *program, const CompilerOptions &amp;options)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>P4::P4RuntimeSerializer::serializeP4RuntimeIfRequired</name>
      <anchorfile>group__control__plane.html</anchorfile>
      <anchor>gaadf17e235b0196f328a96cd9903e4698</anchor>
      <arglist>(const IR::P4Program *program, const CompilerOptions &amp;options)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>P4::P4RuntimeSerializer::serializeP4RuntimeIfRequired</name>
      <anchorfile>group__control__plane.html</anchorfile>
      <anchor>gafaec7221d97d1f6e5954d0e0086a2949</anchor>
      <arglist>(const P4RuntimeAPI &amp;p4Runtime, const CompilerOptions &amp;options)</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2docs_2_r_e_a_d_m_e</name>
    <title>Repository</title>
    <filename>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2docs_2_r_e_a_d_m_e.html</filename>
  </compound>
  <compound kind="page">
    <name>md_00__revision__history</name>
    <title>Revision History</title>
    <filename>md_00__revision__history.html</filename>
  </compound>
  <compound kind="page">
    <name>md_01__overview</name>
    <title>Overview</title>
    <filename>md_01__overview.html</filename>
  </compound>
  <compound kind="page">
    <name>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2docs_2_i_r</name>
    <title>P4 Compiler Intermediate representation</title>
    <filename>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2docs_2_i_r.html</filename>
  </compound>
  <compound kind="page">
    <name>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2backends_2bmv2_2_r_e_a_d_m_e</name>
    <title>Behavioral Model Backend</title>
    <filename>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2backends_2bmv2_2_r_e_a_d_m_e.html</filename>
  </compound>
  <compound kind="page">
    <name>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2backends_2dpdk_2_r_e_a_d_m_e</name>
    <title>DPDK backend</title>
    <filename>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2backends_2dpdk_2_r_e_a_d_m_e.html</filename>
  </compound>
  <compound kind="page">
    <name>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2backends_2ebpf_2psa_2_r_e_a_d_m_e</name>
    <title>PSA implementation for eBPF backend</title>
    <filename>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2backends_2ebpf_2psa_2_r_e_a_d_m_e.html</filename>
  </compound>
  <compound kind="page">
    <name>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2backends_2ebpf_2_r_e_a_d_m_e</name>
    <title>eBPF Backend</title>
    <filename>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2backends_2ebpf_2_r_e_a_d_m_e.html</filename>
  </compound>
  <compound kind="page">
    <name>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2backends_2graphs_2_r_e_a_d_m_e</name>
    <title>Graphs Backend</title>
    <filename>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2backends_2graphs_2_r_e_a_d_m_e.html</filename>
  </compound>
  <compound kind="page">
    <name>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2backends_2p4test_2_r_e_a_d_m_e</name>
    <title>P4test Backend</title>
    <filename>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2backends_2p4test_2_r_e_a_d_m_e.html</filename>
  </compound>
  <compound kind="page">
    <name>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2backends_2p4tools_2cmake_2_r_e_a_d_m_e</name>
    <title>README</title>
    <filename>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2backends_2p4tools_2cmake_2_r_e_a_d_m_e.html</filename>
  </compound>
  <compound kind="page">
    <name>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2backends_2p4tools_2common_2lib_2_r_e_a_d_m_e</name>
    <title>README</title>
    <filename>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2backends_2p4tools_2common_2lib_2_r_e_a_d_m_e.html</filename>
  </compound>
  <compound kind="page">
    <name>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2backends_2p4tools_2common_2_r_e_a_d_m_e</name>
    <title>README</title>
    <filename>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2backends_2p4tools_2common_2_r_e_a_d_m_e.html</filename>
  </compound>
  <compound kind="page">
    <name>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2backends_2p4tools_2_c_o_n_t_r_i_b_u_t_o_r_s</name>
    <title>Overview</title>
    <filename>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2backends_2p4tools_2_c_o_n_t_r_i_b_u_t_o_r_s.html</filename>
  </compound>
  <compound kind="page">
    <name>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2backends_2p4tools_2modules_2testgen_2benchmarks_2_r_e_a_d_m_e</name>
    <title>P4Testgen Benchmarks</title>
    <filename>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2backends_2p4tools_2modules_2testgen_2benchmarks_2_r_e_a_d_m_e.html</filename>
  </compound>
  <compound kind="page">
    <name>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2backends_2p4tools_2modules_2testgen_2lib_2_r_e_a_d_m_e</name>
    <title>README</title>
    <filename>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2backends_2p4tools_2modules_2testgen_2lib_2_r_e_a_d_m_e.html</filename>
  </compound>
  <compound kind="page">
    <name>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2backends_2p4tools_2modules_2testgen_2_r_e_a_d_m_e</name>
    <title>README</title>
    <filename>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2backends_2p4tools_2modules_2testgen_2_r_e_a_d_m_e.html</filename>
  </compound>
  <compound kind="page">
    <name>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2backends_2p4tools_2modules_2testgen_2targets_2bmv2_2test_2_r_e_a_d_m_e</name>
    <title>CMake Files:</title>
    <filename>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2backends_2p4tools_2modules_2testgen_2targets_2bmv2_2test_2_r_e_a_d_m_e.html</filename>
  </compound>
  <compound kind="page">
    <name>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2backends_2p4tools_2_r_e_a_d_m_e</name>
    <title>P4Tools - Testing Tools For P4 Targets</title>
    <filename>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2backends_2p4tools_2_r_e_a_d_m_e.html</filename>
  </compound>
  <compound kind="page">
    <name>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2backends_2tc_2_r_e_a_d_m_e</name>
    <title>TC backend</title>
    <filename>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2backends_2tc_2_r_e_a_d_m_e.html</filename>
  </compound>
  <compound kind="page">
    <name>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2backends_2ubpf_2docs_2_e_x_a_m_p_l_e_s</name>
    <title>Introduction</title>
    <filename>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2backends_2ubpf_2docs_2_e_x_a_m_p_l_e_s.html</filename>
  </compound>
  <compound kind="page">
    <name>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2backends_2ubpf_2_r_e_a_d_m_e</name>
    <title>Introduction to uBPF Backend</title>
    <filename>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2backends_2ubpf_2_r_e_a_d_m_e.html</filename>
  </compound>
  <compound kind="page">
    <name>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2backends_2ubpf_2tests_2_r_e_a_d_m_e</name>
    <title>Steps to run tests</title>
    <filename>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2backends_2ubpf_2tests_2_r_e_a_d_m_e.html</filename>
  </compound>
  <compound kind="page">
    <name>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2lib_2_r_e_a_d_m_e</name>
    <title>Common Utilities</title>
    <filename>md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2lib_2_r_e_a_d_m_e.html</filename>
  </compound>
  <compound kind="page">
    <name>irdefs</name>
    <title>Intermediate Representation (IR) Classes</title>
    <filename>irdefs.html</filename>
    <docanchor file="irdefs.html" title="B:/OSP/P4c-Documentation-Hosting/ir/README.md">md__b_1_2_o_s_p_2_p4c-_documentation-_hosting_2ir_2_r_e_a_d_m_e</docanchor>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>Welcome to p4 Compiler&apos;s documentation!</title>
    <filename>index.html</filename>
    <docanchor file="index.html" title="Welcome to p4 Compiler&apos;s documentation!">md__doxymain</docanchor>
  </compound>
</tagfile>
